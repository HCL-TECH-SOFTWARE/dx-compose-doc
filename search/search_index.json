{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<ul> <li> <p> What's New?</p> <p>Find out what's new in the latest HCL DX cumulative fix level.</p> <p> Go to What's New</p> </li> <li> <p> DX Architecture</p> <p>HCL DX is scalable and flexible, supports authentication for security and personalization, and aids in integration with various applications.</p> <p> Learn about DX Architecture</p> </li> <li> <p> Deploy DX Compose</p> <p>Learn how to deploy DX into your Kubernetes cluster. </p> <p> Deploy DX</p> </li> <li> <p> System Requirements</p> <p>Know the minimum system requirements for HCL DX Compose.</p> <p> Go to System Requirements</p> </li> <li> <p> HCLSoftware U</p> <p>Explore self-paced learning courses for using HCL DX.</p> <p> Visit HCL Software U</p> </li> <li> <p> HCL Support</p> <p>Discover HCL support bulletins and access your support cases.</p> <p> Access Support</p> </li> <li> <p> Community Forums</p> <p>Join DX community forums to connect with other DX users, ask questions, and share insights.</p> <p> Go to Community Forums</p> </li> <li> <p> DXers User Group</p> <p>Join the DXers group in Discord to participate in discussions related to HCL DX.</p> <p> Join DXers User Group</p> </li> <li> <p> HCL Digital Experience Help Center</p> <p>This Help Center contains documentation for HCL Digital Experience.</p> <p> Go to DX 9.5 Help Center</p> </li> </ul>"},{"location":"deploy_dx/","title":"Deploying DX Compose","text":"<p>Learn how to efficiently deploy Digital Experience (DX) Compose and its WebEngine Core container within your environment. Starting with environment preparation, this guide covers the deployment process, focusing on Helm-based deployments to Kubernetes environments. Steps for installation, configuration, uninstallation, and troubleshooting to ensure a smooth setup and maintenance of the service are provided.</p> <p>Note</p> <p>In this release, instructions for using select features are located in the HCL Digital Experience Help Center. These will be documented in the HCL Digital Experience Compose Help Center in future releases.</p>"},{"location":"deploy_dx/install/","title":"Installing DX Compose","text":"<p>HCL Digital Experience (DX) Compose supports deployment to containerized platforms.</p> <ul> <li>Kubernetes deployments Learn how to install DX Compose in Kubernetes deployments.</li> </ul>"},{"location":"deploy_dx/install/docker_compose/","title":"Docker Compose for HCL DX Compose","text":"<p>Developers with entitlements to HCL Digital Experience (DX) Compose 9.5 can additionally deploy for non-production purposes using Docker Compose. This approach streamlines deployment and configuration of HCL DX Compose 9.5 components. For more information about Docker Compose, see the Docker Compose documentation.  </p>"},{"location":"deploy_dx/install/docker_compose/#deploying-using-docker-compose","title":"Deploying using Docker Compose","text":"<p>To deploy HCL DX Compose 9.5 using Docker Compose, refer to the following steps:</p> <ol> <li> <p>Download the Docker images for the HCL DX Compose 9.5 version you want to deploy. See Download software for more information.</p> </li> <li> <p>Find the HCL DX Compose 9.5 Docker Compose scripts, along with installation and configuration instructions for non-production use, which are published as-is in Github.com in the DX Compose Docker Compose repository.</p> <p>You can find further instructions about how to use the DX Docker Compose scripts in the same repository.</p> </li> </ol>"},{"location":"deploy_dx/install/kubernetes_deployment/containers_overview/","title":"Containers overview","text":"<p>This topic provides administrators with a high-level overview and important prerequisite guidance to help them prepare container environments for later deployments of the HCL Digital Experience Compose 9.5 Kubernetes and OpenShift deployment capabilities using Helm.</p> <p>Administrators can deploy HCL DX Compose 9.5 images to supported container platforms by using Helm charts. A Helm chart deployment provides administrators a large degree of transparency in deployment operations.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/containers_overview/#overview","title":"Overview","text":"<p>Helm is a software package manager that simplifies deployment of applications and services to Red Hat OpenShift and Kubernetes container platforms.</p> <p>Helm is a tool for managing Kubernetes applications and deployments. Helm helps you package all required resource definitions into a single package, called a Helm chart. The Helm charts provide a convenient way to define application deployments with a predefined set of configurable items. Furthermore, Helm charts are written with declarative definitions, applying <code>yaml</code> structures and <code>go</code> templates. This approach provides administrators with transparency about the operations the Helm chart performs during the DX Compose 9.5 container deployment.</p> <p>In addition to foundation packaging and installation capabilities, you can also use Helm to modify and upgrade existing deployments, if the Helm charts are built to support these actions. Configuration changes and application upgrades can both be managed by using Helm.</p> <p>For more information about Helm, refer to documentation about Helm for Red Hat container platforms:  Red Hat OpenShift and Kubernetes.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/containers_overview/#helm-chart-contents","title":"Helm chart contents","text":"<p>The HCL Digital Experience Compose 9.5 Deployment Helm chart (Helm chart name: <code>hcl-dx-deployment</code>) follows standard Helm structures and guidelines.</p> <pre><code>hcl-dx-deployment/\n  templates/            # The directory containing all Helm templates for e.g. Kubernetes resources\n  value-samples/        # Contains sample value files for different types of deployments\n  README.md             # README with information on Helm Chart usage and references to further documentation\n  values.yaml           # Default chart configuration values\n  values.schema.json    # Defines the validation schema for values.yaml \n  Chart.yaml            # The Chart yaml file containing chart specific information\n</code></pre> <ul> <li>templates: The <code>templates</code> directory contains all resource definitions, for example, services and pods.</li> <li>values.yaml: The <code>values.yaml</code> file contains all default values for a deployment. You can customize the deployment by overwriting the default values of the <code>values.yaml</code> file.</li> <li>values.schema.json: To validate the values entered for a deployment, the <code>values.schema.json</code> file provides a configuration whenever an installation or upgrade is performed with Helm.</li> </ul>"},{"location":"deploy_dx/install/kubernetes_deployment/containers_overview/#helm-deployment-flow","title":"Helm deployment flow","text":"<p>The flow chart shows that when you install or upgrade, the Helm chart reads the <code>values.yaml</code> file (and overridden values, either provided through Helm CLI parameters or additional values files). Then, the Helm chart validates the schema. After the schema is validated positively, Helm runs the templating engine to create the Kubernetes resource definitions from the templates in the Helm charts.</p> <p>Finally, Helm accesses the Kubernetes or OpenShift Cluster and creates the resulting Kubernetes resources in the specified namespace.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/containers_overview/#deployment-structure","title":"Deployment structure","text":"<p>Basics per application structure</p> <p>Each deployed application has a similar deployment structure and use a common set of OpenShift or Kubernetes resources that follow naming conventions. Some of the DX Compose 9.5 applications might have a different setup because of their special requirements, for example, the Digital Asset Management component and its persistence definitions.</p> <p>Stateful applications</p> <p></p> <p>DX Compose 9.5 container applications are managed by a StatefulSet, which controls the creation and lifecycle of all pods it is responsible for. These pods store their application in persistent volumes. They use ConfigMaps to adjust application configuration and Secrets to access credentials.</p> <p>Before all pods is a service that manages routing traffic to the Pods. This Service is also called HAProxy. The service fulfills incoming requests from outside the Kubernetes or OpenShift cluster.</p> <p>Stateless applications: Services management</p> <p></p> <p>HAProxy and routing</p> <p>To access applications from the outside, DX Compose deploys a reverse proxy in the form of an HAProxy. This reverse proxy routes the incoming requests to all application services, which then distributes the requests to the corresponding pods hosting the applications.</p> <p>HAProxy uses its configuration to select which request is mapped to which application in the DX Compose 9.5 deployment (back-end). When requests are initiated from outside the Kubernetes or OpenShift cluster, HAProxy tries to fulfill those requests by using the configured routing. If it finds a matching endpoint, it forwards the request to the corresponding service, which then forwards the same request to a Pod that is ready to fulfill the request.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/containers_requirements_limits/","title":"Containerization requirements and limitations","text":"<p>This section describes the requirements for deploying HCL Digital Experience Compose 9.5 images to container platforms. You can also find current limitations.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/containers_requirements_limits/#requirements-for-container-image-versions","title":"Requirements for container image versions","text":"<p>In a single deployment, all container images must come from the same CF release version. Mixing container images from multiple releases in a single deployment is an unsupported configuration.</p> <p>Exceptions are permissible only when HCL requests customers to use a specially provided container image or to try an image version from a different release to diagnose or temporarily resolve a specific issue.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/containers_requirements_limits/#requirements-and-limitations-for-helm-based-deployments","title":"Requirements and limitations for Helm-based deployments","text":"<p>This section describes the requirements and limitations for HCL Digital Experience Compose 9.5 Container deployments that use Helm.</p> <p>HCL DX Compose 9.5 is designed to run on any certified Kubernetes platform (https://www.cncf.io/certification/software-conformance), provided that the conditions apply:</p> <ul> <li>The Kubernetes platform is hosted on x86_64 hardware.</li> <li>The Kubernetes platform is officially supported by Helm (https://helm.sh/docs/topics/kubernetes_distros/).</li> </ul> <p>Although the platforms might be Certified Kubernetes platforms, you might find the environments vary slightly depending on the vendors. HCL Support will make a reasonable effort to assist the customer in problem resolution in scenarios where the Kubernetes version is still under support by the vendor. If there are any unresolved issues, HCL Support will provide alternative implementation recommendations or open Feature Requests for the problem scenario.</p> <p>Internally, HCL tests DX Compose against a range of Kubernetes platforms that is regularly reviewed and updated. HCL does not test with every single platform vendor, but aims to cover a representative sample of popular Kubernetes implementations. </p> <p>To deploy HCL Digital Experience Compose 9.5 to the supported Kubernetes platforms that use Helm, the following elements are required:</p> <ul> <li> <p>Helm installation:</p> <p>Download and install Helm to your target environment. The HCL DX Compose 9.5 container deployment is tested and is supported with Helm v3. For more information regarding the supported Helm version for individual Kubernetes versions, refer to Helm documentation.</p> </li> <li> <p>Container platform capacity resource requirements:</p> </li> </ul> <p>The following table outlines the minimum possible amount of resource requests by the HCL DX Compose 9.5 container components in Helm-based deployments and the minimum number of pods required for each component.</p> <p>To use the minimal configuration, adjust the resource requests in your <code>custom-values.yaml</code> file accordingly. You can use alternatives to these numbers. Increasing any number is not an issue. In fact, for best results in a production environment, increase these numbers to scale to your specific needs. You can also decrease some of these numbers and still be able to start DX Compose (for example, for deployment environments), but this action is not officially supported.</p> <p>All the following CPU sizings relate to an environment with 2nd generation Intel Xeon scalable processors (Cascade Lake 8223CL) or 1st generation Intel Xeon Platinum 8000 series (Skylake 8124M) processors.</p> <p>Note</p> <p>Every Kubernetes node requires some memory for Kubernetes-specific services. Ensure that your Kubernetes Node has enough capacity to host both the Kubernetes services and HCL DX Compose. The overall requested amount of resources might vary based on disabled and enabled applications.</p> Pod name Minimum number of Pods Container Container Image Container CPU request and limit Container Memory request and limit web-engine 1 web-engine web-engine 4000m 6144Mi content-composer 1 content-composer content-composer 100m 128Mi dam-plugin-google-vision 1 dam-plugin-google-vision dam-plugin-google-vision 100m 384Mi dam-plugin-kaltura 1 dam-plugin-kaltura dam-plugin-kaltura 100m 128Mi digital-asset-management 1 digital-asset-management digital-asset-manager 500m 1512Mi prereqs-checker prereqs-checker 100m 64Mi haproxy 1 haproxy haproxy 200m 300Mi image-processor 1 image-processor image-processor 200m 2048Mi license-manager 1 license-manager license-manager 100m 300Mi open-ldap 1 ldap openldap 200m 768Mi persistence-connection-pool 1 persistence-connection-pool persistence-connection-pool 500m 512Mi persistence-node 1 persistence-node persistence-node 500m 1024Mi persistence-metrics-exporter persistence-metrics-exporter 100m 128Mi persistence-repmgr-log logging-sidecar 100m 64Mi system-out-log logging-sidecar 100m 64Mi system-err-log logging-sidecar 100m 64Mi prereqs-checker prereqs-checker 100m 64Mi ring-api 1 ring-api ringapi 100m 256Mi runtime-controller 1 runtime-controller runtime-controller 100m 256Mi open-search-data/manager 1 open-search dx-opensearch 1000m 1536Mi search-middleware-query/data 1 search-middleware dx-search-middlware 500m 512Mi file-processor 1 file-processor dx-file-processor 1000m 2048Mi Overall 9800m 18304Mi <p>Note</p> <p>The overall sums for CPU and memory include all components of HCL DX Compose.  In most cases, you only want to deploy a subset of all components. Therefore, the minimal system requirements decrease accordingly.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/download_sw/","title":"Download the HCL Digital Experience Compose software","text":"<p>New and existing users need to register at the HCL Software License Portal and download their entitled HCL Digital Experience packages.</p> <p>The following software files are packaged and licensed for use with HCL Digital Experience Compose v9.5 and are available in your entitlements on the HCL Software License Portal.</p> <ul> <li>HCL Digital Experience Compose v9.5</li> <li>HCL DX Client</li> <li>HCL Leap 9.3.x for use with DX Compose</li> <li>HCL Volt Foundry 9.5.x for use with DX Compose</li> </ul>"},{"location":"deploy_dx/install/kubernetes_deployment/helm_install_commands/","title":"Install commands to deploy","text":"<p>The following are install commands that are used to deploy HCL Digital Experience (DX) Compose 9.5 Helm Charts.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/helm_install_commands/#install-commands","title":"Install commands","text":"<p>Important</p> <p>Modification to any files (chart.yaml, templates, crds) in hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz, except custom-values.yaml or values.yaml, is not supported.</p> <p>To run the installation of your prepared configurations using Helm, use the following command:</p> <pre><code># Helm install command\nhelm install -n my-namespace -f path/to/your/custom-values.yaml your-release-name path/to/hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz\n</code></pre> <ul> <li>The\u00a0<code>my-namespace</code>\u00a0is the namespace where your HCL Digital Experience Compose 9.5 deployment is installed to.</li> <li>The\u00a0<code>-f path/to/your/custom-values.yaml</code>\u00a0must point to the\u00a0custom-values.yaml\u00a0you have created, which contains all deployment configuration.</li> <li><code>your-release-name</code>\u00a0is the Helm release name and prefixes all resources created in that installation, such as Pods, Services, and others.</li> <li>path/to/hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz\u00a0is the HCL Digital Experience Compose 9.5 Helm Chart that you have extracted as described earlier in the planning and preparation steps.</li> </ul> <p>After a successful deployment, Helm responds with the following message:</p> <pre><code>    NAME: dx\n    LAST DEPLOYED: Thu Jun 17 14:27:58 2021\n    NAMESPACE: my-namespace\n    STATUS: deployed\n    REVISION: 1\n    TEST SUITE: None\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/helm_install_commands/#default-urls-post-installation","title":"Default URLs post installation","text":"<p>During the configuration process, you might need the following URLs to access different administration user interfaces.</p> <p>Use the following default URL to access HCL Digital Experience Compose (WebEngine and WCM):</p> <ul> <li> <p>HCL Digital Experience Compose (WebEngine and WCM)</p> <p>https://yourserver/wps/portal</p> </li> <li> <p>HCL Digital Experience Compose (WebEngine Administration Center)</p> <p>https://yourserver/adminCenter</p> </li> </ul>"},{"location":"deploy_dx/install/kubernetes_deployment/helm_install_commands/#optional-automated-host-extraction","title":"(Optional) Automated host extraction","text":"<p>As described in the Configure networking topic, there are instances wherein you do not know the resulting external IP or FQDN for your deployment and the\u00a0host\u00a0value is empty. In that case, run a Helm upgrade command, and it automatically polls HAProxy and extracts the IP or FQDN values. The Helm Chart logic then populates all application configurations with the correct settings.</p> <p>An example is provided below. You may use the following Helm upgrade command to trigger the automated host extraction:</p> <pre><code># Helm upgrade command\nhelm upgrade -n my-namespace -f path/to/your/custom-values.yaml your-release-name path/to/hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/helm_uninstall/","title":"Uninstalling Helm Deployment","text":"<p>To remove your HCL Digital Experience Compose 9.5 deployment from your deployment using Helm, it is recommended that you use Helm uninstall.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/helm_uninstall/#uninstall-command","title":"Uninstall command","text":"<p>To run the uninstall, use the following command as shown in this example:</p> <pre><code>    # Helm uninstall command\n    helm uninstall your-release-name -n my-namespace\n</code></pre> <p>where\u00a0<code>my-namespace</code>\u00a0is the namespace where your HCL Digital Experience Compose 9.5 deployment is installed to and <code>your-release-name</code>\u00a0is the Helm release name you selected during installation.</p> <p>After a successful deployment, Helm responds with the following message:</p> <pre><code>    release \"your-release-name\" uninstalled\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/image_list/","title":"Container file listings","text":"<p>This section presents the latest available HCL Digital Experience (DX) 9.5 Compose Container images.</p> <p>The following software files are packaged and licensed for use with HCL Digital Experience Compose v9.5 and are available in your entitlements on the HCL Software License Portal.</p> <ul> <li>HCL Digital Experience Compose v9.5</li> <li>HCL DXClient</li> <li>HCL Leap 9.3.x for use with DX Compose</li> <li>HCL Volt Foundry 9.5.x for use with DX Compose</li> </ul> <p>In future continuous delivery updates, entitled customers can obtain the HCL DX 9.5 Compose container updates from the DX_Compose_CF_Updates download package entry in the HCL Software License Portal.</p> <p>Video: How to upload HCL Digital Experience 9.5 container images to a private repository</p>"},{"location":"deploy_dx/install/kubernetes_deployment/image_list/#hcl-dx-95-compose-cf227","title":"HCL DX 9.5 Compose CF227","text":"<p>If you are deploying the HCL DX 9.5 Compose CF227 release, the following software packages are available in your HCL Software License Portal (Flexnet) HCL Digital Experience Compose v9.5 entitlements:</p> <ul> <li>HCL Digital Experience Compose v9.5</li> <li>HCL DXClient</li> <li>HCL Leap 9.3.x for use with DX Compose</li> <li>HCL Volt Foundry 9.5.x for use with DX Compose</li> </ul>"},{"location":"deploy_dx/install/kubernetes_deployment/image_list/#hcl-compose-kubernetes-cf227zip","title":"hcl-compose-kubernetes-CF227.zip","text":"<pre><code>HCL DX Compose notices CF227.txt\nhcl-dx-content-composer-image-v1.40.0_20250425-1905.tar.gz\nhcl-dx-dam-plugin-google-vision-image-v1.0.0_20250425-1907.tar.gz\nhcl-dx-dam-plugin-kaltura-image-v1.0.0_20250425-1908.tar.gz\nhcl-dx-deployment-v2.36.0_20250428-1459.tgz\nhcl-dx-digital-asset-manager-image-v1.39.0_20250425-1945.tar.gz\nhcl-dx-file-processor-image-v2.0.0_20250425-1932.tar.gz\nhcl-dx-haproxy-image-v1.23.0_20250425-1932.tar.gz\nhcl-dx-image-processor-image-v1.40.0_20250425-1933.tar.gz\nhcl-dx-license-manager-image-v95_CF227_20250425-1914.tar.gz\nhcl-dx-logging-sidecar-image-v1.0.0_20250425-1915.tar.gz\nhcl-dx-openldap-image-v2.6.8_20250425-1911.tar.gz\nhcl-dx-opensearch-image-v2.0.0_20250425-1916.tar.gz\nhcl-dx-people-service-image-v1.0.0_20250425-1910.tar.gz\nhcl-dx-persistence-connection-pool-image-v1.37.0_20250425-1931.tar.gz\nhcl-dx-persistence-metrics-exporter-image-v1.35.0_20250425-1930.tar.gz\nhcl-dx-persistence-node-image-v1.27_20250425-1926.tar.gz\nhcl-dx-prereqs-checker-image-v1.0.0_20250425-1933.tar.gz\nhcl-dx-ringapi-image-v1.40.0_20250425-1924.tar.gz\nhcl-dx-runtime-controller-image-v95_CF227_20250425-1917.tar.gz\nhcl-dx-search-middleware-image-v2.0.0_20250425-1929.tar.gz\nhcl-dx-search-v2.25.0_20250428-1459.tgz\nhcl-dx-webengine-image-CF227_20250425-2144.tar.gz\n</code></pre> <p>Locate the HCL Digital Experience Compose v9.5 software and download the files from the HCL Software License Portal (Flexnet).</p> <p>See the System requirements section for more information about the supported Container and Operating Systems.</p> Related information <ul> <li>Download the HCL Digital Experience Compose software</li> </ul>"},{"location":"deploy_dx/install/kubernetes_deployment/install/","title":"Installing DX Compose","text":"<p>This topic provides information on how to install HCL Digital Experience (DX) Compose.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/install/#install-commands","title":"Install commands","text":"<p>The following are install commands that are used to deploy DX Compose 9.5 Helm Charts.</p> <p>Important</p> <p>Modification to any files (chart.yaml, templates, crds) in hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz, except custom-values.yaml or values.yaml, is not supported.</p> <p>To run the installation of your prepared configurations using Helm, use the following command:</p> <pre><code># Helm install command\nhelm install -n my-namespace -f path/to/your/custom-values.yaml your-release-name path/to/hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz\n</code></pre> <ul> <li>The\u00a0<code>my-namespace</code>\u00a0is the namespace where your HCL Digital Experience Compose 9.5 deployment is installed to.</li> <li>The\u00a0<code>-f path/to/your/custom-values.yaml</code>\u00a0must point to the\u00a0custom-values.yaml\u00a0you have created, which contains all deployment configuration.</li> <li><code>your-release-name</code>\u00a0is the Helm release name and prefixes all resources created in that installation, such as Pods, Services, and others.</li> <li>path/to/hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz\u00a0is the HCL Digital Experience Compose 9.5 Helm Chart that you have extracted as described earlier in the planning and preparation steps.</li> </ul> <p>After a successful deployment, Helm responds with the following message:</p> <pre><code>    NAME: dx\n    LAST DEPLOYED: Thu Jun 17 14:27:58 2021\n    NAMESPACE: my-namespace\n    STATUS: deployed\n    REVISION: 1\n    TEST SUITE: None\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/install/#default-urls-post-installation","title":"Default URLs post installation","text":"<p>During the configuration process, you might need the following URLs to access different administration user interfaces.</p> <p>Use the following default URL to access HCL Digital Experience Compose (WebEngine and WCM):</p> <ul> <li> <p>HCL Digital Experience Compose (WebEngine and WCM)</p> <p>https://yourserver/wps/portal</p> </li> <li> <p>HCL Digital Experience Compose (WebEngine Administration Center)</p> <p>https://yourserver/adminCenter</p> </li> </ul>"},{"location":"deploy_dx/install/kubernetes_deployment/install/#optional-automated-host-extraction","title":"(Optional) Automated host extraction","text":"<p>As described in the Configure networking topic, there are instances wherein you do not know the resulting external IP or FQDN for your deployment and the\u00a0host\u00a0value is empty. In that case, run a Helm upgrade command, and it automatically polls HAProxy and extracts the IP or FQDN values. The Helm Chart logic then populates all application configurations with the correct settings.</p> <p>An example is provided below. You may use the following Helm upgrade command to trigger the automated host extraction:</p> <pre><code># Helm upgrade command\nhelm upgrade -n my-namespace -f path/to/your/custom-values.yaml your-release-name path/to/hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/install/#installing-with-the-sample-values-file","title":"Installing with the sample values file","text":"<p>For WebEngine-related configurations, use the sample values file provided inside the Helm chart. The sample values file is located in the unpacked chart directory under <code>values-samples/webEngine/webEngine-sample.yaml</code>. This file disables Core and enables the WebEngine container, and serves as a starting point for a custom WebEngine configuration.</p> <p>To install the Helm chart with the sample values file, add it as an additional argument to the <code>helm install</code> command. For example:</p> <pre><code>helm install -n &lt;NAMESPACE&gt; &lt;RELEASE-NAME&gt; path/to/the/dx-chart -f &lt;your-existing-custom-values-file&gt; -f webEngine-sample.yaml\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/kubernetes_runtime/","title":"Kubernetes runtime","text":"<p>View the latest Kubernetes versions and platforms tested and supported by specific HCL Digital Experience (DX) Compose 9.5 Kubernetes deployments.</p> <p>For best results, customers should remain up-to-date on the latest HCL DX Compose and Kubernetes releases and be aware that HCL DX Compose provides all fixes on the latest release. Customers might be asked to upgrade to the latest HCL DX Compose release to assist with problem determination.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/kubernetes_runtime/#kubernetes-platform-support-policy","title":"Kubernetes platform support policy","text":"<p>HCL DX Compose is designed to run on any Certified Kubernetes platform, provided that the following statements are true:</p> <ul> <li>The Kubernetes platform is hosted on x86-64 hardware.</li> <li>The Kubernetes platform is officially supported by Helm.</li> </ul> <p>HCL tests DX Compose against a range of Kubernetes platforms that are regularly reviewed and updated with the intent of staying as up-to-date as possible. HCL does not test with every platform vendor or with every Kubernetes version, but HCL aims to cover a representative sample of popular Kubernetes implementations. See Table 1 for the list of Kubernetes platforms that HCL tested with.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/kubernetes_runtime/#table-1-tested-kubernetes-platforms-on-full-container-deployment","title":"Table 1: Tested Kubernetes platforms on full container deployment","text":"<p>Table 1 lists the Kubernetes platforms that HCL tested and supports. This is provided for information only.</p> Kubernetes platforms on full deployments - Amazon EKS - Google GKE  - Microsoft Azure AKS  - Red Hat OpenShift  - Amazon EKS / AWS EC2 - Red Hat OpenShift on AWS / AWS EC2"},{"location":"deploy_dx/install/kubernetes_deployment/kubernetes_runtime/#kubernetes-version-support-policy","title":"Kubernetes version support policy","text":"<p>Table 2 lists the Kubernetes versions that HCL tested and supports in HCL DX Compose releases.</p> <ul> <li>Platform providers might release previews of upcoming Kubernetes versions. However, HCL does not provide support for those versions.</li> <li>If you encounter an issue on an unsupported or untested Kubernetes version, you might be asked to install a supported level product.</li> </ul>"},{"location":"deploy_dx/install/kubernetes_deployment/kubernetes_runtime/#table-2-tested-and-supported-kubernetes-versions","title":"Table 2: Tested and supported Kubernetes versions","text":"<p>This table provides information about the Kubernetes versions that are tested and supported by HCL DX Compose releases. Review your chosen Kubernetes platform and ensure that it supports the following Kubernetes versions:</p> CF Level Kubernetes versions CF226 Kubernetes 1.32Kubernetes 1.31Kubernetes 1.30Kubernetes 1.29Kubernetes 1.28Kubernetes 1.27Kubernetes 1.26 CF225 Kubernetes 1.32Kubernetes 1.31Kubernetes 1.30Kubernetes 1.29Kubernetes 1.28Kubernetes 1.27Kubernetes 1.26 CF224 Kubernetes 1.31Kubernetes 1.30Kubernetes 1.29Kubernetes 1.28Kubernetes 1.27Kubernetes 1.26 <p>Important</p> <p>To prevent a possible Kubernetes deployment failure in Kubernetes versions 1.28 and 1.29, it may be required to run the command <code>modprobe br_netfilter</code> before running <code>kubeadm init</code>. This is a potential solution to avoid a networking bridge/iptables issue.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/locating_downloads/","title":"Locating and Downloading DX Products","text":"<p>At this point, you should have been able to register an account and secure access to the License &amp; Delivery Portal site.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/locating_downloads/#for-hcl-customers","title":"For HCL Customers","text":"<p>There are two ways to browse for the DX software installers or patches entitled to your organization.</p> <p>In the home page, there are several widget windows available. Go to the Your Downloads window and select HCL Digital Experience. DX Compose is under this product line.</p> <p></p> <p>Another way is to hover on the Downloads tab and click List Downloads.</p> <p></p> <p>The portal lists the product line of the products you have entitlement for. Again, click HCL Digital Experience to locate DX Compose products.</p> <p></p> <p>The latest version of the software and previous versions are shown.</p> <p></p> <p>In the DX Download Packages list, there are several products that are under the HCL Digital Experience product line according to the product customers have purchased and are entitled to. To track down DXs\u2019 Download Packages Name, refer to the following list:</p>"},{"location":"deploy_dx/install/kubernetes_deployment/locating_downloads/#package-name-according-to-dx-offering","title":"Package name according to DX Offering","text":"<ul> <li>HCL DX 9.5 CF224 Client</li> <li>HCL DX 9.5 CF224 Client Image</li> <li>HCL DX Compose 9.5 CF224</li> <li>HCL Leap PVU v9.3.6 Container - Leap image and Helm charts</li> <li>HCL Leap PVU v9.3.7 Container - Leap image and Helm charts</li> <li>HCL Volt Foundry Command Line Utility</li> <li>HCL Volt Foundry Container Deployment Tool</li> <li>HCL Volt Foundry Container Installer (Kubernetes cluster)</li> </ul>"},{"location":"deploy_dx/install/kubernetes_deployment/locating_downloads/#package-name-for-dxclient-tool","title":"Package name for DXClient Tool","text":"<p>DXClient Tooling (dxclient_vx_xxxxxxxx-xxxx.zip) that are used to support CI/CD release process can be downloaded from the following packages:</p> <ul> <li>HCL DX 9.5 Container Updates</li> <li>HCL Digital Experience Cloud</li> <li>HCL_Portal_8.5_9.0_9.5_CFs</li> </ul> <p>Click on the download package to select the download files.</p> <p>If you only need to download a single file, click on the File Name hyperlink to start the HTTPS download.</p> <p>You can download multiple files at the same time. Select the files you want to download and click Download Selected Files. If you are doing this for the first time, you are prompted to download and install Download Manager.</p> <p>Using Download Manager not recommended</p> <p>There are issues encountered with Download Manager and it is recommended to download files individually instead.</p> <p></p> <p>If you encounter issues with finding  software or downloading files, refer to the Customer Support FAQ section for support.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/locating_downloads/#for-hcl-business-partners","title":"For HCL Business Partners","text":"<p>You can find the product under Activation &amp; Entitlements &gt; List Entitlements.</p> <p></p> <p>Alternatively, go to the Quick Links widget and click List Entitlements to find the product.</p> <p></p> <p>If you are looking for a specific product sold to a company, change the Search scope to choose Sold-to ID if you know your customer\u2019s HCL ID. If you do not know your customer\u2019s HCL ID, switch to Sold-to display name and type in a keyword from your customer\u2019s company name.</p> <p>You can also search the view by Product name.</p> <p></p> <p>Go to Downloads &gt; List Downloads to view the Download packages associated with the Product or the Entitlement. Select the individual offering from the product list. </p> <p></p> <p>From here, select the desired Download Package to look for the individual files and proceed with the Download.</p> <p>It is recommended to download files individually. To start the HTTPS download, click the hyperlink under the File Name column.</p> <p></p> <p>If you encounter issues with finding software or downloading files, refer to the HCL Customer Support Program Resources site for options to get support.</p> Related information <ul> <li>Download and Install from the Software Licensing Portal</li> </ul>"},{"location":"deploy_dx/install/kubernetes_deployment/overview/","title":"Deploying using Helm","text":"<p>Before deployment, see the following resources first.</p> <ul> <li>Kubernetes deployment for an understanding of the capabilities, deployment structures, configuration and scaling options available for HCL DX Compose.</li> <li>Containerization requirements and limitations for an understanding of the requirements, including capacity planning, and current limitations for an HCL Digital Experience Compose deployment using Helm.</li> </ul> <p>HCL DX Compose is designed to run on any Certified Kubernetes platform with some conditions. See the system requirements for Kubernetes platforms for more information.</p> <p>This section provides administrators with instructions to deploy HCL Digital Experience Compose to supported Kubernetes platforms. This includes preparation, installation, and uninstallation of the deployments using Helm.</p> <p>Before you begin: Refer to the latest HCL DX Compose Update image files list provided in the Container image list topic.</p> <p>Important</p> <p>To prevent a possible Kubernetes deployment failure in Kubernetes versions 1.28 and 1.29, it may be required to run the command <code>modprobe br_netfilter</code> before running <code>kubeadm init</code>. This is a potential solution to avoid a networking bridge/iptables issue.</p> <pre><code>flowchart TD\n  accTitle: Steps in DX Compose Helm installation.\n  accDescr: Flowchart showing the mandatory and optional steps in DX Compose Helm installation.\n\n  A([Start])\n  B1[Configure Helm Repository];\n  B2[Load the Images];\n  C[/Mandatory or Optional Tasks/];\n  D[Prepare Namespace];\n  E[Setup Custom Configuration];\n  G[Configure Networking];\n  H[Configure Certificate];\n  I[Optional tasks];\n  J[Install DX Compose]\n\n  A --&gt; B1;\n  B1 --&gt; B2;\n  B2 --&gt; C;\n  C --&gt; |Mandatory| D;\n  D --&gt; E;\n  E --&gt; G;\n  G --&gt; H;\n  H --&gt; J;\n  C ----&gt; |Optional| I;\n  I --&gt; J;\n\n  click B2 \"../preparation/get_the_code/prepare_load_images/\"\n  click D \"../preparation/mandatory_tasks/prepare_namespace/\"\n  click E \"../preparation/mandatory_tasks/prepare_configuration/\"\n  click G \"../preparation/mandatory_tasks/prepare_configure_networking/\"\n  click H \"../preparation/mandatory_tasks/prepare_ingress_certificate/\"\n  click I \"../preparation/optional_tasks/optional_internal_networking/\"\n  click J \"../install/\"\n\n\n\n\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/supported_platforms/","title":"Supported Container Platforms","text":"<p>Learn more about the containerization architecture, including the supported container platforms in deploying HCL Digital Experience Compose images for your environment.</p> <p>HCL Digital Experience users can deploy HCL Digital Experience images in Docker, Red Hat OpenShift 4.1 and higher, also Amazon Elastic Kubernetes Service (EKS), Microsoft Azure Kubernetes Service (AKS) and Google Kubernetes Engine (GKE) for test, development, staging, and production environments.</p> <p>Whether developing, testing, or running a full production environment, use of Docker images and containers are preferred for the ease of deploying applications, including the latest version of HCL Digital Experience Compose.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/update_helm_deployment/","title":"Upgrading Helm deployment","text":"<p>This section describes how to update the configuration of an HCL Digital Experience (DX) Compose 9.5 CF224 or later deployment to Kubernetes or OpenShift installed using Helm.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/update_helm_deployment/#prerequisites","title":"Prerequisites","text":"<p>Make sure that you have completed the following steps:</p> <ul> <li>Prepare your cluster and your <code>custom-values.yaml</code> file. For more information, see Preparation before installing HCL DX Compose using Helm.</li> <li>Install your deployment. For more information, see Install commands to deploy.</li> <li>Ensure customizations made to your deployment are reflected in your <code>custom-values.yaml</code> file.<ul> <li>If an external database is used, make sure the values for the external database are correct in the <code>custom-values.yaml</code> and relevant Kubernetes secrets. For more information, see Configuring an external database and Using the external database and triggering the database transfer.</li> <li>If LDAP is configured for the environment, make sure the values for the LDAP directory are correct in the <code>custom-values.yaml</code> file and relevant Kubernetes secrets. For more information, see Configuring LDAP</li> <li>If WebEngine properties are updated, make sure the updated values are correct in the <code>custom-values.yaml</code>. For more information, see Updating DX Compose WebEngine properties using Helm values.</li> <li>If the WebEngine administrator password is updated in the environment, make sure the Kubernetes secret is up-to-date and the correct values are in the <code>custom-values.yaml</code> file. For more information, see Updating the default administrator password.</li> <li>If configuration changes are made to the deployment using configuration override files, make sure the values are correct in the <code>custom-values.yaml</code> file. For more information, see Configuration changes using overrides and Upgrading the Helm deployment.</li> <li>If the WebEngine URL was changed from the default, make sure the values are correct in the <code>custom-values.yaml</code> file. For more information, see Changing the WebEngine URL and Upgrading the Helm deployment.</li> <li>If custom PVCs are used in your deployment, make sure the values are correct in your <code>custom-values.yaml</code> file.  For more information, see PersistentVolumeClaims.</li> </ul> </li> </ul>"},{"location":"deploy_dx/install/kubernetes_deployment/update_helm_deployment/#recommended-actions-before-a-cf-upgrade","title":"Recommended actions before a CF upgrade","text":"<p>In a Helm-based deployment, moving from one cumulative fix (CF) to another one is also handled through Helm upgrade. The following actions are recommended when applying cumulative fixes:</p> <ul> <li>Back up the file system of the persistent volumes associated with the namespace. Also, take a matching backup of the database associated with the WebEngine pod.</li> <li>If you are running a 24/7 environment, it is recommended to set up a blue/green deployment before applying a CF to ensure high availability. While DX WebEngine stays available with multiple pods, Digital Asset Management (DAM) is not highly available during CF application. See the topic Difference and Similarities Between Traditional and Kubernetes DX Deployments that shows how a DX Compose solution could be deployed for high availability and blue/green deployments in a single Kubernetes cluster.</li> <li>Before upgrading, temporarily set the DAM staging interval to 1440 (24 hours) using the <code>dxclient manage-dam-staging trigger-staging</code> command or adjust the cycleLength to 1440 using the DAM REST API StagingController.updateSubscriberData. Alternatively, you can disable DAM Staging while the publisher (source) and the subscriber (target) are not yet on the same CF version but note that reestablishing staging restages all assets.</li> <li>(Optional) Consider disabling Web Content Manager (WCM) Syndication from and to the current environment.</li> </ul>"},{"location":"deploy_dx/install/kubernetes_deployment/update_helm_deployment/#helm-upgrade-configuration-command","title":"Helm Upgrade configuration command","text":"<p>After making the needed changes to your <code>custom-values.yaml</code> file, run the following command:</p> <pre><code># Helm upgrade command\nhelm upgrade -n your-namespace -f path/to/your/custom-values.yaml your-release-name path/to/hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz\n</code></pre> <ul> <li>The <code>your-namespace</code> is the namespace in which your HCL DX Compose 9.5 deployment is installed and <code>your-release-name</code> is the Helm release name you used when installing.</li> <li>The <code>-f path/to/your/custom-values.yaml</code> parameter must point to the <code>custom-values.yaml</code> you have updated.</li> <li>The <code>path/to/hcl-dx-deployment-vX.X.X\\_XXXXXXXX-XXXX.tar.gz</code> is the HCL DX Compose Helm Chart that you extracted in Preparation before installing HCL DX Compose using Helm.</li> </ul>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/","title":"Preparation before installing with Helm","text":"<p>This section outlines mandatory and optional tasks that need to be done before installation of HCL Digital Experience Compose using Helm.</p> <p>This includes preparing your cluster to have proper access to application container images, creating a custom configuration file that fits your deployment needs and configuring network and application settings to allow your HCL Digital Experience Compose deployment to work properly.</p> <ul> <li>Get the code</li> <li>Mandatory Steps</li> <li>Optional Steps</li> </ul>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/get_the_code/prepare_load_images/","title":"Loading images","text":"<p>This section presents how to load the HCL DX Compose 9.5 images into your container image repository, tag them to fit your repository structure, and push them to your repository, so that all Nodes in your Kubernetes cluster can deploy HCL Digital Experience Compose 9.5 Pods.</p> <p>To use HCL Digital Experience Compose 9.5 in your Kubernetes cluster, you have to make the container images available to all nodes of your cluster. Usually this is done by providing them through a container image repository.</p> <p>Depending on your cloud provider, there may be different types of default container image repositories already configured. Refer to the documentation of your cloud provider for setup and use of such platform container image repository.</p> <p>It is assumed that you have a repository configured and running, and is technically reachable from all your Kubernetes cluster nodes.</p> <p>Tip</p> <p>In the following guidance, the docker CLI is used as a command reference. Tools like Podman may also be used, but are not described in this documentation. The procedure for the use of such tools are the same.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/get_the_code/prepare_load_images/#retrieving-container-images","title":"Retrieving container images","text":"<p>Download the HCL Digital Experience Compose 9.5 package, unpack it locally and load the images into your container registry. You can load the images to your own container registry for others in your organization to access.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/get_the_code/prepare_load_images/#configure-the-helm-chart-image-pull-secret","title":"Configure the Helm chart image pull secret","text":"<p>It is possible to have your Kubernetes deployment pull images directly from a container registry. This requires all of your cluster nodes to be able to reach the container registry.</p> <p>Ensure that you have configured your deployment to authenticate to the container registry, as described in Using ImagePullSecrets.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/get_the_code/prepare_load_images/#from-hcl-digital-experience-95-package","title":"From HCL Digital Experience 9.5 package","text":"<p>The HCL Digital Experience Compose 9.5 Container packages are provided in a compressed .zip file, that can easily be unzipped using a utility of your choice. Refer to the latest Container file listing topic for a list of the files contained in the .zip archive.</p> <p>Unzip the archive. </p> <p>To load the individual image files, you may use the following command, replacing the name of each image you would like to load. You will have to run this command multiple times to load all images.</p> <pre><code># Command to load container image into local repository\n# docker load &lt; image-file-name.tar.gz\ndocker load &lt; hcl-dx-web-engine-image-v95_CFXXX_XXXXXXXX-XXXX.tar.gz\n</code></pre> <p>If you want to load all DX Compose 9.5 image files via one command, use the following command:</p> <pre><code># Command to load all images at once\n# Since HCL Digital Experience Compose images are all containing the word \"images\", \n# we can filter for fitting tar.gz files\nls -f | grep image | xargs -L 1 docker load -i\n</code></pre> <p>This loads all images to your local repository, ready for further usage.</p> <p>You may verify if the loading is successful with the following command:</p> <pre><code># List all images\ndocker images\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/get_the_code/prepare_load_images/#load-images-to-your-own-repository","title":"Load Images to Your Own Repository","text":""},{"location":"deploy_dx/install/kubernetes_deployment/preparation/get_the_code/prepare_load_images/#re-tag-images","title":"Re-tag images","text":"<p>If you are using a Kubernetes cluster that is not configured to operate on your local machine, you may need to push the HCL Digital Experience Compose 9.5 container images to a remote repository.</p> <p>To do so, you need to re-tag the images to point to your remote repository.</p> <p>Warning</p> <p>Do not change the version tags of the DX Compose 9.5 images, because they are used for uniquely identifying which versions of DX Compose applications are running in your cluster.</p> <p>You may re-tag any image using the following command:</p> <pre><code># Re-tag an existing loaded image\n# docker tag OLD_IMAGE_PATH:VERSION NEW_IMAGE_TAG:VERSION\n\n# Example command for DX WebEngine:\ndocker tag dx/web-engine:v95_CF224_20241216-1708 my/test/repository/dx/web-engine:v95_CF224_20241216-1708\n</code></pre> <p>If you want to prefix all HCL Digital Experience Compose 9.5 container images with your repository structure, you may use the following command:</p> <pre><code># Command to prefix all HCL Digital Experience Compose container images\n# export the prefix for the repository structure, without tailing slash\nexport REMOTE_REPO_PREFIX=\"my/test/repository\"\n\n# First we list all HCL Digital Experience Compose 9.5 Images, then we remove the first line containing the header\n# Then we execute the docker tag command, prefixing each image with the $REMOTE_REPO_PREFIX\ndocker images dx/* | tail -n +2 | awk -F ' ' '{system(\"docker tag \" $1 \":\" $2 \" $REMOTE_REPO_PREFIX/\" $1 \":\" $2) }'\n</code></pre> <p>The output may be verified by using the following command:</p> <pre><code># List all images\ndocker images\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/get_the_code/prepare_load_images/#push-to-repository","title":"Push to repository","text":"<p>You may use the following command to push the container images to your repository:</p> <pre><code># Push the new tagged images\n# docker push NEW_IMAGE_TAG:VERSION\n# Example command for WebEngine:\ndocker push my/test/repository/dx/web-engine:v95_CF224_20241216-1708\n</code></pre> <p>If you want to push all your locally processed images, use the following command:</p> <pre><code># Command to push all HCL Digital Experience Compose images to a remote repository\n# export the prefix for the repository structure, without tailing slash\nexport REMOTE_REPO_PREFIX=\"my/test/repository\"\n\n# Push the images, first we filter for the ones necessary\n# Second we execute a docker push for each image\ndocker images $REMOTE_REPO_PREFIX/dx/* | awk -F ' ' '{system(\"docker push \" $1 \":\" $2)}'\n</code></pre> <p>After running this command, Docker goes ahead and pushes the images to your remote repository. After the push, the container images are now ready for use by your Kubernetes cluster.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/get_the_code/prepare_load_images/#adjust-deployment-configuration","title":"Adjust deployment configuration","text":"<p>After you have successfully prepared all DX Compose 9.5 images, you need to configure the images inside your\u00a0custom-values.yaml.</p> <p>The following syntax may be used to define the correct image configuration for your environment:</p> <p>Note</p> <p>The image name and tag configuration of the Helm Chart is pre-filled using the default image names and matching version tags for the respective version of DX Compose. You might need to re-adjust these if you have renamed/re-tagged the images in your local container image repository.</p> <pre><code># Fill in the values fitting to your configuration\n# Ensure to use the correct image version tags\nimages:\n    repository: \"my/test/repository\"\n    # Image tag for each application\n    tags:\n    contentComposer: \"v95_CFXXX_XXXXXXXX-XXXX\"\n    webEngine: \"v95_CFXXX_XXXXXXXX-XXXX\"\n    digitalAssetManagement: \"vX.X.X_XXXXXXXX-XXXX\"\n    imageProcessor: \"vX.X.X_XXXXXXXX-XXXX\"\n    openLdap: \"vX.X.X_XXXXXXXX-XXXX\"\n    persistence: \"vX.X.X_XXXXXXXX-XXXX\"\n    ringApi: \"vX.X.X_XXXXXXXX-XXXX\"\n    runtimeController: \"vX.X.X_XXXXXXXX-XXXX\"\n    # Image name for each application\n    names:\n    contentComposer: \"dx/content-composer\"\n    webEngine: \"dx/web-engine\"\n    digitalAssetManagement: \"dx/digital-asset-manager\"\n    imageProcessor: \"dx/image-processor\"\n    openLdap: \"dx/openldap\"\n    persistence: \"dx/postgres\"\n    ringApi: \"dx/ringapi\"\n    runtimeController: \"dx/runtime-controller\"\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/get_the_code/prepare_load_images/#additional-tasks","title":"Additional Tasks","text":"<p>If your remote repository requires access credentials, it is necessary to configure an <code>ImagePullSecret</code> to allow your cluster nodes to have proper access to the HCL DX Compose 9.5 container images. </p> <p>Please refer to\u00a0Using ImagePullSecrets topic\u00a0for instructions on how to configure this.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_configuration/","title":"Prepare Configuration","text":"<p>Create a configuration file that fits the needs of your target HCL DX Compose 9.5 deployment. The configuration file is the heart of your deployment using Helm. It defines how HCL Digital Experience Compose 9.5 is deployed to supported platforms, and how it behaves during runtime operations. This section explains how to create your own configuration file and how to leverage the existing <code>values.yaml</code> inside the Helm Chart. It also explains how to optionally overwrite settings in case the default set may not be sufficient.</p> <p>Warning</p> <p>Modification to any files (chart.yaml, templates, crds) in hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz except custom-values.yaml or values.yaml is not supported.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_configuration/#the-configuration-flow","title":"The configuration flow","text":"<p>Helm provides multiple ways to define values that can be processed to run an installation. Processing involves a three-step approach, that is ordered sequentially within a hierarchy.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_configuration/#helm-chart-valuesyaml","title":"Helm Chart <code>values.yaml</code>","text":"<p>Every Helm Chart contains a <code>values.yaml</code> file. It defines all configurable parameters that a Helm Chart accepts and the default values that are used during an installation. If you do not provide any other configuration during an installation, Helm extracts all deployment information from the <code>values.yaml</code> file inside the Helm Chart.</p> <p>All parameters that were not overwritten using any other configuration methods return to their default values from the <code>values.yaml</code> file inside the Helm Chart.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_configuration/#custom-value-files","title":"Custom value files","text":"<p>Helm provides you with a way to maintain your own custom values files. You can specify a custom values file you want to use when running an installation.</p> <p>This custom values file only needs to contain the parameters that you want to overwrite with your preferred settings.</p> <p>Note</p> <p>There is no need to have the same complete set of parameters inside your custom values file, as there are available by default in the Helm Chart <code>values.yaml</code>. As outlined previously in this section, everything that is not defined in your custom values file are applied using the defaults from <code>values.yaml</code> inside the Helm Charts.</p> <p>Please be aware that the parameters you can configure using your custom values file need to exactly align with those provided by the Helm Charts own values.yaml. You cannot configure anything that is not exposed in the values.yaml definition.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_configuration/#override-parameters","title":"Override parameters","text":"<p>It is possible to define values using a --set parameter in the Helm CLI during the installation of a Helm Chart.</p> <p>Since there are many values that can be configured in the HCL Digital Experience deployment, we do not recommend this technique, since it makes installation commands very large and confusing.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_configuration/#the-default-hcl-dx-compose-95-valuesyaml-file","title":"The default HCL DX Compose 9.5 <code>values.yaml</code> file","text":"<p>HCL DX Compose 9.5 Helm Chart provides a default values.yaml, which contains all possible configuration parameters.</p> <p>To access this file, you may use the following command when you have the HCL DX Compose 9.5 Helm Chart tar.gz file on hand:</p> <pre><code># Command to extract values.ymal from Helm Chart\nhelm show values hcl-dx-deployment.tar.gz &gt; values.yaml\n</code></pre> <p>The file contains all configurable parameters and their default values. You may use this file as a blueprint to create your own <code>custom-values.yaml</code>. You may also just rename the extracted <code>values.yaml</code> to <code>custom-values.yaml</code>.</p> <p>Note</p> <p>Having a complete copy of the default <code>values.yaml</code> is not necessary and may bloat your configuration file with values that are already present in the DX Compose Helm Chart. A good practice is to focus your <code>values.yaml</code> file on only those parameters that you want to configure yourself.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_configuration/#a-custom-configuration-file","title":"A custom configuration file","text":"<p>Helm allows you to provide a custom configuration file during the installation or upgrade process.</p> <p>That file only overwrites settings that are defined within it. For parts of the configuration that are not defined in your custom configuration file, Helm returns to the default values in the <code>values.yaml</code> file inside the DX Compose Helm Chart.</p> <p>This allows you to create a file that only overwrites settings that are required, keeping the overall size of your configuration file small and the maintainability high.</p> <p>This Help Center documentation refers to the custom configuration file as <code>custom-values.yaml</code>. You may name your custom configuration file as preferred.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_configure_networking/","title":"Configure Networking","text":"<p>This section explains what must be configured from a networking perspective to get HCL Digital Experience Compose 9.5 running in your Kubernetes or OpenShift cluster, and to provide accessibility to your deployment from outside the Cluster.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_configure_networking/#full-kubernetes-or-openshift-deployment","title":"Full Kubernetes or OpenShift deployment","text":"<p>If you deploy WebEngine and all other applications inside OpenShift or Kubernetes, this section shows you what needs to be configured.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_configure_networking/#webengine-host","title":"WebEngine host","text":"<p>In a full deployment, the host for both the WebEngine and the other applications are the same.</p> <p>It is recommended to configure the host before you run the deployment. This is only possible if you know the fully qualified domain name (FQDN) or the IP address that the HAProxy assigns in your deployment beforehand.</p> <p>If that is the case, define the host using the following syntax:</p> <pre><code># Networking specific configuration\nnetworking:\n  # Networking configuration specific to WebEngine\n  webEngine:\n    # Host of webEngine, must be specified as a FQDN\n    host: \"your-dx-instance.whateverdomain.com\"\n</code></pre> <p>If you do not know the hostname beforehand, you can leave it blank and run an additional step later in the installation, which would retrieve the assigned hostname from HAProxy and configure all applications accordingly.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_configure_networking/#configure-cross-origin-resource-sharing-cors","title":"Configure Cross Origin Resource Sharing (CORS)","text":"<p>The HCL Digital Experience Compose 9.5 Helm Chart allows you to configure CORS configuration for all the <code>addon</code> to WebEngine applications such as Digital Asset Management or Ring API. This allows you to access the APIs provided by those applications in other applications with ease.</p> <p>You can define a list of allowed hosts for a specific application using the following syntax in your <code>custom-values.yaml</code>:</p> <pre><code># Networking specific configuration\nnetworking:\n  # Networking configurations specific to all addon applications\n  addon:\n    contentComposer:\n      # CORS Origin configuration for Content Composer, array of elements\n      corsOrigin: \n      - \"https://my-different-application.net\"\n      - \"https://the-other-application.com\"\n</code></pre> <p>Refer to the HCL DX Compose 9.5 <code>values.yaml</code> detail for all possible applications that can be configured.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_configure_networking/#configure-haproxy-certificate","title":"Configure HAProxy certificate","text":"<p>For HAProxy to allow forward requests to your applications, you must provide it with a TLS Certificate. This certificate is used for incoming/outgoing traffic from the outside of the Kubernetes or OpenShift cluster to your applications. HAProxy performs TLS offloading.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_configure_networking/#configure-haproxy-networking","title":"Configure HAProxy networking","text":"<p>HAProxy is deployed with a <code>LoadBalancer</code> type service to handle the incoming traffic as well as the SSL offloading for HCL Digital Experience. In addition, the Helm deployment offers adjustability for HAProxy and its services to allow for more flexible deployment and use of custom <code>Ingress Controllers</code>.</p> Parameter Description Type Default value <code>ssl</code> Enable or disable SSL offloading in HAProxy. Depending on this setting, HAProxy handles either <code>HTTP</code> or <code>HTTPS</code> traffic. Boolean <code>true</code> <code>serviceType</code> Defines the Kubernetes <code>ServiceType</code> of the HAProxy service. Supported ServiceType includes <code>LoadBalancer</code>, <code>ClusterIP</code> and <code>NodePort</code> <code>LoadBalancer</code> | <code>ClusterIP</code> | <code>NodePort</code> <code>LoadBalancer</code> <code>servicePort</code> This value is used to select the port exposed by the HAProxy service. Defaults to port <code>443</code> if <code>ssl</code> is set to <code>true</code>, otherwise, port <code>80</code> is used. Number <code>null</code> <code>serviceNodePort</code> This value is used to select the node port exposed by the HAProxy service. Defaults to a port selected by Kubernetes if no value is set. Number <code>null</code> <code>strictTransportSecurity.enabled</code> This value is used for HTTP Strict Transport Security (HSTS) to determine if it should be <code>enabled</code>. When enabled, this value requires SSL in DX or any proxy in front of the SSL. Boolean <code>true</code> <code>strictTransportSecurity.maxAge</code> This value is used to set for how long the browser should remember the HSTS rule Number <code>31536000</code> <code>strictTransportSecurity.includeSubDomains</code> If this optional parameter is specified, this rule applies to all of the site's subdomains as well. Boolean <code>false</code> <code>strictTransportSecurity.preload</code> See Preloading Strict Transport Security for details. When using preload, the max-age directive must be at least 31536000 (1 year), and the includeSubDomains directive must be present. This parameter is not part of the HSTS specification. For more information, see Strict-Transport-Security HTTP Response Header Field. Boolean <code>false</code> <code>sessionCookieName</code> This parameter does not directly change the cookie name. Instead, you must set this value if the cookie name is changed in the console. String <code>JSESSIONID</code> <p>Note</p> <p>If <code>ssl</code> is set to <code>true</code>, HAProxy will use the certificate that is supplied as a secret in <code>networking.tlsCertSecret</code>.</p> <pre><code>networking:\n  # Networking configurations specific to HAProxy\n  haproxy:\n    # Configuration to enable/disable ssl offloading in HAProxy\n    ssl: true\n    # Configuration to set the service type for the HAProxy service. Supported values are \"ClusterIP\", \"LoadBalancer\", and \"NodePort\"\n    serviceType: \"LoadBalancer\"\n    # Configuration to set the port exposed by the HAProxy Service. If the port is not set, then port 80 is used if SSL offloading is disabled, and port 443 if SSL offloading is enabled.\n    servicePort:\n    # Only applies for the \"NodePort\" serviceType. Configuration to set the NodePort exposed by the HAProxy service. If this is not set, a port is automatically selected by Kubernetes\n    serviceNodePort:\n    # HTTP Strict Transport Security(HSTS)\n    strictTransportSecurity:\n      enabled: true\n      maxAge: 31536000\n      includeSubDomains: false\n      preload: false\n    # Set cookie value for session affinity in HAProxy configuration for DX applications that require session affinity (e.g. HAProxy)\n    sessionCookieName: \"JSESSIONID\"\n</code></pre> <p>This configuration is helpful for those who want to use a custom <code>Ingress Controller</code> to expose the service in a compatible way. Even then, HAProxy will still be active. The <code>Ingress Controller</code> will handle the incoming traffic and then route them to the HAProxy service.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_configure_networking/#using-annotations-to-control-the-haproxy-service-behavior-for-different-cloud-providers","title":"Using annotations to control the HAProxy service behavior for different cloud providers","text":"<p>The Helm chart allows you to add annotations to the HAProxy service to control the behavior of the service for different cloud providers. You can use this to configure the service to use a specific type of load balancer or to configure other settings specific to the cloud provider. You can add annotations in your <code>custom-values.yaml</code> as described in the Annotations documentation.</p> <p>Examples for such annotations are in an non-exhaustive list. Refer to the documentation provided by your cloud provider for more information:</p> <ul> <li>Amazon Elastic Kubernetes Service - Use Service Annotations to configure Network Load Balancers</li> <li>Google Kubernetes Engine - LoadBalancer Service parameters</li> <li>Azure Kubernetes Service - LoadBalancer annotations</li> </ul>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_configure_networking/#generate-self-signed-certificate","title":"Generate self-signed certificate","text":"<p>It is recommended that you use a properly signed certificate for HAProxy. However, it is also possible to create and use a self-signed certificate, for example, for staging or testing environment.</p> <p>Creation of that certificate can be achieved using the following commands for OpenSSL:</p> <pre><code># Creation of a private key\nopenssl genrsa -out my-key.pem 2048\n\n# Creation of a certificate signed by the private key created before\nopenssl req -x509 -key my-key.pem -out my-cert.pem -days 365 -subj '/CN=my-cert'\n</code></pre> <p>This provides you with a key and cert file that can be used in the next step, creation of the certificate to your deployment.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_configure_networking/#use-certificate","title":"Use certificate","text":"<p>Create secret</p> <p>To have your deployment and HAProxy to use the certificate, you must store it in the Kubernetes or OpenShift cluster as a secret.</p> <p>The secret can be created using the following commands:</p> <p>Note</p> <p>The secret name can be chosen by you and must be referenced in the next configuration step (the following example uses <code>dx-tls-cert</code>). The namespace is the Kubernetes namespace where you want to deploy HCL Digital Experience Compose 9.5 to (the example uses <code>digital-experience-compose</code>).</p> <pre><code># Create secret with the name \"dx-tls-cert\"\n# Secret will be created in the namespace \"digital-experience-compose\"\n# You can either reference the cert and key file created before, or a proper signed certificate e.g. from your CA\nkubectl create secret tls dx-tls-cert --cert=my-cert.pem --key=my-key.pem -n digital-experience-compose\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_configure_networking/#configure-secret-in-deployment","title":"Configure secret in deployment","text":"<p>You need to make sure that the reference to the secret is set up correctly in your <code>custom-values.yaml</code>. Otherwise, HAProxy cannot answer HTTPS requests due to a missing certificate.</p> <p>You can set the name of the certificate used with the following syntax, the default value is <code>dx-tls-cert</code>:</p> <pre><code># Networking specific configuration\nnetworking:\n  # TLS Certificate secret used for haproxy\n  tlsCertSecret: \"dx-tls-cert\"\n</code></pre> <p>Note</p> <p>Verify you have entered the correct name.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_configure_networking/#openshift-passthrough","title":"OpenShift Passthrough","text":"<p>A <code>Route</code> resource must be created manually when required as part of a deployment to OpenShift.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_configure_networking/#create-the-route-resource-manually","title":"Create the route resource manually","text":"<p>If you want to deploy OpenShift manually using <code>Routes</code>, you need to create a <code>.yaml</code> file like below and any changes required can be made in that. To apply those changes in the OpenShift cluster, you can run <code>kubectl apply</code> and specify its namespace and location. For more information, refer to the OpenShift Route Configuration documentation.</p> <p>In some versions of OpenShift, by default, sticky sessions for passthrough <code>Routes</code> are enabled in OpenShift using the source (IP) as identifier. To make sure traffic gets forwarded to all DX Compose HAProxy Pods even when another proxy is used in front of it, the <code>Route</code> should be annotated as shown in the example below. Refer to the OpenShift documentation to select the appropriate value for your deployment. </p> <pre><code>apiVersion: \"route.openshift.io/v1\"\nkind: \"Route\"\nmetadata:\n  annotations:\n    # By default, OpenShift applies load balancing and sticky sessions are routed to the same Pod depending on the source IP.\n    # This should be disabled to leverage all DX Compose HAProxy Pods when another proxy is used in front of DX Compose.\n    haproxy.router.openshift.io/balance: roundrobin\n  name: \"&lt;helm-deployment-name&gt;-passthrough\"\nspec:\n  port:\n    targetPort: \"haproxy\"\n  tls:\n    insecureEdgeTerminationPolicy: \"Redirect\"\n    termination: \"passthrough\"\n  to:\n    kind: \"Service\"\n    name: \"&lt;helm-deployment-name&gt;-haproxy\"\n    weight: 100\n  wildcardPolicy: \"None\"\n</code></pre> <p><code>&lt;helm-deployment-name&gt;</code> must be replaced with the name of the deployed Helm release.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_configure_networking/#configuring-content-security-policy-frame-options","title":"Configuring Content-Security-Policy Frame Options","text":"<p>The HCL Digital Experience Compose 9.5 Helm Chart allows you to configure Content Security Policy: frame-ancestors for DX WebEngine and all other components, such as Digital Asset Management, Ring API, etc.</p> <p>Setting <code>cspFrameAncestorsEnabled</code> to true adds <code>content-security-policy: frame-ancestor 'self'</code> headers to the responses, enabling you to frame DX and other add-on applications.</p> <p>There is also an option to specify allowed URLs that can frame your application using the <code>cspFrameAncestorAllowedSourceURLs</code> property. Using this property is a way to mitigate clickjacking attacks. For more information, see: Clickjacking Defense Cheat Sheet.</p> <p>You can define a list of allowed URLs for a specific application using the following syntax in your <code>custom-values.yaml</code>. This example uses <code>contentComposer</code>, but the same applies for other applications:</p> <pre><code># Networking specific configuration\nnetworking:\n  # Networking configurations specific to all addon applications\n  addon:\n    contentComposer:\n      # Enables/Disables CSP frame-ancestor header\n      # Note: 'self' is always added when this is enabled to enable DX Compose internal features\n      # see: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors\n      cspFrameAncestorsEnabled: false\n      # Add list of allowed source URLS to the the CSP frame-ancestor header this will only reflect if cspFrameAncestorsEnabled is set to true\n      # Example:\n      # cspFrameAncestorsAllowedSourceURLs:\n      #   - 'https://example.com'\n      # This would result to the following response header:\n      # content-security-policy: frame-ancestors 'self' https://example.com\n      cspFrameAncestorsAllowedSourceURLs: []        \n</code></pre> <p>Refer to the HCL DX Compose 9.5 <code>values.yaml</code> detail for all possible applications that can be configured.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_configure_networking/#configuring-samesite-cookie-attribute","title":"Configuring SameSite Cookie Attribute","text":"<p>The HCL Digital Experience Compose 9.5 Helm Chart allows you to configure SameSite Cookie Attribute for DX WebEngine. This configuration sets the <code>WASReqURL</code> Cookie Attributes <code>Secure</code> and <code>SameSite</code>.</p> <p>Note</p> <p>This should only be set in an HTTPS environment to prevent unwanted behaviors.</p> <p>You can define the SameSite value in your <code>custom-values.yaml</code>:</p> <pre><code># Networking specific configuration\nnetworking:\n  webEngine:\n    # None, Lax, Strict, or empty string\n    # Setting this to an empty string would not add the SameSite attribute for WASReqURL cookie\n    # Note: This should only be set in an HTTPS environment to prevent unwanted behaviours\n    cookieSameSiteAttribute: \"\"\n</code></pre> <p>Refer to the HCL DX Compose 9.5 <code>values.yaml</code> detail for all possible applications that can be configured.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_ingress_certificate/","title":"Configure HAProxy Certificate","text":"<p>To have the HAProxy allow forward requests to your applications, you must provide it with a TLS Certificate. This certificate is used for incoming/outgoing traffic from the outside of the Kubernetes or OpenShift cluster to your applications. HAProxy performs TLS offloading.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_ingress_certificate/#generate-self-signed-certificate","title":"Generate self-signed certificate","text":"<p>It is recommended that you use a properly signed certificate for HAProxy. However, it is also possible to create and use a self-signed certificate, for example, for staging or testing environment.</p> <p>Creation of that certificate can be achieved using the following commands for OpenSSL:</p> <pre><code># Creation of a private key and associated certificate\nopenssl req -x509 -newkey rsa:2048 -keyout my-key.pem -out my-cert.pem -days 365 -subj \"/CN=my-cert\" -nodes\n</code></pre> <p>This provides you with a key and cert file that can be used in the next step, creation of the certificate to your deployment.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_ingress_certificate/#use-certificate","title":"Use certificate","text":"<p>Create secret</p> <p>To have your deployment and HAProxy to use the certificate, you must store it in the Kubernetes or OpenShift cluster as a secret.</p> <p>The secret can be created using the following commands:</p> <p>Note</p> <p>The secret name can be chosen by you and must be referenced in the next configuration step (the following example uses <code>dx-tls-cert</code>). The namespace is the Kubernetes namespace where you want to deploy HCL Digital Experience Compose 9.5 to (the example uses <code>digital-experience-compose</code>).</p> <pre><code># Create secret with the name \"dx-tls-cert\"\n# Secret will be created in the namespace \"digital-experience-compose\"\n# You can either reference the cert and key file created before, or a proper signed certificate e.g. from your CA\nkubectl create secret tls dx-tls-cert --cert=my-cert.pem --key=my-key.pem -n digital-experience-compose\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_ingress_certificate/#configure-secret-in-deployment","title":"Configure secret in deployment","text":"<p>You need to make sure that the reference to the secret is set up correctly in your <code>custom-values.yaml</code> file. Otherwise, HAProxy cannot answer HTTPS requests due to a missing certificate.</p> <p>You can set the name of the certificate used with the following syntax, the default value is <code>dx-tls-cert</code>:</p> <pre><code># Networking specific configuration\nnetworking:\n # TLS Certificate secret used for HAProxy\n tlsCertSecret: \"dx-tls-cert\"\n</code></pre> <p>Note</p> <p>Verify you have entered the correct name.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_namespace/","title":"Prepare a Namespace","text":"<p>You need to create a namespace in your Kubernetes cluster that contains all the resources related to your HCL DX Compose 9.5 deployment. It is recommended that the namespace is created before the deployment because you may need to add an ImagePullSecret or configure the TLS certificate for HAProxy before deployment.</p> <p>Identify a name for your namespace and create it using the following syntax:</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_namespace/#on-kubernetes-platforms","title":"On Kubernetes platforms","text":"<p>Kubectl</p> <pre><code># Command to create a namespace using kubectl\n# This example creates a namespace called \"my-namespace\"\nkubectl create ns my-namespace\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_namespace/#openshift","title":"OpenShift","text":"<p>For OpenShift, you must create a namespace with specific settings.</p> <p>Use the following namespace definition and save it as namespace.yaml. You must replace <code>my-namespace</code> in the template with the name of the namespace you are using.</p> <pre><code>apiVersion: v1\nkind: Namespace\nmetadata:\n  name: my-namespace\n  annotations:\n    openshift.io/sa.scc.mcs: \"s0:c24,c4\"\n    openshift.io/sa.scc.supplemental-groups: \"1001/10000\"\n    openshift.io/sa.scc.uid-range: \"1000/10000\"\n</code></pre> <p>OpenShift client</p> <pre><code># Command to create namespace from template file\noc apply -f namespace.yaml\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_persistent_volume_claims/","title":"PersistentVolumeClaims","text":"<p>To run HCL Digital Experience Compose 9.5 Container deployments in your Kubernetes or OpenShift cluster, you need to set up PersistentVolumes (PVs) on your cluster and configure the Helm Chart to create the appropriate PersistentVolumeClaims (PVCs).</p> <p>Before you proceed, review the Persistent Volumes and related operations considerations topic in the DX Help Center.</p> <p>Note</p> <p>The provisioning of PersistentVolumes (PVs) may differ based on your cluster configuration and your cloud provider. Please reference the documentation of your cloud provider for additional information.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_persistent_volume_claims/#persistent-volume-types","title":"Persistent Volume Types","text":"<p>Important</p> <p>Ensure that your PersistentVolumes (PVs) are created with the Reclaim Policy set to\u00a0RETAIN. This allows for the reuse of PVs after a PersistentVolumeClaim (PVC) is deleted. This is important to keep data persisted, for example, between deployments or tests. Refrain from using the Reclaim Policy DELETE unless you have the experience in managing these operations successfully, to avoid unpredictable results. This is not recommended in production use, as deleting PVCs causes the Kubernetes or OpenShift cluster to delete the bound PV as well, thus, deleting all the data on it.</p> <ul> <li> <p><code>ReadWriteOnce</code> (RWO)</p> <p><code>ReadWriteOnce</code> PVs allow only one pod per volume to perform reading and writing transactions. This means that the data on that PV cannot be shared with other pods and is linked to one pod at a time.</p> <p>In the HCL Digital Experience Compose 9.5 Kubernetes or OpenShift deployment using Helm, the only DX applications leveraging RWO PVs are WebEngine and Persistence.</p> </li> </ul> <pre><code>Since the number of pods for Persistence is limited by design, you need 2 RWO PVs for Persistence.\n</code></pre> <ul> <li> <p><code>ReadWriteMany</code> (RWX)</p> <p><code>ReadWriteMany</code> PVs support read and write operations by multiple pods. This means the data on that PV can be shared with other pods and can be linked to multiple pods at a time.</p> <p>In the HCL Digital Experience Compose 9.5 Kubernetes and OpenShift deployment using Helm the only DX Compose application leveraging RWX PVs is Digital Asset Management.</p> <p>Since the PV can be shared between all Digital Asset Management pods, you need one (1) RWX PV for Digital Asset Management, regardless of the pod count.</p> </li> </ul>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_persistent_volume_claims/#configuration-parameters","title":"Configuration parameters","text":"<p>To access the PersistentVolumes (PVs) on your cluster, the HCL Digital Experience Compose 9.5 Kubernetes or OpenShift deployment using Helm creates PersistentVolumeClaims (PVCs) that binds the PVs to the corresponding pods.</p> <p>Each PVC that applications require allows you to configure the following parameters, as shown below. For a PVC of the WebEngine application:</p> <pre><code># Persistent Volume Setup\nvolumes:\n  # Persistent Volumes for webEngine\n  webEngine:\n    # Customization PVC one per webEngine pod - RWO\n    customization:\n      storageClassName: \"manual\"\n      requests:\n        storage: \"500Mi\"\n    # Optional label selector to further filter the set of volumes. Only the volumes whose labels match the selector can be bound to the claim.\n      selector:\n      # Optional volume name to specifically map to\n      volumeName:\n</code></pre> <p>Important</p> <p>Make sure to properly define the PVC configuration in your\u00a0custom-values.yaml file before running the deployment. This avoids issues when trying to get your deployment up and running.</p> <ul> <li> <p><code>StorageClassName</code></p> <p>Depending on your Cluster configuration, you may have configured a specific <code>StorageClass</code> that should be used for your PVs and the PVCs of HCL Digital Experience Compose.</p> <p>This property allows you to enter the name of the <code>StorageClass</code> you want the deployment to use. PVCs then only accepts PVs that match the <code>StorageClassName</code> you have defined in the configuration. If there are no PVs that match, the pods remain pending and do not start until a fitting PV is provided by the cluster.</p> <p>If you enter an empty <code>StorageClassName</code>, Kubernetes falls back to the default <code>StorageClass</code> configured in your Cluster. Refer to your cloud provider for additional information about your default StorageClass, since this depends on your Kubernetes or OpenShift environment.</p> <p>Reference the original\u00a0values.yaml\u00a0file you have extracted as outlined in the Prepare configuration topic\u00a0for all configurable PVCs.</p> </li> <li> <p><code>Requests</code></p> <p>Storage</p> <p>Storage allows you to define the amount of space that is required by the PVC. Once defined, it only accepts PVs that have the same or more storage capacity as requested. If there are no PVs matching the definitions, the pods remain pending and do not start until a properly-sized PV is provided by the cluster.</p> </li> <li> <p><code>Selector</code></p> <p>If you want your deployment to pick up specific PVs that you have created, the <code>selector</code> option can be used to match PVs by their labels.</p> <p>A detailed description on how to use the <code>selector</code> can be found in the official <code>Kubernetes</code> documentation.</p> <p>A PVC will only match with a PV satisfying the selector and all the other requirements such as type <code>RWO/RWX</code>, as defined by the deployment itself), storage capacity, and <code>StorageClassName</code>.</p> </li> <li> <p><code>VolumeName</code></p> <p>If you want your deployment to pick up a specific PV that you have created, use of the <code>VolumeName</code> can define that instruction. Ensure that the PV you created has a unique name. Then, add that name as a configuration parameter for the PVC.</p> <p>The PVCs only matches with a PV of that name, matching the other requirements-like type <code>RWO/RWX</code>, as defined by the deployment itself), storage capacity, and <code>StorageClassName</code>.</p> </li> </ul> <p>Important</p> <p>As a single persistent Volume is assigned using the <code>volumeName</code>, this should only be used for <code>RWX</code> claims or for Pods that are only ever scaled to one replica. If a second <code>PersistentVolumeClaim</code> is created with the same <code>volumeName</code>, it can never be fulfilled as the names for Volumes are unique. Please refer to the <code>Selector</code> section to select specific <code>PersistentVolumes</code> for multiple claims.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_persistent_volume_claims/#sample-pvc-configurations","title":"Sample PVC configurations","text":"<p>The following are some examples for configuration of the PersistentVolumeClaims (PVCs) using your\u00a0custom-values.yaml:</p> <p>Fallback to default <code>StorageClass</code> for all applications</p> <p>Leaving an empty <code>StorageClassName</code> causes Kubernetes or OpenShift to fall back to the <code>StorageClass</code> that has been configured as the default one in your cluster:</p> <pre><code># Persistent Volume Setup\nvolumes:\n  # Persistent Volumes for webEngine\n  webEngine:\n    # Customization PVC one per webEngine pod - RWO\n    customization:\n      storageClassName: \"\"\n      requests:\n        storage: \"\"\n      # Optional label selector to further filter the set of volumes. Only the volumes whose labels match the selector can be bound to the claim.\n      selector:\n      # Optional volume name to specifically map to\n      volumeName:\n  # Persistent Volumes for Digital Asset Management\n  digitalAssetManagement:\n    # Binary storage PVC, shared by all Digital Asset Management Pods\n    binaries:\n      storageClassName: \"\"\n  # Persistent Volumes for Persistence\n  persistence:\n    # Database PVC, one per Persistence pod\n    database:\n      storageClassName: \"\"\n  # Persistent Volumes for Open LDAP\n  openLdap:\n    # slapd directory PVC, one per Open LDAP pod\n    slapd:\n      storageClassName: \"\"\n    # certificate directory, on per Open LDAP pod\n    certificate:\n      storageClassName: \"\"\n    # ldap directory PVC, one per Open LDAP pod\n    ldap:\n      storageClassName: \"\"\n</code></pre> <p>Specific StorageClasses for all applications</p> <p>Setting the <code>StorageClassName</code> to\u00a0<code>mycloudstorage</code> causes Kubernetes or OpenShift to create PVCs that only accepts PVs with the <code>StorageClass</code> <code>mycloudstorage</code>:</p> <pre><code># Persistent Volume Setup\nvolumes:\n  # Persistent Volumes for webEngine\n  webEngine:\n    # Customization PVC one per webEngine pod - RWO\n    customization:\n      storageClassName: \"mycloudstorage\"\n    # Application Log PVC, one per webEngine pod - RWO\n    log:\n      storageClassName: \"mycloudstorage\"\n  # Persistent Volumes for Digital Asset Management\n  digitalAssetManagement:\n    # Binary storage PVC, shared by all Digital Asset Management Pods\n    binaries:\n      storageClassName: \"mycloudstorage\"\n  # Persistent Volumes for Persistence\n  persistence:\n    # Database PVC, one per Persistence pod\n    database:\n      storageClassName: \"mycloudstorage\"\n  # Persistent Volumes for Open LDAP\n  openLdap:\n    # slapd directory PVC, one per Open LDAP pod\n    slapd:\n      storageClassName: \"mycloudstorage\"\n    # certificate directory, on per Open LDAP pod\n    certificate:\n      storageClassName: \"mycloudstorage\"\n    # ldap directory PVC, one per Open LDAP pod\n    ldap:\n      storageClassName: \"mycloudstorage\"\n</code></pre> <p>Specific volumes using selectors and labels</p> <p>In the custom-values.yaml file, set the selectors for a specific application. In this example, the <code>persistenceNode</code> is used.</p> <pre><code>volumes:\n  # Persistent Volumes for Persistence Node\n  persistenceNode:\n    # Database PVC, one per persistence node\n    database:\n      # Optional label selector to further filter the set of volumes. Only the volumes whose labels match the selector can be bound to the claim.\n      selector:\n        matchLabels:\n          myVolumeLabel: persistence-node\n</code></pre> <p>By default, 3 replicas of <code>persistenceNode</code> are created. To make sure all <code>PersistenceVolumeClaims</code> are satisfied, we need to create at least 3 <code>PersistentVolumes</code> with matching labels.</p> <p>Each <code>PersistentVolume</code> should look similar to the following example:</p> <pre><code>apiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: persistence-node-volume-0\n  labels:\n    myVolumeLabel: persistence-node\nspec:\n  capacity:\n    storage: 100Gi\n  volumeMode: Filesystem\n  accessModes:\n    - ReadWriteOnce\n  persistentVolumeReclaimPolicy: Recycle\n  storageClassName: mycloudstorage\n</code></pre> <p>This will make sure that one of the <code>persistenceNode</code> Pods will pick up the Volume. To ensure an exact 1 to 1 match between Volume and Claim, refer to the \"Reserving a PersistentVolume\" documentation for Kubernetes to set a <code>claimRef</code> in the <code>PersistentVolume</code> in addition to the selectors.</p> <pre><code>apiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: persistence-node-volume-0\n  labels:\n    myVolumeLabel: persistence-node\nspec:\n  capacity:\n    storage: 100Gi\n  volumeMode: Filesystem\n  accessModes:\n    - ReadWriteOnce\n  persistentVolumeReclaimPolicy: Recycle\n  storageClassName: mycloudstorage\n  claimRef:\n    name: database-dx-deployment-persistence-node-0\n    namespace: myDXNamespace\n</code></pre> <p>This will ensure that only the <code>dx-deployment-persistence-node-0</code> Pod and none of the other replicas will use this <code>PersistentVolume</code>.</p> <p>Specific volume names</p> <p>Specifying a name ensures that Kubernetes or OpenShift only assigns PVs with the matching name to the PVCs created for the applications:</p> <pre><code># Persistent Volume Setup\nvolumes:\n  # Persistent Volumes for webEngine\n  webEngine:\n    # Customization PVC one per webEngine pod - RWO\n    customization:\n      storageClassName: \"mycloudstorage\"\n      # Optional volume name to specifically map to\n      volumeName: \"web-engine-volume\"\n    # Application Log PVC, one per webEngine pod - RWO\n    log:\n      storageClassName: \"mycloudstorage\"\n      # Optional volume name to specifically map to\n      volumeName: \"web-engine-log\"\n</code></pre> <p>Adjusted volume size for WebEngine PVCs</p> <p>You may override the default sizes for PVCs by adjusting the storage requests:</p> <pre><code># Persistent Volume Setup\nvolumes:\n  # Persistent Volumes for webEngine\n  webEngine:\n    # Customization PVC one per webEngine pod - RWO\n    customization:\n      storageClassName: \"mycloudstorage\"\n      requests:\n        storage: \"100G\"\n    log:\n      storageClassName: \"mycloudstorage\"\n      requests:\n        storage: \"20G\"\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_persistent_volume_claims/#sample-persistent-volume-definitions","title":"Sample Persistent Volume definitions","text":"<p>Sample <code>StorageClass</code></p> <p>It is recommended to have a separate <code>StorageClass</code> for HCL Digital Experience Compose 9.5 deployments in order to prevent other deployed applications in the same Kubernetes or OpenShift cluster to interfere with Persistent Volumes (PVs) that should only be used by HCL Digital Experience Compose.</p> <p>The following example shows a <code>StorageClass</code> with the name\u00a0<code>dx-deploy-stg</code>\u00a0that can be created in your cluster for that purpose:</p> <pre><code>kind: StorageClass \napiVersion: storage.k8s.io/v1 \nmetadata: \n  name: dx-deploy-stg \nprovisioner: kubernetes.io/no-provisioner \nreclaimPolicy: Retain \nvolumeBindingMode: WaitForFirstConsumer \n</code></pre> <p>Applying this yaml on your Kubernetes or OpenShift cluster creates the <code>StorageClass</code> as a cluster-wide resource.</p> <p>Sample Persistent Volume</p> <p>To leverage the <code>StorageClass</code> you created, you can use the following Persistent Volume example, which connects to an NFS Server of your choice to provide a PV:</p> <pre><code>kind: PersistentVolume \napiVersion: v1\nmetadata:\n  name: web-engine-volume \nspec: \n  capacity: \n    storage: 100Gi\n  accessModes: \n  - ReadWriteOnce \n  persistentVolumeReclaimPolicy: Retain \n  storageClassName: dx-deploy-stg \n  volumeMode: Filesystem\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/prepare_persistent_volume_claims/#configuring-additional-webengine-persistent-volumes","title":"Configuring additional WebEngine persistent volumes","text":"<p>A HCL Digital Experience Compose Kubernetes deployment requires a number of persistent volumes as standard, such as for the WebEngine logs and customizations and for digital asset storage. It is now also possible to connect additional persistent volumes to the DX WebEngine stateful set and mount them in the main container of all WebEngine pods. It is anticipated that this optional feature will be of use to customers running custom applications on DX Compose that require additional persistent storage.</p> <p>This feature allows you to configure additional Persistent Volume Claims (PVCs) for the WebEngine stateful set and specify the directories at which they will be mounted in the main containers of all WebEngine pods. </p> <p>Important</p> <p>WebEngine pods will remain \"Pending\" until all the new claims have been satisfied. Please ensure that you have created the necessary Persistent Volumes in advance or have suitable provisioners in your Kubernetes cluster to create the volumes on demand.</p> <p>The following syntax can be used to configure additional Persistent Volume Claims (PVCs) in your <code>custom-values.yaml</code>:</p> <pre><code>volumes:\n  # Persistent Volumes for webEngine\n  webEngine:\n    # List of optional additional WebEngine PVCs one per webEngine pod - RWO for customer applications\n    # Each list element must include a unique \"name\", one or more \"accessModes\"\n    # Only supported option is ReadWriteOnce, a \"mountPath\" specifying where in the\n    # WebEngine container it should be mounted, a \"storageClassName\" and a size in \"requests/storage\".\n    # It may also optionally include a \"selector\" section to select specific PVs based on their labels.\n    # It may also optionally include a \"volumeName\" to select a specific PV.\n    # Example:\n    # customPVCs:\n    #   - name: \"test1\"\n    #     accessModes:\n    #       - \"ReadWriteOnce\"\n    #     mountPath: \"/opt/openliberty/test1\"\n    #     storageClassName: \"manual\"\n    #     requests:\n    #       storage: \"20Gi\"\n    #     selector:\n    #       matchLabels:\n    #         label: test\n    #       matchExpressions:\n    #         - key: name\n    #           operator: In\n    #           values:\n    #             - test1\n    #             - test2\n    #     volumeName: \"test-pv\"\n    customPVCs: []\n</code></pre> <p>Example</p> <p>The following example creates a new PVC called <code>&lt;deployment-name&gt;-web-engine-custom-test1</code> and mounts it in the main WebEngine pod containers at <code>/opt/openliberty/test1</code>. To be satisfied this claim requires a Persistent Volume with access mode <code>ReadWriteOnce</code>, storage class <code>manual</code> and at least 20Gb capacity. Since <code>volumeName</code> and <code>selector</code> are not specified, Kubernetes is free to choose any unbound volume that meets the above criteria.</p> <pre><code>volumes:\n  webEngine:\n    customPVCs:\n      - name: \"test1\"\n        accessModes:\n          - \"ReadWriteOnce\"\n        mountPath: \"/opt/openliberty/test1\"\n        storageClassName: \"manual\"\n        requests:\n          storage: \"20Gi\"\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/mandatory_tasks/probes_configuration/","title":"Probes Configuration in values.yaml file","text":"<p>The <code>liveness</code> and <code>readiness</code> probes such as the status thresholds and time values can be modified. The probe target values are not configurable because they are application specific and the values must not be changed.</p> <pre><code># Liveness probe using the applications HTTP probe endpoint \n    livenessProbe:\n      failureThreshold: 4\n      initialDelaySeconds: 30\n      periodSeconds: 30\n      successThreshold: 1\n      timeoutSeconds: 30\n# Readiness probe using the applications HTTP probe endpoint\n    readinessProbe:\n      failureThreshold: 2\n      initialDelaySeconds: 30\n      periodSeconds: 30\n      successThreshold: 1\n      timeoutSeconds: 30\n</code></pre> <p>Information about the configuration options can be found in the Kubernetes documentation.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_apps/","title":"Configure Applications","text":""},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_apps/#webengine","title":"WebEngine","text":""},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_apps/#supported-ldap-configuration","title":"Supported LDAP configuration","text":"<p>You can specify a LDAP configuration that can be used by HCL Digital Experience Compose 9.5.</p> <p>The Helm chart provides a <code>ldap</code> section under the <code>configuration</code> and <code>webengine</code> section. This section can be used to configure a <code>none</code>, <code>dx</code> or <code>other</code> LDAP. This defaults to none, so there is no LDAP configured.</p> <p>If you adjust this to <code>other</code>, you can configure an external LDAP that you want to connect to. WebEngine is then configured to use this LDAP.</p> <p>Currently, the configuration capability is quite limited.</p> <p>Example Configuration</p> <p>You can use the following syntax in your custom-values.yaml file to adjust LDAP settings:</p> <pre><code># Application configuration\nconfiguration:\n  # Application specific configuration for WebEngine\n  webEngine:\n    # Settings for LDAP configuration\n    ldap:\n      # Determines which type of LDAP to use\n      # Accepts: \"none\", \"dx\" or \"other\"\n      # \"none\" - no LDAP configuration\n      # \"dx\" - use DX openLDAP and configure it\n      # \"other\" - use provided configuration for other LDAP\n      type: \"none\"\n      # User used to connect to LDAP, only used if ldap type is \"other\"\n      bindUser: \"\"\n      # Password used to connect to LDAP, only used if ldap type is \"other\"\n      bindPassword: \"\"\n      # Suffix in LDAP, only used if ldap type is \"other\"\n      suffix: \"\"\n      # Host of LDAP, only used if ldap type is \"other\"\n      host: \"\"\n      # Port of LDAP, only used if ldap type is \"other\"\n      port: \n      # Supported LDAP Server types - CUSTOM\n      serverType: \"CUSTOM\"\n      # LDAP configuration id\n      id: \"dx_compose_ldap\"\n      # Mapping attributes between LDAP and DX Compose, LDAP attribute names (array of elements)\n      attributeMappingLdap: \n        - \"mail\"\n        - \"title\"\n        - \"userPassword\"\n      # Mapping attributes between LDAP and DX Compose, DX attribute names (array of elements)\n      attributeMappingPortal: \n        - \"ibm-primaryEmail\"\n        - \"ibm-jobTitle\"\n        - \"password\"\n      # Non-supported LDAP attributes (array of elements)\n      attributeNonSupported: \n        - \"certificate\"\n        - \"members\"\n</code></pre> <p>Refer to the following Help Center documentation for more information about LDAP configuration:</p> <ul> <li>Enable federated security</li> <li>Troubleshooting</li> </ul>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_apps/#authoringrendering-configuration","title":"Authoring/Rendering configuration","text":"<p>You can choose if the environment you deploy is configured as a WCM authoring or rendering type. This has implications on things like caching of WebEngine.</p> <p>As default, this defaults to true. The deployment is configured as an authoring environment.</p> <p>If you want to adjust this to deploy a rendering environment, you can use the following syntax in your custom-values.yaml file:</p> <pre><code># Application configuration\nconfiguration:\n  # Application specific configuration for WebEngine\n  webEngine:\n    # Settings for tuning\n    tuning:\n      # Configures if the environment should be configured for authoring or not\n      authoring: false\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_apps/#openldap-configuration","title":"OpenLDAP configuration","text":"<p>If you choose to deploy the OpenLDAP container in your deployment, you can change country, organization and suffix, that may be configured in OpenLDAP for use.</p> <p>Use the following syntax in your custom-values.yaml file to adjust the configuration:</p> <pre><code># Application configuration\nconfiguration:\n  # Application specific configuration for Open LDAP\n  openLdap:\n    # Country configuration for Open LDAP\n    country: \"US\"\n    # Org configuration for Open LDAP\n    org: \"DX\"\n    # Suffix configuration for Open LDAP\n    suffix: \"dc=dx,dc=com\"\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_credentials/","title":"Configure Credentials","text":"<p>HCL Digital Experience Compose 9.5 uses several credentials in its deployment to manage access between applications and from outside the container deployment.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_credentials/#randomized-passwords","title":"Randomized passwords","text":"<p>Upon initial deployment, passwords in HCL Digital Experience Compose 9.5 are randomized and stored in secrets. Retrieve the randomized credentials using the following commands:</p> <p>To get the credentials for HCL Digital Experience WebEngine administrative access, use: <pre><code>kubectl get secret &lt;release-name&gt;-web-engine-wps --namespace &lt;namespace&gt; -o=jsonpath=\"{.data.username}\" | base64 --decode &amp;&amp; echo\nkubectl get secret &lt;release-name&gt;-web-engine-wps --namespace &lt;namespace&gt; -o=jsonpath=\"{.data.password}\" | base64 --decode &amp;&amp; echo\n</code></pre></p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_credentials/#adjusting-default-credentials","title":"Adjusting default credentials","text":"<p>You can adjust the default credentials that HCL Digital Experience Compose 9.5 is using by adding the following syntax to your custom-values.yaml file and changing the values you need:</p> <pre><code># Security related configuration, e.g. default credentials\nsecurity:\n  # Security configuration for WebEngine\n  webEngine:\n    # Credentials used for HCL Digital Experience WebEngine administrative access.\n    # The credentials defined in these values define the HCL Digital Experience WebEngine administrative user. The user gets created if necessary and/or the password is set to the current value.\n    # Admin user for WebEngine, can not be adjusted currently.\n    webEngineUser: \"wpsadmin\"\n    webEnginePassword: \"\"\n\n  # Security configuration for Open LDAP\n  openLdap:\n    # Admin user for Open LDAP, can not be adjusted currently.\n    ldapUser: \"REDACTED\"\n    # Admin password for Open LDAP\n    ldapPassword: \"REDACTED\"\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_credentials/#updating-credentials","title":"Updating credentials","text":"<p>If the user credentials were changed manually and not through the Helm values, you must update the values for WebEngine credentials in Helm. Refer to Adjusting default credentials for reference. If you are using the custom secret, you must also set the credentials in the secret to the current credentials. Then, execute a <code>helm upgrade</code> with those values. You can use the Helm values to change the credentials.</p> <p>If an LDAP is configured as the user registry, you must manually set the security credentials to the credentials of the administrator user from LDAP. If the users are changed in the LDAP, you must manually update the security credentials in the Helm chart. The credentials are used in several startup and configuration scripts. Changes in the Helm values will not cause any changes to the LDAP users.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_credentials/#upgrading-credentials","title":"Upgrading credentials","text":"<p>Before upgrading, ensure that the current credentials are set properly in the Helm values.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_credentials/#webengine-security-credentials","title":"WebEngine security credentials","text":"<p>The security credentials defined in the <code>security</code> section of the Helm values are necessary to pass the user credentials to the HCL Digital Experience Compose startup scripts. The behavior slightly differs depending on the user registry that is configured for HCL Digital Experience Compose. See Registry Types.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_credentials/#registry-types","title":"Registry Types","text":""},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_credentials/#ldap","title":"LDAP","text":"<p>If LDAP is configured in the Helm values under <code>configuration.webEngine.ldap</code>, the webEngine security credentials need to be manually set to the credentials of the administrator user(s) from LDAP and kept up to date manually in the helm chart if the users are changed in the LDAP. The credentials are used in several startup and configuration scripts. Changes in the helm values will not cause any changes to the LDAP users.</p> <p>Please refer to the Updating the default administrator password topic for additional information on how to manually change credentials.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_credentials/#file-based-user-registry","title":"File-based user registry","text":"<p>If no LDAP is configured in the Helm values, HCL Digital Experience Compose is configured with a default file-based user repository. In this case, the security credentials for WebEngine that are specified in the <code>custom-values.yaml</code> are applied to the file-based registry. This means that any changes to the values are automatically reflected in the administrator user accounts for WebEngine and DX Compose.</p> Value Effect <code>security.webEngine.webEngineUser</code> Creates a user with this name if it does not exist already. Then makes that user the WebEngine primary admin user. <code>security.webEngine.webEnginePassword</code> Sets the password of the <code>webEngineUser</code> to this value."},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_credentials/#configuring-credentials-from-secrets","title":"Configuring Credentials from Secrets","text":"<p>You can also configure the credentials that HCL Digital Experience Compose 9.5 is using by creating a secret that contains the credentials and referencing them by adding the secret name to your <code>custom-values.yaml</code> file and doing a <code>helm upgrade</code> to apply it in the deployments:</p> <pre><code># Referencing the secret to configure credential, e.g. webEngine credentials\nsecurity:\n  # Security configuration for webEngine\n  webEngine:\n    # Provide a secret name that will be used to set credentials for WebEngine\n    # Required attributes:\n    #   - username\n    #   - password\n    customWebEngineSecret: \"\"\n</code></pre> <p>Important</p> <p>Only one method of configuring credentials can be applied at once. Either configure it by using secrets or using the credentials in the Helm <code>custom-values.yaml</code>, unused credential values should be explicitly set to empty/null.</p> <p>Important</p> <p>A Helm upgrade is required in order for the new credentials values to reflect inside the containers.</p> <p>Note</p> <p>The mechanism described above for file-based user registries applies in the same way when custom secrets are used.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_credentials/#guidelines-for-configuring-credentials-from-secrets","title":"Guidelines for Configuring Credentials from Secrets","text":""},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_credentials/#1-create-a-custom-secret","title":"1. Create a Custom Secret","text":"<p>Create a secret that will be used to reference credentials, this secret should contain all the required attributes (e.g. \"username\", \"password\") needed by the credentials.</p> <p>There are two ways to create and deploy custom secrets:</p> <p>By Kubectl Command\\ This is the preferred way of creating a secret inside a cluster, Kubernetes will handle the encoding of the key-value pairs in a base64-encoding format. </p> <pre><code>$ kubectl create secret generic &lt;secret-name&gt; --from-literal=username=&lt;your-username&gt; --from-literal=password=&lt;your-password&gt; --namespace=&lt;namespace&gt;\n</code></pre> <p>For details please refer to the official Kubernetes documentation about Managing Secrets using kubectl.</p> <p>By YAML files\\ Secrets can also be created using a secret yaml manifest. </p> <p>Note</p> <p>The string values assigned in the data fields of the secret should be base64-encoded. The containers expect a base64-encoded string to be passed from the secrets key-value pairs. The credentials will not work if the values passed are plain strings.</p> <pre><code># Example manifest for creating secret by using a yaml file\napiVersion: \"v1\"\nkind: \"Secret\"\ndata:\n  # The value of the key-value pair should be strictly base64-encoded\n  username: &lt;username&gt;\n  # The value of the key-value pair should be strictly base64-encoded\n  password: &lt;password&gt;\nmetadata:\n  labels:\n  name: &lt;secret-name&gt;\n  namespace: &lt;namespace&gt;\ntype: \"Opaque\"\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_credentials/#2-reference-the-secret","title":"2. Reference the Secret","text":"<p>Once the secret is created inside the cluster, you can now reference them in their respective custom secret fields inside the <code>custom-values.yaml</code> under <code>security</code> section. See this example for reference.</p> <p>Note</p> <p>For WebEngine LTPA AND LDAP you can reference your secrets under <code>configuration.webEngine</code> section of the Helm values.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_credentials/#3-check-the-required-attributes-in-secrets","title":"3. Check the Required Attributes in Secrets","text":"<p>There are multiple credentials used in HCL Digital Experience Compose 9.5. Each application has different required attributes for credentials. If you want to use a secret to configure credentials for a specific application, check the data attributes of the secret that you are using. This is for the Helm chart to map and have those values passed or cascaded accordingly to each application. </p> <p><code>Persistence DAM User Credential secret</code> has a username limitation. The username can begin with lowercase letters or an underscore and can contain only lowercase letters, numbers, underscore, or a dollar sign. The maximum length is 63 characters.</p> <p>Note</p> <p>Helm validates the inputs and the deployment will not be applied if required attributes are not set properly in the custom secrets.</p> <p>Here's a list of the required credential attributes for each application:</p> Secrets Helm Reference Required Attributes Application WebEngine Credential secret <code>security.webEngine.customWebEngineSecret</code> <code>username</code> <code>password</code> WebEngine WebEngine LDAP Credential secret <code>configuration.webEngine.ldap.customLdapSecret</code> <code>bindUser</code> <code>bindPassword</code> WebEngine WebEngine LTPA Credential secret <code>configuration.webEngine.ltpa.customLtpaSecret</code> <code>ltpa.version</code> <code>ltpa.realm</code> <code>ltpa.desKey</code> <code>ltpa.privateKey</code> <code>ltpa.publicKey</code> <code>ltpa.password</code> WebEngine WebEngine Content AI Secret <code>security.webEngine.customWebEngineContentAISecret</code> <code>apiKey</code> WebEngine DAM Plugin Google Vision Credential secret <code>security.damPluginGoogleVision.customDamGoogleVisionSecret</code> <code>authenticationKey</code> <code>apiKey</code> DAM Google Vision DAM Plugin Kaltura Credential secret <code>security.damPluginKaltura.customDamKalturaSecret</code> <code>authenticationKey</code> <code>secretKey</code> DAM Kaltura Persistence Connection Pool Credential secret <code>security.persistence.customConnectionPoolSecret</code> <code>username</code> <code>password</code> Persistence Persistence DAM User Credential secret <code>security.digitalAssetManagement.customDamSecret</code> <code>username</code> <code>password</code> Digital Asset Management Persistence Replication Credential secret <code>security.digitalAssetManagement.customReplicationSecret</code> <code>username</code> <code>password</code> Digital Asset Management Persistence User Credential secret <code>security.digitalAssetManagement.customDBSecret</code> <code>username</code> <code>password</code> Digital Asset Management Image Processor Credential secret <code>security.imageProcessor.customImageProcessorSecret</code> <code>authenticationKey</code> Image Processor License Manager Credential secret <code>security.licenseManager.customLicenseManagerSecret</code> <code>username</code> <code>password</code> License Manager Open LDAP Credential secret <code>security.openLdap.customLdapSecret</code> <code>username</code> <code>password</code> Open LDAP <p>WebEngine Credential secret <pre><code>apiVersion: \"v1\"\nkind: \"Secret\"\ndata:\n  # Required attribute\n  username: &lt;username&gt;\n  # Required attribute\n  password: &lt;password&gt;\nmetadata:\n  labels:\n  name: sample-web-engine-secret\n  namespace: &lt;namespace&gt;\ntype: \"Opaque\"\n</code></pre></p> <p>WebEngine LDAP Credential secret <pre><code>apiVersion: \"v1\"\nkind: \"Secret\"\ndata:\n  # Required attribute\n  bindUser: &lt;bindUser&gt;\n  # Required attribute\n  bindPassword: &lt;bindPassword&gt;\nmetadata:\n  labels:\n  name: sample-web-engine-ldap-secret\n  namespace: &lt;namespace&gt;\ntype: \"Opaque\"\n</code></pre></p> <p>WebEngine LTPA Credential secret <pre><code>apiVersion: \"v1\"\nkind: \"Secret\"\ndata:\n  # Required attribute\n  \"ltpa.version\": &lt;version&gt;\n  # Required attribute\n  \"ltpa.realm\": &lt;realm&gt;\n  # Required attribute\n  \"ltpa.desKey\": &lt;desKey&gt;\n  # Required attribute\n  \"ltpa.privateKey\": &lt;privateKey&gt;\n  # Required attribute\n  \"ltpa.publicKey\": &lt;publicKey&gt;\n  # Required attribute\n  \"ltpa.password\": &lt;password&gt;\nmetadata:\n  labels:\n  name: sample-web-engine-ltpa-secret\n  namespace: &lt;namespace&gt;\ntype: \"Opaque\"\n</code></pre></p> <p>WebEngine Content AI Secret <pre><code>apiVersion: \"v1\"\nkind: \"Secret\"\ndata:\n  # Required attribute\n  apiKey: &lt;apiKey&gt;\nmetadata:\n  labels:\n  name: sample-web-engine-content-ai-secret\n  namespace: &lt;namespace&gt;\ntype: \"Opaque\"\n</code></pre></p> <p>DAM Plugin Google Vision Credential secret <pre><code>apiVersion: \"v1\"\nkind: \"Secret\"\ndata:\n  # Required attribute\n  authenticationKey: &lt;authenticationKey&gt;\n  # Required attribute\n  apiKey: &lt;apiKey&gt;\nmetadata:\n  labels:\n  name: sample-google-vision-secret\n  namespace: &lt;namespace&gt;\ntype: \"Opaque\"\n</code></pre></p> <p>DAM Plugin Kaltura Credential secret <pre><code>apiVersion: \"v1\"\nkind: \"Secret\"\ndata:\n  # Required attribute\n  authenticationKey: &lt;authenticationKey&gt;\n  # Required attribute\n  secretKey: &lt;secretKey&gt;\nmetadata:\n  labels:\n  name: sample-kaltura-secret\n  namespace: &lt;namespace&gt;\ntype: \"Opaque\"\n</code></pre></p> <p>Persistence Connection Pool Credential secret <pre><code>apiVersion: \"v1\"\nkind: \"Secret\"\ndata:\n  # Required attribute\n  username: &lt;username&gt;\n  # Required attribute\n  password: &lt;password&gt;\nmetadata:\n  labels:\n  name: sample-connection-pool-secret\n  namespace: &lt;namespace&gt;\ntype: \"Opaque\"\n</code></pre></p> <p>Persistence DAM User Credential secret <pre><code>apiVersion: \"v1\"\nkind: \"Secret\"\ndata:\n  # Required attribute. The username can begin with lowercase letters or an underscore and can contain only lowercase letters, numbers, underscore, or a dollar sign. The maximum length is 63 characters.\n  username: &lt;username&gt;\n  # Required attribute\n  password: &lt;password&gt;\nmetadata:\n  labels:\n  name: sample-dam-user-secret\n  namespace: &lt;namespace&gt;\ntype: \"Opaque\"\n</code></pre></p> <p>Persistence Replication Credential secret <pre><code>apiVersion: \"v1\"\nkind: \"Secret\"\ndata:\n  # Required attribute\n  username: &lt;username&gt;\n  # Required attribute\n  password: &lt;password&gt;\nmetadata:\n  labels:\n  name: sample-replication-secret\n  namespace: &lt;namespace&gt;\ntype: \"Opaque\"\n</code></pre></p> <p>Persistence User Credential secret <pre><code>apiVersion: \"v1\"\nkind: \"Secret\"\ndata:\n  # Required attribute\n  username: &lt;username&gt;\n  # Required attribute\n  password: &lt;password&gt;\nmetadata:\n  labels:\n  name: sample-replication-secret\n  namespace: &lt;namespace&gt;\ntype: \"Opaque\"\n</code></pre></p> <p>Image Processor Credential secret <pre><code>apiVersion: \"v1\"\nkind: \"Secret\"\ndata:\n  # Required attribute\n  authenticationKey: &lt;authenticationKey&gt;\nmetadata:\n  labels:\n  name: sample-kaltura-secret\n  namespace: &lt;namespace&gt;\ntype: \"Opaque\"\n</code></pre></p> <p>License Manager Credential secret <pre><code>apiVersion: \"v1\"\nkind: \"Secret\"\ndata:\n  # Required attribute\n  username: &lt;username&gt;\n  # Required attribute\n  password: &lt;password&gt;\nmetadata:\n  labels:\n  name: sample-license-manager-secret\n  namespace: &lt;namespace&gt;\ntype: \"Opaque\"\n</code></pre></p> <p>Open LDAP Credential secret <pre><code>apiVersion: \"v1\"\nkind: \"Secret\"\ndata:\n  # Required attribute\n  username: &lt;username&gt;\n  # Required attribute\n  password: &lt;password&gt;\nmetadata:\n  labels:\n  name: sample-open-ldap-secret\n  namespace: &lt;namespace&gt;\ntype: \"Opaque\"\n</code></pre></p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_dam_custom_cert/","title":"Adding additional CA to the DAM trust store","text":"<p>Implementing a custom plugin for the Digital Asset Management extensibility is by default limited to publicly trusted certificates. If the plugin is signed with a self-signed or otherwise untrusted certificate authority (CA), the trust store of DAM can be extended. You can add additional certificate authorities to the trust store.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_dam_custom_cert/#prerequisites","title":"Prerequisites","text":"<p>The Digital Asset Management leverages basic Node.JS functionality to extend the trust store by using the NODE_EXTRA_CA_CERTS flag. Therefore, the certificate file used for the next steps must be one single file in the <code>pem</code> format with all necessary CAs aggregated into it.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_dam_custom_cert/#adding-the-pem-file-as-a-secret","title":"Adding the PEM file as a secret","text":"<p>To have your deployment and DAM use the certificate, you must store it in the Kubernetes cluster as a secret.</p> <p>The secret can be created using the following commands:</p> <p>Note</p> <p>You can choose the secret name and this must be referenced in the next configuration step (for example, <code>custom-ca-cert</code>). The namespace is the Kubernetes namespace where you want to deploy HCL Digital Experience Compose 9.5 to (for example, <code>digital-experience-compose</code>). However, you must set the key name to <code>customCACert.pem</code> in the following command like in <code>--from-file=key=source</code>.</p> <pre><code># Create secret with the name \"custom-ca-cert\" and the key \"customCACert.pem\"\n# Secret will be created in the namespace \"digital-experience-compose\"\n\nkubectl create secret generic custom-ca-cert --from-file=customCACert.pem=./customCACert.pem -n digital-experience-compose\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_dam_custom_cert/#configuring-secret-in-deployment","title":"Configuring secret in deployment","text":"<p>Make sure that the reference to the secret is set up correctly in your <code>custom-values.yaml</code> file. Otherwise, Digital Asset Management will not be able to trust the additional certificates.</p> <p>You can set the name of the certificate used with the following syntax. By default, no secret is set:</p> <pre><code># Networking specific configuration\nnetworking:\n  addon:\n    digitalAssetManagement:\n      caTrustSecret: \"custom-ca-cert\"\n</code></pre> <p>Note</p> <p>Verify you have entered the correct name.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_ingress/","title":"Configure Ingress For DX Compose Deployment","text":"<p>With HAProxy DX Compose deployments, it is easy to use a custom Ingress in front of DX Compose to handle advance requirements to routing, proxying and other similar use cases. This document explains how to leverage external Ingress alongside with HAProxy as the internal reverse proxy and load balancer.</p> <p>Note</p> <ul> <li>HCL DX Compose intentionally does not ship any Ingress to reduce DX Compose's deployment footprint in any Kubernetes cluster.</li> <li>This document shows an example configuration for some Ingress controllers and briefly describes minimally necessary steps to implement it inside a Kubernetes environment. This configuration is neither a proposal nor does HCL provide official support for it. </li> <li>Implementing an Ingress for use with a HCL DX Compose deployment in Kubernetes is an optional effort based on the Kubernetes cluster\u2019s requirements and customer\u2019s discretion.</li> </ul>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_ingress/#ingress-implementation","title":"Ingress Implementation","text":"<p>The following guide is a basic example on implementing a generic Ingress on your Kubernetes cluster for use with HCL DX Compose. The actual implementation might vary depending on the Cluster's setup and configuration.</p> <ul> <li>In the DX Compose Helm values by default HAProxy <code>serviceType</code> is set to <code>loadBalancer</code>. To use the external Ingress this must be set to the serviceType applicable for the appropriate use case, for this example <code>ClusterIP</code> is used, with that HAProxy service will not have any External IP.</li> </ul> <pre><code>networking:\n  haproxy:\n    serviceType: ClusterIP\n</code></pre> <ul> <li>Install an Ingress controller of your choice, this will serve as the entry point to the cluster. The Ingress controller applies the rules that are set in the Ingress resources. By design the Ingress controller is a cluster-wide resource and can be deployed in any namespace and does not have to be in the same namespace as DX Compose. The controller can be used to route multiple applications in multiple namespaces. NGINX Ingress Controller is used here as an example. To install a NGINX Ingress on your cluster, please issue the following command:</li> </ul> <pre><code>$ helm upgrade --install ingress-nginx ingress-nginx \\\n  --repo https://kubernetes.github.io/ingress-nginx \\\n  --namespace &lt;namespace&gt;\n</code></pre> <ul> <li>Check if the Ingress controller pod and service are deployed</li> </ul> <pre><code>$ kubectl get pod -n &lt;namespace&gt;\n$ kubectl get service -n &lt;namespace&gt;\n</code></pre> <ul> <li> <p>You can configure the connection between Ingress and HAProxy to use either <code>http</code> or <code>https</code> for the internal traffic. For more information, see the topic Configure HAProxy networking.</p> </li> <li> <p>Define an Ingress resource that is used to configure the routing rules that point to the existing deployment of HAProxy as the internal service. Configure a host and all of the requests received by the host are handled by <code>&lt;helm release name&gt;-haproxy</code>. A <code>secretName</code> is passed in the <code>tls</code> section to allow the Ingress controller to serve <code>https</code> traffic. The following configuration maps the root path (<code>/</code>) to the HAProxy of DX Compose. If there are other applications in the cluster handled by the same Ingress controller, their paths must be specified explicitly. All other requests are then handled by DX Compose.</p> </li> </ul> <p>Example of an Ingress resource:</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: nginx-ingress\nspec:\n  ingressClassName: nginx\n  tls:\n  - secretName: dx-tls-cert\n  rules:\n  - host: your-kube-deployment.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: &lt;release-name&gt;-haproxy\n            port:\n              name: haproxy\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_ingress/#advanced-configuration","title":"Advanced configuration","text":"<p>Important</p> <p>The configuration in the Ingress Implementation section is the recommended configuration and should be used whenever possible.</p> <p>Note that you must map in the Ingress any custom application deployed or certain configurations. This includes the following:</p> <ul> <li>Some special functionalities of DX Compose like the Web Application Bridge</li> <li>Deployments with the context root changed or removed</li> <li>The <code>friendlyUrlContextRoot</code> available for Digital Asset Management</li> </ul> <p>If mapping the root path is not possible for a deployment, map the following paths depending on the configuration of DX Compose:</p> <ul> <li><code>/wps</code> (or the custom context root set for WebEngine)</li> <li><code>/dx</code></li> <li><code>/hcl</code></li> </ul> <p>Example of an Ingress resource:</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: nginx-ingress\nspec:\n  ingressClassName: nginx\n  tls:\n  - secretName: dx-tls-cert\n  rules:\n  - host: your-kube-deployment.com\n    http:\n      paths:\n      - path: /wps\n        pathType: Prefix\n        backend:\n          service:\n            name: &lt;release-name&gt;-haproxy\n            port:\n              name: haproxy\n      - path: /dx\n        pathType: Prefix\n        backend:\n          service:\n            name: &lt;release-name&gt;-haproxy\n            port:\n              name: haproxy\n      - path: /hcl\n        pathType: Prefix\n        backend:\n          service:\n            name: &lt;release-name&gt;-haproxy\n            port:\n              name: haproxy\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_scaling/","title":"Configure Scaling","text":"<p>The HCL Digital Experience Compose 9.5 Kubernetes deployment using Helm allows you to configure the pod count of each individual application.</p> <p>In addition, it is possible to configure the use of HorizontalPodAutoscalers that scales up and down the applications by adding or removing Pods based on the pod metrics. Refer to the Scaling DX 9.5 container deployments using Helm topic for detailed overview information.</p> <p>Note</p> <p>You are not able to use more than one (1) WebEngine Pod until you have performed a database transfer.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_scaling/#configuring-pod-count","title":"Configuring pod count","text":"<p>Even if you don't want to automatically scale your DX Compose 9.5 deployment based on CPU and memory utilization, you still can control the amount of pods per application.</p> <p>You can use the following syntax to reconfigure the pod count per application in your custom-values.yaml file:</p> <pre><code># Scaling settings for deployed applications\nscaling:\n  # The default amount of replicas per application\n  replicas:\n    contentComposer: 1\n    webEngine: 1\n    digitalAssetManagement: 3\n    imageProcessor: 5\n    ringApi: 3\n    haproxy: 3\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_scaling/#configuring-horizontalpodautoscalers","title":"Configuring HorizontalPodAutoscalers","text":"<p>The use of HorizontalPodAutoscalers requires your cluster to have the Kubernetes Metrics running. Ensure that this is the case, and reference your cloud provider documentation for further information.</p> <p>You can set up the use of <code>HorizontalPodAutoscalers</code> on a per application basis using the following syntax in your custom-values.yaml file, showing Content Composer, as an example:</p> <pre><code># Scaling settings for deployed applications\nscaling:\n  # Automated scaling using HorizontalPodAutoscaler\n  horizontalPodAutoScaler:\n    # Autoscaling settings for Content Composer\n    contentComposer:\n      # Enable or disable autoscaling\n      enabled: true\n      # Minimum and maximum Pod count\n      minReplicas: 1\n      maxReplicas: 3\n      # Target CPU utilization scaling threshold\n      targetCPUUtilizationPercentage: 75\n      # Target Memory utilization scaling threshold\n      targetMemoryUtilizationPercentage: 80\n</code></pre> <p>The example configures a <code>HorizontalPodAutoscaler</code> for Content Composer, that scales up to 3 pods maximum. It considers scaling when a CPU utilization of 75% or Memory utilization of 80% per pod is reached.</p> <p>Refer to the default values.yaml file for all configurable applications.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_timezone/","title":"Configure Timezone","text":""},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_timezone/#helm-chart-value","title":"Helm Chart Value","text":"<p>By default, the timezone of all containers in the Helm-based DX Compose deployment is UTC. </p> <p>You can configure this by updating the <code>configuration.containerTimezone</code> field in the custom values file.</p> <p>Before applying the changes make sure you understand the implication of updating the timezone in all the applications. </p> <p>Important</p> <p>If you are using DAM Staging and/or WCM Syndication all deployments must have the same timezone, to prevent issues during synchronization.</p> <p>See supported input types for examples of valid timezone formats.</p> <p>For example, to use GMT/BST you need to set the <code>configuration.containerTimezone</code> to <code>Europe/London</code> <pre><code>configuration:\n  containerTimezone: \"Europe/London\"\n</code></pre></p> <p>And then apply the changes using the following command:</p> <p><code>helm upgrade -n &lt;namespace&gt; -f &lt;custom-values.yaml&gt; &lt;prefix&gt; &lt;chart&gt;</code></p> <p>If you want to go back to the UTC, you can pass an empty string to the <code>configuration.containerTimezone</code> field.</p> <p>Note</p> <p>If you passed an invalid timezone, the timezone would default back to UTC.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_timezone/#effects","title":"Effects","text":"<p>Changing the <code>configuration.containerTimezone</code> value in the custom values file changes the timezone for all containers.</p> <p>This also means that the application running inside the containers is also affected by this change. The effects of changing the timezone depend on the application, but some examples are:</p> <ul> <li><code>TZ</code> environment variable is set for all containers. </li> <li>Timestamps of files inside the container reflect the set timezone.</li> <li>CRON Jobs of Prereqs Checker follow the new timezone.</li> <li>Timestamps of the logs are currently partially affected depending on each application's logging framework. Some of the logs adapt to the timezone of the container, while others always log UTC timestamps.</li> </ul>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_timezone/#uniform-log-timestamps","title":"Uniform log timestamps","text":"<p>Currently, depending on the logging solution used inside each container, the logs do not reflect the timezone uniformly. To get uniform log timestamps with <code>kubectl</code>, the <code>--timestamps</code> flag can be passed to <code>kubectl logs</code>. This prepends all log outputs with a UTC timestamp.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_configure_timezone/#supported-input-types","title":"Supported Input Types","text":"<p>Some Examples:</p> <ul> <li><code>Europe/London</code></li> <li><code>Australia/Melbourne</code></li> <li><code>America/Phoenix</code></li> </ul> <p>You can use any timezone that are in the Timezone DB database. For the comprehensive list please see this list of time zones you can use values from the TZ database name column.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_container_resources/","title":"Container resource management","text":"<p>The default Helm values included in the HCL Digital Experience 9.5 Helm Chart offer minimal supported configuration for CPU and Memory resources. You can adjust the values in the <code>custom-values.yaml</code> for a deployment according to the Kubernetes Resource Management.</p> <pre><code># Resource allocation settings, definition per pod\n# Use number + unit, e.g. 1500m for CPU or 1500M for Memory\n# The limits can be set to null explicitly to not limit the resources. Cluster and namespace level resource limits will still apply.\nresources:\n  # Content composer resource allocation\n  contentComposer:\n    requests:\n      cpu: \"100m\"\n      memory: \"192Mi\"\n    limits:\n      cpu: \"100m\"\n      memory: \"192Mi\"\n  # WebEngine resource allocation\n  webEngine:\n    requests:\n      cpu: \"2000m\"\n      memory: \"4096Mi\"\n    limits:\n      cpu: \"4000m\"\n      memory: \"6144Mi\"\n  # DAM Plugin Google Vision resource allocation\n  damPluginGoogleVision:\n    requests:\n      cpu: \"100m\"\n      memory: \"384Mi\"\n    limits:\n      cpu: \"100m\"\n      memory: \"384Mi\"\n  # Digital asset management resource allocation\n  digitalAssetManagement:\n    requests:\n      cpu: \"500m\"\n      memory: \"1536Mi\"\n    limits:\n      cpu: \"500m\"\n      memory: \"1536Mi\"\n  # Image processor resource allocation\n  imageProcessor:\n    requests:\n      cpu: \"200m\"\n      memory: \"2048Mi\"\n    limits:\n      cpu: \"200m\"\n      memory: \"2048Mi\"\n  # Open LDAP resource allocation\n  openLdap:\n    requests:\n      cpu: \"200m\"\n      memory: \"768Mi\"\n    limits:\n      cpu: \"200m\"\n      memory: \"768Mi\"\n   # Persistence Connection Pool resource allocation\n  persistenceConnectionPool:\n    requests:\n      cpu: \"500m\"\n      memory: \"512Mi\"\n    limits:\n      cpu: \"500m\"\n      memory: \"512Mi\"\n  # PG Repmanager resource allocation\n  persistenceNode:\n    requests:\n      cpu: \"500m\"\n      memory: \"1024Mi\"\n    limits:\n      cpu: \"500m\"\n      memory: \"1024Mi\"\n  # Ring API resource allocation\n  ringApi:\n    requests:\n      cpu: \"100m\"\n      memory: \"256Mi\"\n    limits:\n      cpu: \"100m\"\n      memory: \"256Mi\"\n  # Runtime Controller resource allocation\n  runtimeController:\n    requests:\n      cpu: \"100m\"\n      memory: \"256Mi\"\n    limits:\n      cpu: \"100m\"\n      memory: \"256Mi\"\n  # Persistence metrics exporter resource allocation\n  persistenceMetricsExporter:\n    requests:\n      cpu: \"100m\"\n      memory: \"128Mi\"\n    limits:\n      cpu: \"100m\"\n      memory: \"128Mi\"\n  # Logging Sidecar resource allocation\n  loggingSidecar:\n    requests:\n      cpu: \"100m\"\n      memory: \"64Mi\"\n    limits:\n      cpu: \"100m\"\n      memory: \"64Mi\"\n  # HAProxy resource allocation\n  haproxy:\n    requests:\n      cpu: \"200m\"\n      memory: \"300Mi\"\n    limits:\n      cpu: \"200m\"\n      memory: \"300Mi\"\n  # License Manager resource allocation\n  licenseManager:\n    requests:\n      cpu: \"100m\"\n      memory: \"300Mi\"\n    limits:\n      cpu: \"100m\"\n      memory: \"300Mi\"\n  # DAM Kaltura Plugin resource allocation\n  damPluginKaltura:\n    requests:\n      cpu: \"100m\"\n      memory: \"128Mi\"\n    limits:\n      cpu: \"100m\"\n      memory: \"128Mi\"\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_container_resources/#unlimited-resource-limits","title":"Unlimited resource <code>limits</code>","text":"<p>All <code>limits</code> are explicitly set to <code>null</code> to unset them in Kubernetes and allow for unlimited resources depending on the Kubernetes Cluster. Cluster and namespace level resource limits still apply.</p> <p>The <code>limits</code> are removed individually for either CPU or Memory. For example, to remove the WebEngine CPU limit set the following:</p> <pre><code>resources:\n  webEngine:\n    limits:\n      cpu: null\n      memory: \"6144Mi\"\n</code></pre> <p>To remove the <code>limits</code> entirely for an application, set the following:</p> <pre><code>resources:\n  webEngine:\n    limits: null\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_disable_apps/","title":"Select DX Compose Applications to Deploy","text":"<p>HCL Digital Experience Compose 9.5 consists of multiple applications and services that can be deployed. Depending on your needs, it might not be necessary to have all applications deployed.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_disable_apps/#disabling-or-enabling-specific-applications","title":"Disabling or enabling specific applications","text":"<p>You can easily enable or disable specific applications by adding the following parts to your custom-values.yaml file:</p> <pre><code># Controls which application is deployed and configured\napplications:\n  # Deploys Content Composer\n  contentComposer: true\n  # Deploys WebEngine\n  webEngine: true\n  # Deploys Digital Asset Management\n  digitalAssetManagement: true\n  # Deploys the Image Processor\n  # Enabling digitalAssetManagement will override this setting with: true\n  imageProcessor: true\n  # Deploy Open LDAP\n  # Setting the ldap type in the core application configuration to dx will override this setting with: true\n  openLdap: true\n  # Deploys the Persistence Layer\n  # Enabling digitalAssetManagement will override this setting with: true\n  persistence: true\n  # Deploys the Ring API\n  # Enabling either digitalAssetManagement or contentComposer will override this setting with: true\n  ringApi: true\n  # Deploys the Runtime Controller\n  runtimeController: true\n  # Deploy HAProxy\n  haproxy: true\n</code></pre> <p>You can set applications that you do not want to be deployed to <code>false</code>. As noted in the Deploy DX Compose 9.5 to container platforms using Helm Help Center topic, some DX Compose applications are pre-requisites for others to be deployed. It can appear that you have disabled an application, but it still gets deployed. This is due to other applications requiring that one.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_imagepullsecrets/","title":"Using ImagePullSecrets","text":"<p>To use a container image registry that has access restrictions and requires credentials, you need to leverage <code>ImagePullSecrets</code> in your deployment. Refer to the Kubernetes Documentation for additional information on this topic.</p> <p>Tip</p> <p>Ensure that you create the <code>ImagePullSecret</code> in the same namespace that your DX Compose deployment is installed to.</p> <p>In order for the HCL Digital Experience Compose 9.5 deployment to leverage <code>ImagePullSecrets</code> you need to adjust your <code>custom-values.yaml</code> file to include the following syntax:</p> <pre><code>images:\n imagePullSecrets:\n - name: regcred         \n</code></pre> <p>The name <code>regcred</code> can be different, depending on how you have created your <code>ImagePullSecret</code> and how it is named. Ensure that you reference the correct name in the configuration.</p> <p>It is assumed that you have moved the HCL Digital Experience Compose 9.5 images to your registry; make sure it is also configured properly in your <code>custom-values.yaml</code>:</p> <pre><code>images:\n  repository: \"your-repo:port\"                \n</code></pre> <p>All pods created now have that secret configured for pulling DX Compose container images.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_imagepullsecrets/#configuring-deployment-to-use-the-hcl-harbor-container-registry","title":"Configuring deployment to use the HCL Harbor container registry","text":"<p>You can pull images directly from the HCL Harbor container registry. This requires every cluster node to be able to access the HCL Harbor container registry.</p> <p>If you want to use this feature, you must configure an ImagePullSecret with your HCL Harbor credentials.</p> <p>Use the following command targeting your the Kubernetes namespace for your deployment:</p> <pre><code># E-Mail and username are your harbor login, the password is your harbor CLI secret\nkubectl create secret -n &lt;YOUR-NAMESPACE&gt; docker-registry dx-harbor --docker-server=\"hclcr.io\" \\\n--docker-email='&lt;YOUR_HARBOR_USERNAME&gt;' \\\n--docker-username='&lt;YOUR_HARBOR_USERNAME&gt;' \\\n--docker-password='&lt;YOUR_HARBOR_CLI_SECRET&gt;'\n</code></pre> <p>You can obtain the CLI secret from Harbor by navigating to your <code>User Profile</code> in HCL Harbor. You can copy it from the field called <code>CLI secret</code>.</p> <p>After executing this command you should receive the following message:</p> <pre><code>secret/dx-compose-harbor created\n</code></pre> <p>Inside your <code>custom-values.yaml</code> you can now adjust the <code>ImagePullSecret</code> to the secret that was just created and point to the HCL Harbor container registry.</p> <pre><code># Image related configuration\nimages:\n  repository: \"hclcr.io\"  \n  # Image pull secrets used for accessing the repository\n  imagePullSecrets:\n    - name: \"dx-compose-harbor\"\n</code></pre> <p>Your deployment can now directly pull the container images from the HCL Harbor container registry.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_internal_networking/","title":"Configure to Deploy on the Internal Network","text":"<p>This section contains the procedure to deploy DX Compose on the internal network.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_internal_networking/#how-to-deploy-dx-compose-on-the-internal-network","title":"How to deploy DX Compose on the internal network","text":"<p>To deploy DX Compose on the internal network (with no public access), we need to add the platform-specific annotations for the HAProxy service. Update your custom <code>values.yaml</code> file with the annotation specific to your cloud provider. Refer to the list of annotations.</p> <pre><code>annotations:\n  service: \n    # Annotations for haproxy service.\n    haproxy: []\n</code></pre> <p>Example for GKE:</p> <pre><code>annotations:\n  service: \n    # Annotations for haproxy service.\n    haproxy:\n    - key: cloud.google.com/load-balancer-type\n      value : \"Internal\"\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_internal_networking/#how-to-update-the-existing-deployment","title":"How to update the existing deployment","text":"<p>Follow the steps to update an existing deployment from an external network to an internal network or vice-versa:</p> <p>Note</p> <p>Update to the network type results change in IP address and requires updates to your DNS services.</p> <ol> <li> <p>Disable HAProxy in your custom <code>values.yaml</code> file and then do helm update.</p> <p>Example:</p> <pre><code>  # Controls which application is deployed and configured\napplications:\n  # Deploys haproxy\n  haproxy: false\n</code></pre> </li> <li> <p>After updating your custom <code>values.yaml</code> file, run helm update command.</p> <pre><code>helm upgrade dx-deployment -n &lt;your namespace&gt; . -f ./&lt;your customized `values.yaml` file&gt;\n</code></pre> <p>Example:</p> <pre><code>helm upgrade dx-deployment -n dxns . -f ./cloud-deploy-values.yaml\n</code></pre> </li> <li> <p>After the update is completed, enable HAProxy and add annotations specific to your cloud provider in custom <code>values.yaml</code> file.</p> <pre><code># Controls which application is deployed and configured\napplications:\n  # Deploys haproxy\n  haproxy: true\n# Annotations for different DX Compose Resources.\n# Type: Array of objects\n# Sample values for WebEngine:\n# webEngine:\n# - key: KEY1\n# value: VALUE1\n# - key: KEY2\n# value: VALUE2\nannotations:\n  service: \n    # Annotations for haproxy service.\n    haproxy:\n     - key: cloud.google.com/load-balancer-type\n       value : \"Internal\"\n</code></pre> <p>Note</p> <p>To switch your existing deployment from an internal network to a public network, remove the annotation from the haproxy service.</p> </li> <li> <p>After updating <code>values.yaml</code> with annotations, run helm update command.</p> <pre><code>helm upgrade dx-deployment -n &lt;your namespace&gt; . -f ./&lt;your custom values file&gt;\n</code></pre> <p>Example:</p> <pre><code>helm upgrade dx-deployment -n dxns . -f ./cloud-deploy-values.yaml\n</code></pre> </li> <li> <p>Do a helm update with your existing custom <code>values.yaml</code> file to make sure all the updates are present in the deployment.</p> <p>Run the helm update command with the updated <code>values.yaml</code> file.</p> <pre><code>helm upgrade dx-deployment -n &lt;your namespace&gt; . -f ./your custom values file&gt;&gt;\n</code></pre> <p>Example:</p> <pre><code>helm upgrade dx-deployment -n external-lb . -f ./cloud-deploy-values.yaml\n</code></pre> </li> </ol>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_labels_annotations/","title":"Configure Labels and Annotations","text":"<p>This section documents the configuration of labels and annotations for different DX Compose resources.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_labels_annotations/#annotations","title":"Annotations","text":""},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_labels_annotations/#services-and-pods","title":"Services and Pods","text":"<p>To configure annotations for Kubernetes services and pods, update your custom-values.yaml file as follows:</p> <p>Notes:</p> <ul> <li>Additional annotations are not mandatory for a deployment.</li> <li>Ensure you do not overwrite existing DX Compose annotations such as the following:<ul> <li><code>meta.helm.sh/release-name</code></li> <li><code>meta.helm.sh/release-namespace</code></li> </ul> </li> </ul>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_labels_annotations/#sample-annotations-for-webengine-service","title":"Sample annotations for WebEngine service","text":"<p>To set annotation <code>KEY1</code> with value VALUE1 and annotation <code>KEY2</code> with value VALUE2 on the WebEngine service, add the following to your custom-values.yaml file:</p> <pre><code>annotations:\n  service: \n    webEngine: \n      - key: KEY1\n        value: VALUE1\n      - key: KEY2\n        value: VALUE2\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_labels_annotations/#sample-annotations-for-webengine-pods","title":"Sample annotations for WebEngine pods","text":"<p>To set annotation <code>KEY1</code> with value VALUE1 and annotation <code>KEY2</code> with value VALUE2 on WebEngine pods, add the following to your custom-values.yaml file:</p> <pre><code>annotations:\n  pod: \n    webEngine: \n      - key: KEY1\n        value: VALUE1\n      - key: KEY2\n        value: VALUE2\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_labels_annotations/#labels","title":"Labels","text":""},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_labels_annotations/#services-and-pods_1","title":"Services and Pods**","text":"<p>To configure labels for Kubernetes services and pods, update your custom-values.yaml file as follows:</p> <p>Notes:</p> <ul> <li>Additional labels are not mandatory for a deployment.</li> <li>Ensure that you do not overwrite existing DX Compose Labels such as the following:<ul> <li><code>release</code></li> <li><code>helm.sh/chart</code></li> <li><code>app.kubernetes.io/version</code></li> <li><code>app.kubernetes.io/managed-by</code></li> <li><code>app.kubernetes.io/name</code></li> <li><code>app.kubernetes.io/instance</code></li> </ul> </li> </ul>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_labels_annotations/#sample-labels-for-webengine-services","title":"Sample labels for WebEngine services","text":"<p>To set label <code>KEY1</code> with value VALUE1 and label <code>KEY2</code> with value VALUE2 on the WebEngine services, add the following to your custom-values.yaml file:</p> <pre><code>labels:\n  service: \n    webEngine: \n      - key: KEY1\n        value: VALUE1\n      - key: KEY2\n        value: VALUE2\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_labels_annotations/#sample-labels-for-webengine-pods","title":"Sample labels for WebEngine pods","text":"<p>To set label <code>KEY1</code> with value VALUE1 and label <code>KEY2</code> with value VALUE2 on WebEngine pods, add the following to your custom-values.yaml file:</p> <pre><code>labels:\n  pod: \n    webEngine: \n      - key: KEY1\n        value: VALUE1\n      - key: KEY2\n        value: VALUE2\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_labels_annotations/#configure-environment-variables-for-dx-compose-resources","title":"Configure environment variables for DX Compose resources","text":"<p>This section explains the configuration of environment variables for different DX Compose resources.</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_labels_annotations/#environment-variables","title":"Environment variables","text":"<p>To configure environment variables for kubernetes pods, update your custom-values.yaml file as below.</p> <p>Note</p> <p>Additional environment values are not mandatory for a deployment.</p> <p>Note</p> <p>This environment variable only applies to Pod's main container and will not apply to other containers of the Pod (i.e., logging sidecar).</p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_labels_annotations/#sample-environment-variables-for-webengine-pods","title":"Sample environment variables for WebEngine pods","text":"<p>To set environment variable <code>KEY1</code> with value <code>VALUE1</code> and environment variable <code>KEY2</code> with value <code>VALUE2</code> on WebEngine pods, add the following to your <code>custom-values.yaml</code> file:</p> <pre><code>environment:\n  pod: \n    webEngine: \n      - name: KEY1\n        value: VALUE1\n      - name: KEY2\n        value: VALUE2\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_options_host_alias/","title":"Setting the <code>hostAliases</code> for DX Pods","text":"<p>This topic documents the configuration of <code>hostAliases</code> for DX Compose Pods. With the <code>hostAliases</code> field, you can add entries to the <code>/etc/hosts</code> file in the Pods. This is useful for setting up domain name system (DNS) names for other services in the cluster or for mapping hostnames to IP addresses. For more information, refer to the Kubernetes documentation Adding entries to Pod /etc/hosts with HostAliases.</p> <pre><code>hostAliases:\n  contentComposer: []\n  webEngine: []\n  damPluginGoogleVision: []\n  digitalAssetManagement: []\n  imageProcessor: []\n  openLdap: []\n  persistenceNode: []\n  persistenceConnectionPool: []\n  ringApi: []\n  runtimeController: []\n  haproxy: []\n  licenseManager: []\n  damPluginKaltura: []\n</code></pre> <p>See the following sample configuration:</p> <pre><code>hostAliases:\n  webEngine:\n    - ip: \"127.0.0.1\"\n    hostnames:\n      - \"localhost\"\n      - \"myhost\"\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_options_spread_pods_across_nodes/","title":"Options to spread pods across nodes","text":"<p>This topic provides several options for distributing pods across nodes. It is possible to restrict a pod to specific nodes or prioritize it to run on certain nodes.</p> <p>You can use any of the following methods to choose where Kubernetes schedules specific Pods:</p> <ul> <li><code>nodeSelector</code></li> <li>Affinity and anti-affinity</li> <li><code>nodeName</code></li> <li>Pod topology spread constraints</li> <li>Taints and tolerations</li> </ul> <p>These options are discussed in the following sections. </p>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_options_spread_pods_across_nodes/#nodeselector","title":"NodeSelector","text":"<p>NodeSelector is the most straightforward way to define the node selection criteria. You can include the <code>nodeSelector</code> field in your Pod specification and mention the labels you want your desired node to possess. You can refer to nodeSelector for more information about node selection constraints and apply them to your services.</p> <p>Specify the <code>nodeSelector</code> constraints to your services in the custom values file:</p> <pre><code>nodeSelector:\n  contentComposer:\n  webEngine:\n  damPluginGoogleVision:\n  digitalAssetManagement:\n  imageProcessor:\n  openLdap:\n  persistenceConnectionPool:\n  persistenceNode:\n  ringApi:\n  runtimeController:\n  haproxy:\n  licenseManager:\n  damPluginKaltura:\n</code></pre> <p>Example:</p> <pre><code>nodeSelector:\n  contentComposer:\n    diskType: ssd\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_options_spread_pods_across_nodes/#affinity-and-anti-affinity","title":"Affinity and anti-affinity","text":"<p>Node affinity and <code>nodeSelector</code> are used to limit the nodes where Pods can be scheduled based on node labels. You can refer to Affinity and anti-affinity for more information about node selection constraints and apply them to your services.</p> <p>Specify <code>affinity</code> constraints to your services in the custom values file:</p> <pre><code>affinity:\n  contentComposer:\n  webEngine:\n  damPluginGoogleVision:\n  digitalAssetManagement:\n  imageProcessor:\n  openLdap:\n  persistenceConnectionPool:\n  persistenceNode:\n  ringApi:\n  runtimeController:\n  haproxy:\n  licenseManager:\n  damPluginKaltura:\n</code></pre> <p>Example:</p> <pre><code>affinity:\n  contentComposer:\n    podAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        - labelSelector:\n            matchExpressions:\n              - key: statefulset.kubernetes.io/pod-name\n                operator: In\n                values:\n                  - dx-deployment-web-engine-0\n          topologyKey: topology.kubernetes.io/zone\n    podAntiAffinity:\n      preferredDuringSchedulingIgnoredDuringExecution:\n        - weight: 100\n          podAffinityTerm:\n            labelSelector:\n              matchExpressions:\n                - key: statefulset.kubernetes.io/pod-name\n                  operator: In\n                  values:\n                    - dx-deployment-web-engine-0\n            topologyKey: topology.kubernetes.io/zone\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n          - matchExpressions:\n              - key: topology.kubernetes.io/zone\n                operator: In\n                values:\n                  - us-east-1a\n      preferredDuringSchedulingIgnoredDuringExecution:\n        - weight: 1\n          preference:\n            matchExpressions:\n              - key: topology.kubernetes.io/zone\n                operator: In\n                values:\n                  - us-east-1f\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_options_spread_pods_across_nodes/#nodename","title":"nodeName","text":"<p>NodeName is a simpler and more direct way of selecting a node for a pod than <code>nodeSelector</code> or <code>affinity</code> rules. In the Pod specification, you can use the nodeName field to specify the name of the node where the pod should run. When nodeName is used, any <code>nodeSelector</code> or affinity/anti-affinity rules are ignored, and the kubelet on the specified node tries to place the pod on that node. You can refer to nodeName for more information about node selection constraints and apply them to your services.</p> <p>Specify the <code>nodeName</code> constraints to your services in the custom values file:</p> <pre><code>nodeName:\n  contentComposer: \"\"\n  webEngine: \"\"\n  damPluginGoogleVision: \"\"\n  digitalAssetManagement: \"\"\n  imageProcessor: \"\"\n  openLdap: \"\"\n  persistenceConnectionPool: \"\"\n  persistenceNode: \"\"\n  ringApi: \"\"\n  runtimeController: \"\"\n  haproxy: \"\"\n  licenseManager: \"\"\n  damPluginKaltura: \"\"\n</code></pre> <p>Example:</p> <pre><code>nodeName:\n  contentComposer: \"node-0\"\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_options_spread_pods_across_nodes/#pod-topology-spread-constraints","title":"Pod topology spread constraints","text":"<p>You can use topology spread constraints to manage the distribution of Pods across different failure domains within your cluster, including regions, zones, nodes, and other custom-defined topology domains. This approach can help to ensure high availability and to optimize your resource usage. You can refer to Pod Topology Spread Constraints for more information about node selection constraints and apply them to your services.</p> <p>Specify <code>topologySpreadConstraints</code> constraints to your services in the custom values file:</p> <pre><code>topologySpreadConstraints:\n  contentComposer:\n  webEngine:\n  damPluginGoogleVision:\n  digitalAssetManagement:\n  imageProcessor:\n  openLdap:\n  persistenceConnectionPool:\n  persistenceNode:\n  ringApi:\n  runtimeController:\n  haproxy:\n  licenseManager:\n  damPluginKaltura:\n</code></pre> <p>Example:</p> <pre><code>topologySpreadConstraints:\n  contentComposer:\n  - maxSkew: 1\n    topologyKey: zone\n    whenUnsatisfiable: DoNotSchedule\n    labelSelector:\n      matchLabels:\n        app: dx-deployment-content-composer\n</code></pre>"},{"location":"deploy_dx/install/kubernetes_deployment/preparation/optional_tasks/optional_options_spread_pods_across_nodes/#taints-and-tolerations","title":"Taints and tolerations","text":"<p>Taints and tolerations are used together to prevent pods from being scheduled on unsuitable nodes. One or more taints are applied to a node, which indicates that the node should not accept any pods that cannot tolerate the taints. You can refer to Taints and Tolerations for more information about node selection constraints and apply them to your services.</p> <p>Specify <code>tolerations</code> constraints to your services in the custom values file:</p> <pre><code>tolerations:\n  contentComposer:\n  webEngine:\n  damPluginGoogleVision:\n  digitalAssetManagement:\n  imageProcessor:\n  openLdap:\n  persistenceConnectionPool:\n  persistenceNode:\n  ringApi:\n  runtimeController:\n  haproxy:\n  licenseManager:\n  damPluginKaltura:\n</code></pre> <p>Example:</p> <pre><code>tolerations:\n  contentComposer:\n  - key: \"key1\"\n    operator: \"Equal\"\n    value: \"value1\"\n    effect: \"NoSchedule\"\n</code></pre>"},{"location":"deploy_dx/manage/","title":"Managing DX Compose","text":"<p>This section provides information how to manage the deployment of Digital Experience (DX) Compose within your environment.</p> <p>The deployment of WebEngine is similar to HCL DX with Core container. Note that the Helm chart has some additional settings related to WebEngine. For more information, see Deploying using Helm and Preparation before installing with Helm.</p> <p>See the following topics for more information.</p> <ul> <li>Configuring DX Compose Learn how to enable Content Composer, Digital Asset Management, and AI analysis in DX Compose.</li> <li>Configuring WebEngine Learn how to configure the WebEngine container in DX Compose.</li> <li>Working with DX Compose Learn how to manage DX Compose deployments.</li> </ul>"},{"location":"deploy_dx/manage/cfg_dx_compose/","title":"Configuring DX Compose","text":"<p>In this topic, you will learn how to configuring the different features and services available in HCL Digital Experience (DX) Compose.</p> <ul> <li>Enabling and disabling Content Composer Learn how to enable and disable Content Composer.</li> <li>Enabling and disabling Digital Asset Management Learn how to enable and disable Digital Asset Management.</li> <li>Enabling and disabling WCM Content AI Analysis Learn how to enable and disable artificial intelligence (AI) analysis for Web Content Management (WCM) content.</li> <li>Integrating WAB with DX Compose Learn how to integrate WAB with DX Compose.</li> <li>Enabling and disabling People Service Learn how to enable and disable People Service.</li> <li>Enabling Search V2 Learn how to enable and disable Search V2.</li> <li>Integrating Digital Data Connector in DX Compose Learn how to integrate DDC in DX Compose.</li> <li>Installing Content as a Service Learn how to install Content as a Service (CaaS).</li> </ul>"},{"location":"deploy_dx/manage/cfg_dx_compose/enable_cc/","title":"Enabling and disabling Content Composer","text":"<p>This document outlines configurations to enable and disable Content Composer in HCL Digital Experience (DX) Compose using the <code>values.yaml</code> file. With Content Composer, you can create and manage content more effectively within the DX environment. </p>"},{"location":"deploy_dx/manage/cfg_dx_compose/enable_cc/#content-composer-configuration","title":"Content Composer configuration","text":"<p>Refer to the following sample snippet for configuring the DX Compose server to enable Content Composer:</p> <pre><code>applications:\n  contentComposer: true\n</code></pre> <p>Set the value of the key <code>contentComposer</code> to <code>true</code> to enable or <code>false</code> to disable Content Composer.</p>"},{"location":"deploy_dx/manage/cfg_dx_compose/enable_cc/#validation","title":"Validation","text":"<p>After updating the <code>values.yaml</code> file, perform the following actions:</p> <ul> <li>If running the server for the first time, refer to Installing WebEngine.</li> <li>If upgrading previous configurations, refer to Upgrading the Helm deployment.</li> </ul> <p>Access the HCL Content Composer component by navigating to Practitioner Studio &gt; Web Content &gt; Content.</p> <p>You can also use the following sample URL: </p> <pre><code>https://your-portal.net/wps/myportal/Practitioner/Web Content/Content Library\n</code></pre>"},{"location":"deploy_dx/manage/cfg_dx_compose/enable_content_ai/","title":"Enabling and disabling WCM content AI analysis","text":"<p>This document outlines configurations to enable and disable artificial intelligence (AI) analysis for Web Content Management (WCM) content in a Kubernetes deployment using the <code>values.yaml</code> file. You can also configure a content AI provider to be used for AI analysis.</p>"},{"location":"deploy_dx/manage/cfg_dx_compose/enable_content_ai/#wcm-content-ai-configuration","title":"WCM Content AI configuration","text":"<p>Refer to the following sample snippet for configuring the Digital Experience (DX) WebEngine server to enable Content AI analysis:</p> <pre><code>configuration:\n  #Configuration for webEngine\n  webEngine:\n    contentAI:\n      className: com.ai.sample.CustomerAI\n      enabled: true\n      provider: OPEN_AI\nsecurity:\n  # Security configuration for webEngine\n  webEngine:\n      webEngineContentAIProviderAPIKey: \"\"\n      customWebEngineContentAISecret: custom-credentials-webengine-ai-secret\n</code></pre> <p>To disable Content AI Analysis, refer to the following sample configuration:</p> <pre><code>configuration:\n  #Configuration for webEngine\n  webEngine:\n    contentAI:\n      enabled: true\n      provider: \"\"\n</code></pre>"},{"location":"deploy_dx/manage/cfg_dx_compose/enable_content_ai/#content-ai-configuration-parameters","title":"Content AI configuration parameters","text":"<p>In the provided configuration, the following parameters are used:</p> <ul> <li><code>className</code>: Provide the custom AI class name. The default value is <code>com.hcl.workplace.wcm.restv2.ai.ChatGPTAnalyzerService</code> if the AI analysis is enabled with provider <code>OPEN_AI</code>.</li> <li><code>enabled</code>: Set to <code>true</code> to enable content AI or to <code>false</code> to disable. By default, this parameter is set to <code>false</code>.</li> <li><code>provider</code>: If content AI is enabled, provide the content AI provider in this parameter. Valid values are <code>OPEN_AI</code> and <code>CUSTOM</code>.</li> <li><code>webEngineContentAIProviderAPIKey</code>: Enter the API key for the AI Provider. The AI provider provides an API key to access its API.</li> <li><code>customWebEngineContentAISecret</code>: Provide a secret name that will be used to set the AI API Key.</li> </ul> <p>To create a custom secret, run the following command:</p> <pre><code>kubectl create secret generic WEBENGINE_AI_CUSTOM_SECRET --from-literal=apiKey=API_KEY --namespace=NAME_SERVER\n</code></pre> <p>Replace <code>API_KEY</code> and <code>NAME_SERVER</code> with the actual values. For example:</p> <pre><code>kubectl create secret generic custom-credentials-webengine-ai-secret --from-literal=apiKey=your-API-Key --namespace=dxns\n</code></pre> <p>Note</p> <p>If a custom secret is used instead of an API key directly in the <code>values.yaml</code> file, then you must create the custom secret using the content AI provider's API key. You must then refer to the secret name in the <code>customWebEngineContentAISecret</code> property and leave the <code>webEngineContentAIProviderAPIKey</code> blank and vice versa.</p>"},{"location":"deploy_dx/manage/cfg_dx_compose/enable_content_ai/#validation","title":"Validation","text":"<p>After updating the <code>values.yaml</code> file, perform the following actions:</p> <ul> <li>If running the server for the first time, refer to Installing WebEngine.</li> <li>If upgrading previous configurations, refer to Upgrading the Helm deployment.</li> </ul> <p>After enabling the Content AI analysis, refer to the steps in WCM REST V2 AI Analysis API to call the AI Analyzer APIs of the configured Content AI Provider.</p>"},{"location":"deploy_dx/manage/cfg_dx_compose/enable_dam/","title":"Enabling and disabling DAM","text":"<p>This document outlines configurations to enable and disable Digital Asset Management (DAM) in HCL Digital Experience (DX) Compose using the <code>values.yaml</code> file. DAM is used for managing web-ready digital assets such as images or videos to be used in content and sites built with HCL DX.</p>"},{"location":"deploy_dx/manage/cfg_dx_compose/enable_dam/#dam-configuration","title":"DAM configuration","text":"<p>Refer to the following sample snippet for configuring the DX WebEngine server to enable DAM:</p> <pre><code>applications:\n  digitalAssetManagement: true\n</code></pre> <p>Set the value of the key <code>digitalAssetManagement</code> to <code>true</code> to enable or <code>false</code> to disable DAM.</p> <p>Note</p> <p>By default, DX Picker is enabled when you enable DAM. When you disable DAM, DX Picker is disabled as well.</p>"},{"location":"deploy_dx/manage/cfg_dx_compose/enable_dam/#validation","title":"Validation","text":"<p>After updating the <code>values.yaml</code> file, perform the following actions:</p> <ul> <li>If running the server for the first time, refer to Installing WebEngine.</li> <li>If upgrading previous configurations, refer to Upgrading the Helm deployment.</li> </ul> <p>Access the DAM components by navigating to Practitioner Studio &gt; Digital Assets.</p> <p>You can also use the following sample URL:</p> <pre><code>https://your-portal.net/wps/myportal/Practitioner/digital assets\n</code></pre>"},{"location":"deploy_dx/manage/cfg_dx_compose/enable_people_service/","title":"Enabling and disabling People Service","text":"<p>This document outlines configurations to enable and disable People Service in HCL Digital Experience (DX) Compose using the <code>values.yaml</code> file. People Service provides a layer for social connectivity by helping team members to connect, especially in large projects. It enhances user profiles with additional data and interactive features, improving team collaboration and project execution.</p> <p>Note</p> <p>In this release, instructions for using this feature is located in the HCL Digital Experience Help Center. These will be documented in the HCL Digital Experience Compose Help Center in future releases.</p>"},{"location":"deploy_dx/manage/cfg_dx_compose/enable_people_service/#people-service-configuration","title":"People Service configuration","text":"<p>Refer to the following sample snippet for configuring the DX WebEngine server to enable People Service:</p> <pre><code>peopleservice:\n  enabled: true\n</code></pre> <p>Set the value of the key <code>peopleservice.enabled</code> to <code>true</code> to enable or <code>false</code> to disable People Service.</p>"},{"location":"deploy_dx/manage/cfg_dx_compose/enable_people_service/#validation","title":"Validation","text":"<p>After updating the <code>values.yaml</code> file, perform the following actions:</p> <ul> <li>If running the server for the first time, refer to Installing WebEngine.</li> <li>If upgrading previous configurations, refer to Upgrading the Helm deployment.</li> </ul> <p>Access People Service by using the following sample URL:</p> <pre><code>https://your-portal.net/dx/ui/people\n</code></pre>"},{"location":"deploy_dx/manage/cfg_dx_compose/enable_people_service/#people-service-with-search-v2","title":"People Service with Search V2","text":"<p>You can integrate People Service with Search V2 to enhance user discoverability and search performance. This integration provides efficient access to user profile data with real-time synchronization.</p> <p>You can enable the Search V2 integration through the parameter <code>configuration.search.middleware.enabled</code> in the People Service Helm chart.</p> <p>For more information on how to integrate People Service with Search V2, refer to the People Service and Search V2 integration topic.</p>"},{"location":"deploy_dx/manage/cfg_dx_compose/enable_search/","title":"Enabling Search V2","text":"<p>Search V2 introduces a new user interface with a backend service that utilizes OpenSearch to provide a seamless search experience. Search V2 is enabled by default for HCL Digital Experience (DX) Compose when the parameter <code>configuration.searchMiddleware.enabled</code> is set to <code>true</code> in the HCL DX Deployment Helm chart.</p>"},{"location":"deploy_dx/manage/cfg_dx_compose/enable_search/#search-configuration","title":"Search configuration","text":"<p>Refer to the following sample snippet for configuring the DX Compose server to enable Search V2:</p> <pre><code># Application configuration\nconfiguration:\n  # Search Middleware configuration\n  searchMiddleware:\n    # Enable/Disable Search Middleware\n    enabled: true\n</code></pre>"},{"location":"deploy_dx/manage/cfg_dx_compose/enable_search/#validation","title":"Validation","text":"<p>After updating the <code>values.yaml file</code>, perform the following actions:</p> <ul> <li>If running the server for the first time, refer to Installing WebEngine.</li> <li>If upgrading previous configurations, refer to Upgrading the Helm deployment.</li> </ul>"},{"location":"deploy_dx/manage/cfg_dx_compose/enable_search/#access","title":"Access","text":"<p>Access the HCL Search V2 by navigating to Practitioner Studio &gt; Web Content &gt; Search.</p> <p>You can also use the following sample URL: </p> <pre><code>https://your-portal.net/wps/myportal/Practitioner/SearchCenter\n</code></pre>"},{"location":"deploy_dx/manage/cfg_dx_compose/enable_search/#search-v2-integration","title":"Search V2 integration","text":"<p>You can enable the following application to use as additional data source for Search V2:</p> <ul> <li> <p>People Service</p> <p>For more information on how to integrate People Service with Search V2, refer to the People Service and Search V2 integration topic.</p> </li> </ul>"},{"location":"deploy_dx/manage/cfg_dx_compose/setup_cntnt_serv_pgs/","title":"Setting up Content as a Service","text":"<p>To be able to work with Content as a Service (CaaS) pages in HCL Digital Experience (DX) Compose, you must enable it using the steps listed in this topic. The setup for CaaS is comprised of resources that are shared across virtual portals and virtual portal scoped resources.</p> <p>Refer to the following steps to install and configure CaaS:</p> <ol> <li> <p>On a Kubernetes deployment, change the directory to <code>/home/centos/native-kube</code> on the main Kubernetes node.</p> </li> <li> <p>Run the following command to make the CaaS theme available to DX Compose.</p> <pre><code>helm upgrade -n dxns -f install-deploy-values.yaml -f ./install-hcl-dx-deployment/caas/install-caas.yaml dx-deployment ./install-hcl-dx-deployment\n</code></pre> </li> <li> <p>Run the following command to enter a bash shell on the DX Compose WebEngine pod.</p> <pre><code>kubectl exec -it dx-deployment-web-engine-0 bash -n dxns\n</code></pre> </li> <li> <p>Run the following command to register the CaaS theme to all the virtual portals in DX Compose.</p> <pre><code>/opt/openliberty/wlp/usr/svrcfg/scripts/xmlaccess/xmlaccess.sh -d /opt/openliberty/wlp/usr/servers/defaultServer -url http://localhost:9080/wps/config -in /opt/openliberty/wlp/usr/svrcfg/templates/caas/deployCaaSTheme.xml -out /tmp/deployCaaSTheme.xml.out -user \"your Portal Admin userid\" -password \"your password\"\n</code></pre> </li> <li> <p>Run the following command to register the CaaS Page and Portlet in each virtual portal, including the main virtual portal.</p> <pre><code>/opt/openliberty/wlp/usr/svrcfg/scripts/xmlaccess/xmlaccess.sh -d /opt/openliberty/wlp/usr/servers/defaultServer -url http://localhost:9080/wps/config -in /opt/openliberty/wlp/usr/svrcfg/templates/caas/deployCaaSPages.xml -out /tmp/deployCaaSPages.xml.out -user \"your Portal Admin userid\" -password \"your password\"\n</code></pre> <p>If you are installing the CaaS pages into a virtual portal apart from the main virtual portal, run the following command. This command includes the <code>VP Context</code> in the <code>url</code> parameter.</p> <pre><code>/opt/openliberty/wlp/usr/svrcfg/scripts/xmlaccess/xmlaccess.sh -d /opt/openliberty/wlp/usr/servers/defaultServer -url http://localhost:9080/wps/config/\"VP Context\" -in /opt/openliberty/wlp/usr/svrcfg/templates/caas/deployCaaSPages.xml -out /tmp/deployCaaSPages.xml.out -user \"your Portal Admin userid\" -password \"your password\"\n</code></pre> </li> <li> <p>Restart your HCL DX Compose server.</p> </li> </ol>"},{"location":"deploy_dx/manage/cfg_dx_compose/wab_integration/","title":"Integrating WAB with DX Compose","text":"<p>This topic provides the steps to integrate Web Application Bridge (WAB) with Digital Experience (DX) Compose. Integrating WAB with HCL DX Compose allows you to use external web applications within your HCL DX Compose environment, providing a seamless and unified user experience. Note that there are steps in the integration process for portal administrators and content authors. In this integration, the portal administrator collects information about the content provider and its applications, and then configures DX Compose to enable WAB. Refer to the following steps:</p> <ol> <li>Enable WAB on a portal.</li> <li>Create and configure the web dock application.</li> <li>Add the web dock application to a page.</li> </ol> <p>Note</p> <p>WAB integration is not supported on a portal with the context root removed.</p>"},{"location":"deploy_dx/manage/cfg_dx_compose/wab_integration/#enabling-wab-on-a-portal","title":"Enabling WAB on a portal","text":"<p>Before creating the applications, you must enable WAB on a portal that does not have the context root removed. Note that a portal administrator should perform the following steps.</p> <ol> <li> <p>Update the context root of the wp.vwat.servlet.ear application to \"/\" by adding the following snippet to the respective <code>values.yaml</code> file:</p> <pre><code>configOverrideFiles:\nvwat-wab-overrides.xml: |\n    &lt;server description=\"DX Web Engine server\"&gt; \n        &lt;enterpriseApplication id=\"wp.vwat.servlet.ear\" location=\"${server.config.dir}/resources/portlets/VwatReverseProxyServlet.ear\" name=\"wp.vwat.servlet.ear\" startAfterRef=\"engine-ear\"&gt;\n        &lt;web-ext moduleName=\"wp.vwat.servlet.war\" context-root=\"/\"&gt;&lt;/web-ext&gt;\n        &lt;application-bnd&gt;\n            &lt;security-role name=\"All Role\"&gt;\n                &lt;special-subject type=\"ALL_AUTHENTICATED_USERS\"/&gt;\n            &lt;/security-role&gt;\n        &lt;/application-bnd&gt;\n        &lt;/enterpriseApplication&gt;\n    &lt;/server&gt;\n</code></pre> </li> <li> <p>After updating the context root, perform a Helm upgrade to apply the changes. Open Liberty picks up and applies changes at runtime; this does not require a restart.</p> </li> </ol>"},{"location":"deploy_dx/manage/cfg_dx_compose/wab_integration/#creating-and-configuring-the-web-dock-application","title":"Creating and configuring the web dock application","text":"<p>After enabling WAB and performing a Helm upgrade, the portal administrator should create content provider profiles and a web dock application.</p> <ol> <li> <p>Log in to HCL DX Compose as an administrator.</p> </li> <li> <p>In the site toolbar, click the Administration menu icon and click Administration. Go to Applications &gt; Virtual Application Manager.</p> <p>Important</p> <p>Do not enter angel brackets (&lt; or &gt;) into any of the text boxes.</p> </li> <li> <p>Click Content Provider Profiles &gt; Create Content Provider Profiles.</p> </li> <li> <p>Create the content provider profiles. For more information, see Content provider profiles.</p> </li> <li> <p>Go to the profile you created and create a policy by clicking Add policy. Create at least one policy for the content provider profile.</p> </li> <li> <p>Click Web Dock Applications &gt; Create Web Dock Applications.</p> </li> <li> <p>Create the web dock applications. For more information, see Web dock applications.</p> </li> <li> <p>Go to the web dock application you created and select one of the following tabs:</p> <p>Note</p> <p>If the system administrator changes the host or port information in the content provider profile, you must edit the web dock application and reselect the profile. Otherwise, the web dock application does not pick up the changes.</p> <ul> <li>Web Dock Display Settings</li> <li>Client Side IPC for Web Dock</li> <li>Server Side IPC for Web Dock</li> <li>Plugins</li> </ul> </li> <li> <p>Click Edit to configure the web dock settings.</p> </li> </ol>"},{"location":"deploy_dx/manage/cfg_dx_compose/wab_integration/#adding-the-web-dock-application-to-a-page","title":"Adding the web dock application to a page","text":"<p>After configuring the web dock application, content authors must add the application to a page.</p> <ol> <li> <p>Log in to HCL DX Compose as a content author. </p> </li> <li> <p>Access the site toolbar and perform one of the following actions:</p> <ul> <li>Create a page and add the web dock application portlet to the page.</li> <li>Edit an existing page and add the web dock application portlet to the page.</li> </ul> <p>Tip</p> <p>To get the web dock application to render on a page, the page must either have the Web Dock profile or a profile that includes the wp_webdock module. Edit the page properties and change the profile or add the wp_webdock module to the profile applied to the page.</p> <p>If you are using the Resource Aggregator for Portlets, no additional steps are necessary. If you are not using the Resource Aggregator for Portlets, refer to Adding the wp_webdock module.</p> </li> </ol>"},{"location":"deploy_dx/manage/cfg_dx_compose/wab_integration/#adding-the-wp_webdock-module","title":"Adding the wp_webdock module","text":"<p>If you are not using the Resource Aggregator for Portlets, add the wp_webdock module to an existing profile on your page.</p> <ol> <li>Connect to the theme repository with the fs-type1 connection.</li> <li>Go to your theme.</li> <li>Open the profile file in the /profiles directory.</li> <li>Make a copy of the profile file and give it a unique name.</li> <li>Edit the .json file and add the wp_webdock module ID.</li> <li>Copy the profile that you created to the <code>/profiles</code> directory.</li> <li> <p>Invalidate the resource aggregator cache to integrate your changes. </p> <ol> <li>Click the Administration menu icon in the toolbar.</li> <li>click Theme Analyzer &gt; Utilities &gt; Control Center &gt; Invalidate cache.      Auto-invalidation recognizes your changes automatically for WebDAV-based themes. No further action is required.</li> </ol> </li> </ol>"},{"location":"deploy_dx/manage/cfg_dx_compose/wab_integration/#updating-the-user-role","title":"Updating the user role","text":"<p>If a content author experiences issues with viewing the web dock applications, complete the following steps to update the user role:</p> <ol> <li> <p>Log in to HCL DX Compose as the administrator.</p> </li> <li> <p>Click the Administration menu icon in the toolbar. Then, click Access &gt; Resource Permissions.</p> </li> <li> <p>Search for the page that contains the web dock application.</p> </li> <li> <p>Provide the content author the correct permissions to the page.</p> </li> <li> <p>(Optional) If the content provider policy is set to use basic or form-based authentication, complete the following steps:</p> <ol> <li>Go to the web dock application and provide the content user the correct permissions.</li> <li>Go to the credential vault used for the authentication. Provide the content user the correct permissions to the credential vault.</li> </ol> </li> </ol>"},{"location":"deploy_dx/manage/cfg_dx_compose/integrate_ddc/","title":"Integrating DDC in DX Compose","text":"<p>You can use the Digital Data Connector (DDC) for the HCL DX Compose framework to integrate data from external data sources to your DX Compose pages by using the Web Content Manager presentation components. External data means that the data does not need to be stored directly in Web Content Manager. For more information on Digital Data Connector, refer to Digital Data Connector.</p> <ul> <li>Connecting to HCL Volt MX Foundry through Digital Data Connector Learn how to use DDC for the HCL DX Compose framework to integrate data from HCL Volt MX Foundry.</li> </ul>"},{"location":"deploy_dx/manage/cfg_dx_compose/integrate_ddc/integrating_voltmx_foundry/","title":"Connecting to HCL Volt MX Foundry through DDC","text":"<p>This section provides the steps on using the Digital Data Connector (DDC) for HCL Digital Experience (DX) Compose framework to integrate data from HCL Volt MX Foundry (integrated external data sources) to your DX Compose pages using HCL Web Content Manager presentation components.</p>"},{"location":"deploy_dx/manage/cfg_dx_compose/integrate_ddc/integrating_voltmx_foundry/#prerequisite","title":"Prerequisite","text":"<p>Ensure that the your Volt MX Foundry application is configured correctly according to Configuring Volt MX Foundry to connect to HCL DX DDC.</p>"},{"location":"deploy_dx/manage/cfg_dx_compose/integrate_ddc/integrating_voltmx_foundry/#creating-a-mapping-for-the-ddc-plug-in-for-the-list-rendering-profile","title":"Creating a mapping for the DDC plug-in for the list-rendering profile","text":"<p>This section describes how to define the set of attributes available in the beans that are contained in bean lists that a DDC plug-in generates in list-rendering profile.</p> <p>For more information, see Technical concepts.</p> <p>The following API end point and response are used to create this sample document:</p> <ul> <li>Sample API end point for GET</li> </ul> <p></p> <ul> <li>Sample API end point for POST</li> </ul> <p></p>"},{"location":"deploy_dx/manage/cfg_dx_compose/integrate_ddc/integrating_voltmx_foundry/#creating-the-list-rendering-profile","title":"Creating the list-rendering profile","text":"<p>Use Helm to add list-rendering profile properties in <code>ListRenderingProfileService.properties</code>. Refer to the following steps:</p> <ol> <li> <p>Update the <code>values.yaml</code> file with the following snippet:</p> <pre><code>propertiesFilesOverrides:\n  ListRenderingProfileService.properties:\n    ddcDemo.Name: \"ddcDemo.profile.json\"\n    ddcDemo.BeanListProviderID: \"ibm.portal.ddc.json\"\n    ddcDemo.ItemAttribute.id: \"id\"\n    ddcDemo.ItemAttribute.fullname: \"name\"\n    ddcDemo.ItemAttribute.email: \"email\"\n    ddcDemo.ItemAttribute.username: \"username\"\n    ddcDemo.ListItemSelection: \".\"\n    ddcDemo.Type: \"BasicJSONSelection\"\n  ConfigService.properties:\n    wp.proxy.config.urlreplacement.digital_data_connector_policy.ddcDemo: \"https://hcl-dx-dev.hclvoltmx.net/services/account/*\"\n</code></pre> <p>This configuration defines a list-rendering profile named <code>ddcDemo</code> with the following attributes:</p> <ul> <li><code>Name</code>: The name of the profile file.</li> <li><code>BeanListProviderID</code>: The ID of the bean list provider.</li> <li><code>ItemAttribute.id</code>: The attribute for the item ID.</li> <li><code>ItemAttribute.fullname</code>: The attribute for the full name.</li> <li><code>ItemAttribute.email</code>: The attribute for the email.</li> <li><code>ItemAttribute.username</code>: The attribute for the username.</li> <li><code>ListItemSelection</code>: The selection criteria for the list items.</li> <li><code>Type</code>: The type of selection.</li> </ul> <p>For more information on how to update or add properties using Helm, see Updating DX Compose WebEngine properties using Helm values.</p> </li> <li> <p>After updating property, perform a Helm upgrade to apply the changes.</p> </li> </ol> <p>The server is automatically restarted to pick up the changes in the properties file.</p>"},{"location":"deploy_dx/manage/cfg_dx_compose/integrate_ddc/integrating_voltmx_foundry/#wcm-presentation-components","title":"WCM presentation components","text":"<p>You can use an existing or a new Web Content Manager (WCM) library. The example in this page uses a new library, DDC Foundry, with default items such as site area and workflow. You must create WCM artifacts under four folders:</p> <ul> <li>Content</li> <li>Components</li> <li>Authoring Templates</li> <li>Presentation Templates</li> </ul> <p>Refer to Creating web content libraries for instructions on how to work with WCM libraries.</p>"},{"location":"deploy_dx/manage/cfg_dx_compose/integrate_ddc/integrating_voltmx_foundry/#creating-a-presentation-template","title":"Creating a Presentation Template","text":"<p>Create a Presentation Template to set the context of the DDC content. Refer to the following steps:</p> <ol> <li> <p>Go to Web Content &gt; Authoring.</p> </li> <li> <p>Create a new Presentation Template.</p> <ol> <li>Click New &gt; Presentation Template. </li> <li>Enter a Name, Display title, and Description for your presentation template.     The recommended name is Volt MX data presentation template.</li> <li>Under Presentation Template Options, click Insert Tag.</li> </ol> <p></p> <ol> <li>Select the type of tag to create, and then define parameters for the selected tag. You can then either copy and paste the tag into your design, or click OK to insert the tag at the current cursor location.</li> </ol> <p></p> <p>Sample Presentation Template options</p> <pre><code>[Plugin:ListRenderingContext action=\"set\" attribute=\"source=[Element context='current' type='content' key='sourceuri']\" profile=\"[Element context='current' type='content' key='profile']\" extension-id=\"[Element context='current' type='content' key='provider']\"][Component name=\"ddc foundry/appearances/ddc volt mx list appearances\" resultsPerPage=\"\" startPage=\"\"]\n</code></pre> <ul> <li>Under <code>attribute</code>, define the data <code>source</code> endpoint. The content field set in this example is <code>sourceuri</code>, where you saved the endpoint in the content item.</li> <li><code>profile</code> refers to the List-Rendering Profile which was saved earlier in the WAS console. The content field that is set in this example is also <code>profile</code>, which is saved in the content item with the <code>ddcDemo.profile.json</code> value.</li> <li><code>extension-id</code> refers to the DDC plugin ID. The content field set in this example is <code>provider</code>, which is saved in the content item with value <code>ibm.portal.ddc.json</code>.</li> </ul> </li> <li> <p>Click Save and Close.</p> </li> </ol> <p>Note</p> <p>If you selected any other Resource Method (for example, POST from <code>Advanced</code> &gt; <code>Front End API</code> &gt; <code>Resource Method</code>) while creating a new integration service with Volt MX Foundry, you might need the capability to submit data to the API which DDC will try to parse as sourceParams. In that case, you must include that in your Presentation Template.</p> <p>Sample Presentation Template options with params</p> <pre><code>[Plugin:ListRenderingContext action=\"set\" attribute=\"source=[Element context='current' type='content' key='sourceuri']\" attribute=\"sourceParams=[Element context='current' type='content' key='params']\" profile=\"[Element context='current' type='content' key='profile']\" extension-id=\"[Element context='current' type='content' key='provider']\"][Component name=\"ddc foundry/appearances/ddc volt mx list appearances\" resultsPerPage=\"\" startPage=\"\"]\n</code></pre> <p>Under <code>attribute</code>, define the data <code>sourceParams</code>. The content field set in this example is <code>params</code>, which is saved in the content item.</p> <p></p>"},{"location":"deploy_dx/manage/cfg_dx_compose/integrate_ddc/integrating_voltmx_foundry/#creating-a-content-template","title":"Creating a Content Template","text":"<p>Under Authoring Templates, create a Content Template.</p> <ol> <li> <p>Click New &gt; Authoring Template &gt; Content Template.</p> <p></p> </li> <li> <p>Add the Name, Display title, and Description for your Content Template. </p> <p>The recommended name is Volt MX Content Template.</p> </li> <li> <p>Under Item Properties, select the presentation template you created in Creating a presentation template as the Default Presentation Template.</p> <p></p> </li> <li> <p>Click Manage Element and add the following elements to the content template:</p> Element type Name Display title Component Reference appearance Appearance Short Text sourceuri Data Source URI Short Text profile List Rendering Profile Short Text provider DDC Plugin <p></p> <p>Note</p> <p>In case of GET resource method, adding httpmethod element is not necessary. Vy default, the connection is initially set to GET.</p> <p>If you selected any other Resource Method (for example, POST from <code>Advanced</code> &gt; <code>Front End API</code> &gt; <code>Resource Method</code>) while creating a new integration service with Volt MX Foundry, then you need to add another element httpmethod. This element (httpmethod) can be added as Short Text, Text, or OptionSelection. A content created from this content template can then load and render data from data sources using other resource methods. Leaving the optional httpmethod field value blank or empty when creating your content, which is based on the content template, would still have the connection fallback to GET.</p> Element type Name Display title Short Text httpmethod Select Http Method <p></p> </li> <li> <p>Click Default Content Properties and add Express workflow.</p> <p></p> </li> <li> <p>Click Save and Close.</p> </li> </ol> <p>Note</p> <p>If you selected any other Resource Method (for example, POST from <code>Advanced</code> &gt; <code>Front End API</code> &gt; <code>Resource Method</code>) while creating a new integration service with Volt MX Foundry, you might need the capability to submit data to the API which DDC will try to parse as sourceParams using the Presentation Template you created in the previous section. In that case, you must add a content field in your Content Template that will save this. It can have any name but this example uses params.</p> Element type Name Display title Short Text params Request Body <p></p>"},{"location":"deploy_dx/manage/cfg_dx_compose/integrate_ddc/integrating_voltmx_foundry/#creating-a-list-appearance","title":"Creating a List Appearance","text":"<ol> <li> <p>Go to the Library Explorer. The following default items are available: Content, Categories, Components, Authoring Templates, Presentation Templates, Workflow Items, and Segments.</p> <p></p> </li> <li> <p>Create an Appearances folder under Components. This is to ensure that your personalization components use the DDC selection rule. Select pluggable resources can be found easily in one place.</p> <p></p> </li> <li> <p>Under the Appearances folder, create a new Personalization component.</p> <ol> <li> <p>Click New &gt; Component &gt; Personalization.</p> <p></p> </li> <li> <p>Enter the Name, Display title, and Description. The recommended name is DDC Volt MX List Appearances.</p> <p></p> </li> <li> <p>Under Personalization Element, click New. </p> </li> <li> <p>Under New Rule, click Web Content and select Pluggable Resources. Click Save.</p> <p></p> </li> <li> <p>In the List Presentation Markup, add the following:</p> <ul> <li>Header: <code>&lt;ul&gt;</code></li> <li>Result design:       <pre><code>&lt;li&gt;[AttributeResource attributeName=\"fullname\" separator=\",\"]&lt;/li&gt;\n&lt;li&gt;[AttributeResource attributeName=\"username\" separator=\",\"]&lt;/li&gt;\n&lt;li&gt;[AttributeResource attributeName=\"email\" separator=\",\"]&lt;/li&gt;\n</code></pre></li> <li>Footer: <code>&lt;/ul&gt;</code></li> </ul> <p>Note</p> <p>The <code>attributeName</code> used here is the last part of the <code>itemAttribute</code> you have specified in your list-rendering profile. For example, <code>ddcDemo.ItemAttribute.fullname</code>.</p> <p></p> </li> <li> <p>Click Save and Close.</p> </li> </ol> </li> </ol>"},{"location":"deploy_dx/manage/cfg_dx_compose/integrate_ddc/integrating_voltmx_foundry/#creating-a-content-item","title":"Creating a Content item","text":"<ol> <li> <p>Under your libraries, click Content &gt; Articles. </p> </li> <li> <p>Create a new Content item from the Content Template that you created in Creating a Content Template.</p> <p></p> </li> <li> <p>Add the Name, Display title, and Description of the Content item.     The recommended name is Volt MX Main Content, and in the content fields / elements, provide the following values:</p> Content field title Value Appearance auto filled once you've chosen a component Data Source URI https://hcl-dx-dev.hclvoltmx.net/services/account/id?id=1 List Rendering Profile ddcDemo.profile.json DDC Plugin ibm.portal.ddc.json <p></p> <p>Note</p> <p>If you selected any other Resource Method (for example - POST from <code>Advanced</code> &gt; <code>Front End API</code> &gt; <code>Resource Method</code>) while creating a new integration service with Volt MX Foundry then you need to provide value for httpmethod. Also, the value of Data Source URI would be the POST URL endpoint in this case.</p> Content field title Value Data Source URI https://hcl-dx-dev.hclvoltmx.net/services/account/id Select Http Method post <p></p> </li> <li> <p>Click Save and Close.</p> </li> </ol> <p>Note</p> <p>If you selected any other Resource Method (for example, POST from <code>Advanced</code> &gt; <code>Front End API</code> &gt; <code>Resource Method</code>) while creating a new integration service with Volt MX Foundry, you might need the capability to submit data to the API which DDC will try to parse as sourceParams using the Presentation Template you created in a previous section. In that case, you must provide value for params in your Content item. You can pass many key-value pairs of data and it should have the format of a URL query string.</p> Content field title Value Request Body ?id=2 <p></p>"},{"location":"deploy_dx/manage/cfg_dx_compose/integrate_ddc/integrating_voltmx_foundry/#using-wcm-artifacts-on-a-dx-compose-page","title":"Using WCM artifacts on a DX Compose page","text":"<p>Now you can use all the WCM artifacts that you created on a DX Compose page.</p> <p>Note</p> <p>This guide uses an existing page but you can create a completely new Content Root or any child or sibling page on any site. Refer to Creating a page from the site toolbar for creating a page.</p> <ol> <li> <p>Go to any page (for example, Volt MX DDC) and enable Edit Mode.</p> <p></p> </li> <li> <p>In the site toolbar, click the Add page components and applications (plus) icon. Then click Applications and add a Web Content Viewer on the page.</p> <p></p> </li> <li> <p>Click the Add To Page button.</p> <p></p> </li> <li> <p>Inside the Web Content Viewer, click on the upper right dropdown button and select Edit Shared Settings.</p> <p></p> </li> <li> <p>Under Content, change the mapped content to the Content item you created in Creating a Content item.</p> <p></p> </li> <li> <p>Click OK. </p> <p>The following output page is displayed.</p> <p></p> </li> </ol>"},{"location":"deploy_dx/manage/cfg_dx_compose/integrate_ddc/integrating_voltmx_foundry/configuring_voltmx_foundry_to_connect_to_ddc/","title":"Configuring Volt MX Foundry to connect to DDC","text":"<p>This section provides the steps on how to configure Volt MX Foundry to connect using the Digital Data Connector (DDC) in HCL Digital Experience (DX) Compose.</p>"},{"location":"deploy_dx/manage/cfg_dx_compose/integrate_ddc/integrating_voltmx_foundry/configuring_voltmx_foundry_to_connect_to_ddc/#prerequisite","title":"Prerequisite","text":"<p>You must have access to the Volt MX Foundry Console via Volt MX Cloud or On-Premise instance. For more information, refer to the Volt MX  cloud service documentation. This example uses the cloud service that Volt MX offers.</p>"},{"location":"deploy_dx/manage/cfg_dx_compose/integrate_ddc/integrating_voltmx_foundry/configuring_voltmx_foundry_to_connect_to_ddc/#creating-new-integration-service-with-volt-mx-foundry","title":"Creating new integration service with Volt MX Foundry","text":"<p>Perform the following steps to use the new integration service with Volt MX Foundry cloud service:</p> <ol> <li> <p>Go to https://manage.hclvoltmx.com to access paid cloud resources or https://manage.demo-hclvoltmx.com to access your trial environment.</p> </li> <li> <p>Click the Apps icon, and then click Add New.</p> <p></p> </li> <li> <p>Create a new API endpoint using Integration Service. Click Integration, and then click Configure New.</p> <p></p> </li> <li> <p>Configure the service definition. </p> <ol> <li>Enter a Name.</li> <li>In the Service Type field, select JSON. </li> <li>Enter the Base URL. </li> <li>Click Save &amp; Add Operation.</li> </ol> <p></p> </li> <li> <p>Add an Operation for the service created. </p> <ol> <li>Enter a Name for the operation.</li> <li>In the Operation Security Level field,, select Anonymous App Users or Public. These are the currently supported options of DDC.</li> <li>In the Target URL field, you can modify the URL if needed. If you included a parameter in the Target URL, you must define it in the Request Input, as shown in the following example.</li> <li>In the Advance section, click Front End API.</li> <li>In the Resource Method field, select GET. This is the only method currently supported by the DDC generic JSON plugin.</li> </ol> <p></p> <p>Note</p> <p>By default, DDC generic JSON plugin supports GET but the generic DDC JSON plugin can now send requests with methods such as POST, PUT, and DELETE by utilizing the extension of the plugin in the form of an optional content field named <code>httpmethod</code>. When using other resource methods such as POST, PUT, and DELETE, it is mandatory to create a content template with the <code>httpmethod</code> optional field element.</p> </li> <li> <p>Add the Response Output. </p> <ol> <li>Go to the Response Output tab, then click Add Parameter.      A row appears on the table. </li> <li>Enter the Name and Path or the JSON Path. The path is based on the response of the target URL you defined in Service Definition. </li> <li>Try the service by clicking Save And Fetch Response. If everything looks fine, click Save Operation.</li> </ol> <p></p> <p>Note</p> <p>You do not need to map all the responses in the  Response Output and can only map what you need. Make the response output flat as possible, as shown in the sample above. The values you set here will be reused as properties in DDC.</p> </li> </ol>"},{"location":"deploy_dx/manage/cfg_dx_compose/integrate_ddc/integrating_voltmx_foundry/configuring_voltmx_foundry_to_connect_to_ddc/#publishing-and-testing-integration-service-with-volt-mx-foundry","title":"Publishing and testing integration service with Volt MX Foundry","text":"<ol> <li> <p>Under the Publish tab, click the Publish button.</p> <p></p> </li> <li> <p>After the the App is published, you can test the API endpoint by using Developer Portals. </p> <ol> <li>Click Developer Portals icon on the left navigation pane.</li> <li>Click the link where your environment is located. This opens a new tab in your browser.</li> </ol> <p></p> </li> <li> <p>View the endpoint you created. </p> <ol> <li>On the Developer Portals, click API.</li> <li>On the App you created, click the dropdown button. </li> <li>Click the View link on the integration service you created. This redirects you to the Swagger UI page where you can try your Endpoint.</li> </ol> <p></p> </li> <li> <p>Test the endpoint you created. </p> <ol> <li>Before testing the endpoint, you must authorize the call if you selected the Anonymous App Users during the creation of the operation. Click the Authorize button.</li> <li>In the Username field, enter the App Key. </li> <li>In the Password field, enter the the App Secret.      You can find the App Key and App Secret on the Swagger page.</li> </ol> <p>On the Swagger page, you will see the service that you created. Click the dropdown button beside the service and click Try it out. After completing the fields, you can now execute the API. There should be a response when everything is set up properly.</p> <p></p> <p>Note</p> <ul> <li>If you created your Operation Public in Operation Security Level, you don't need any authorization.</li> <li>You will need the information on this page during the setup to configure DDC.</li> </ul> </li> </ol>"},{"location":"deploy_dx/manage/cfg_dx_compose/integrate_ddc/integrating_voltmx_foundry/configuring_voltmx_foundry_to_connect_to_ddc/#creating-credential-vault-slot-for-the-volt-mx-foundry-endpoint","title":"Creating Credential Vault Slot for the Volt MX Foundry Endpoint","text":"<p>If you chose Anonymous App Users for Operation Security Level, you must store the App Key and App Secret in Digital Experience by using the Credential Vault. Perform the following steps:</p> <ol> <li> <p>Get the values for App Key and App Secret. </p> <ol> <li>In Volt MX Foundry, go to Apps.</li> <li>Select the App you created.</li> <li>Go to the Publish tab and then click the App Key icon. A dialog box appears.</li> </ol> <p></p> </li> <li> <p>In the App Key window, hover over the Key and Secret values. Upon hovering, a Copy button should appear. Click the Copy button.</p> <p></p> </li> <li> <p>Store the App Key and App Secret values in Digital Experience. Go to Practitioner Studio &gt; Administration:</p> <p></p> </li> <li> <p>On the Administration page, click Security &gt; Credential Vault. The Credential Vault management portlet appears. </p> <p></p> </li> <li> <p>Select Add a Vault slot. The window for creating a vault slot appears.</p> <ol> <li>Add a Name for your vault slot. Provide a unique name because this becomes the slot identifier (slot ID).</li> <li>Select the Vault Resource  and Vault Segment. </li> <li>Check the Vault slot is shared box.</li> <li>In the Shared userID field, enter the App Key.</li> <li>In the Shared password field, enter the App Secret. </li> <li>Click OK to save the changes. There should be a message that the vault slot was created successfully.</li> </ol> <p></p> </li> </ol>"},{"location":"deploy_dx/manage/cfg_dx_compose/integrate_ddc/integrating_voltmx_foundry/configuring_voltmx_foundry_to_connect_to_ddc/#creating-outbound-connection-policy","title":"Creating outbound connection policy","text":"<p>After creating a Credential Vault slot, you can configure an outbound connection policy.</p> <ol> <li> <p>Create an XML file on your local machine and modify it according to your needs </p> <p>You can use this sample outbound policy as a base: <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;request type=\"update\" version=\"8.0.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"ProxyConfig_1.0.0.xsd\"&gt;\n    &lt;proxy-config-data type=\"global\"&gt;\n        &lt;data action=\"create\"&gt;&lt;![CDATA[&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n\n&lt;proxy-rules xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"http://www.ibm.com/xmlns/prod/sw/http/outbound/proxy-config/2.0\"&gt;\n\n&lt;policy name=\"demo_volt_mx_foundry_service\" url=\"https://hcl-dx-dev.hclvoltmx.net/services/account/*\" basic-auth-support=\"true\" active=\"true\"&gt;\n    &lt;actions&gt;\n        &lt;!-- Step 2. Add the HTTP Method.  We will use GET or POST since this is what we defined when we created the operation of our service.--&gt;\n        &lt;method&gt;GET&lt;/method&gt;\n        &lt;method&gt;POST&lt;/method&gt;\n\n    &lt;/actions&gt;\n\n    &lt;!-- Step 3. Add the credential vault slot that we have created. The vault slot name is also the vault slot id hpaa.slotid you will need to put in the policy. --&gt;\n\n    &lt;meta-data&gt;\n        &lt;name&gt;hpaa.authtype&lt;/name&gt;\n        &lt;value&gt;http-basic&lt;/value&gt;\n    &lt;/meta-data&gt;\n    &lt;meta-data&gt;\n        &lt;name&gt;hpaa.slotid&lt;/name&gt;\n        &lt;value&gt;demo-volt-mx-foundry-service&lt;/value&gt;\n    &lt;/meta-data&gt;\n    &lt;meta-data&gt;\n        &lt;name&gt;forward-credentials-from-vault&lt;/name&gt;\n        &lt;value&gt;true&lt;/value&gt;\n    &lt;/meta-data&gt;\n&lt;/policy&gt;\n&lt;/proxy-rules&gt;]]&gt;&lt;/data&gt;\n    &lt;/proxy-config-data&gt;\n&lt;/request&gt;\n</code></pre></p> </li> <li> <p>Copy the file (for example, <code>/tmp/demo_volt_mx_foundry_service_policy.xml</code>) inside your HCL DX Compose WebEngine instance.</p> </li> <li> <p>Deploy the policy using XMLAcess: <code>./xmlaccess.sh -in /tmp/demo_volt_mx_foundry_service_policy.xml -out /tmp/demo.xml  -url http://localhost:9080/wps/config -user {userid} -pwd {password}</code></p> </li> </ol> <p>Note</p> <p>The location of <code>xmlaccess.sh</code> is based on your deployment. In a default deployment, the location would be <code>/opt/openliberty/wlp/usr/svrcfg/scripts/xmlaccess</code>.</p>"},{"location":"deploy_dx/manage/cfg_dx_compose/integrate_ddc/integrating_voltmx_foundry/configuring_voltmx_foundry_to_connect_to_ddc/#adding-the-http-outbound-proxy","title":"Adding the HTTP outbound proxy","text":"<p>Use Helm to add an outbound proxy configuration property in <code>ConfigService.properties</code>. Refer to the following steps:</p> <ol> <li> <p>Update the <code>values.yaml</code> file with the following snippet:</p> <p><pre><code>propertiesFilesOverrides:\n  ConfigService.properties:\n    wp.proxy.config.urlreplacement.digital_data_connector_policy.ddcDemo: \"https://hcl-dx-dev.hclvoltmx.net/services/account/*\"\n</code></pre> For more information on how to update or add properties using Helm, see Updating DX Compose WebEngine properties using Helm values.</p> </li> <li> <p>After updating property, perform a Helm upgrade to apply the changes.</p> </li> </ol> <p>The server is automatically restarted to pick up the changes in the properties file.</p>"},{"location":"deploy_dx/manage/cfg_webengine/","title":"Configuring WebEngine","text":"<ul> <li>WebEngine directory structure Learn about the directory structure and know the different configurations used in WebEngine.</li> <li>WebEngine server configuration Learn about the WebEngine server configuration and understand the different features, services, and libraries configured to run applications.</li> <li>DX Compose WebEngine configuration changes using overrides Learn how to update the <code>server.xml</code> properties and how to configure the DX Compose WebEngine server using <code>configOverrideFiles</code>.</li> <li>Using an external database and database transfer Learn how to connect to an external database and transfer the content of the Derby database to the external database.</li> <li>Configuring LDAP Learn how to configure a Lightweight Directory Access Protocol (LDAP) registry in HCL DX Compose.</li> <li>Updating DX properties using Helm values Learn how to use the Helm chart's <code>values.yaml</code> file to add, update, or delete DX Compose properties.</li> <li>Updating the default administrator password Learn how to update the default <code>wpsadmin</code> password.</li> <li>WCM modules Learn how to trigger WCM modules and import WCM libraries.</li> <li>Tuning the initial DX Compose performance Learn how to perform initial tuning on DX Compose before load testing.</li> <li>Configuring DX Compose to use OpenID Connect (OIDC) identity provider Learn how to use OIDC authentication in DX Compose.</li> </ul>"},{"location":"deploy_dx/manage/cfg_webengine/configuration_changes_using_overrides/","title":"DX WebEngine configuration changes using overrides","text":"<p>This guide provides detailed steps for updating the <code>server.xml</code> properties and for configuring the Digital Experience (DX) Compose server using <code>configOverrideFiles</code>.</p> <p>The snippets are merged into the Open Liberty <code>server.xml</code> file. After making changes to the respective <code>values.yaml</code> file, apply them by using the <code>helm upgrade</code> command. Open Liberty picks up and applies changes at runtime; this does not require a restart.</p>"},{"location":"deploy_dx/manage/cfg_webengine/configuration_changes_using_overrides/#configuring-users-or-user-groups","title":"Configuring users or user groups","text":"<p>The following sample snippet shows how to configure a DX WebEngine server to configure or override a user or a user group.</p> <pre><code>configOverrideFiles:\n  user-overrides.xml: |\n    &lt;server description=\"DX Web Engine server\"&gt; \n      &lt;basicRegistry id=\"basic\" realm=\"defaultWIMFileBasedRealm\"&gt; \n        &lt;user name=\"wpsadmin\" password=\"newPass\" /&gt;\n        &lt;user name=\"newuser1\" password=\"password\" /&gt;\n        &lt;group name=\"wpsadmins\" id=\"cn=wpsadmins,o=defaultWIMFileBasedRealm\"&gt;\n          &lt;member name=\"wpsadmin\" /&gt;\n        &lt;/group&gt;\n        &lt;group name=\"nonadmins\" id=\"cn=nonadmins,o=defaultWIMFileBasedRealm\"&gt;\n          &lt;member name=\"newuser1\" /&gt;\n        &lt;/group&gt;\n      &lt;/basicRegistry&gt; \n    &lt;/server&gt;\n</code></pre> <p>The name of the customization in the example (<code>user-overrides.xml</code>) can be any string. However, it is recommended that you use a name that describes the change it applies.</p> <p>To update the default administrator username and password, refer to the steps in Updating the default admin password.</p>"},{"location":"deploy_dx/manage/cfg_webengine/configuration_changes_using_overrides/#configuring-dx-compose-to-use-a-mail-server","title":"Configuring DX Compose to use a mail server","text":"<p>The following is an example snippet of configuring DX WebEngine server to use a mail server. The <code>smtphost</code> will need to be replaced with the proper hostname of the mail server. If authentication is required to communicate with the mail server then replace <code>smtpUser</code> and <code>smtpPassword</code> with the correct values, otherwise remove those lines from the snippet.</p> <pre><code>configOverrideFiles:\n  smtpOverride.xml: | \n    &lt;server description=\"DX Web Engine server\"&gt;\n      &lt;mailSession\n        id=\"dxWebEngineMail\"\n        host=\"smtphost.com\"\n        from=\"no-reply@smtphost.com\"\n        jndiName=\"mail/BuilderMailSession\"\n        description=\"DX WebEngine MailSession\"\n        mailSessionID=\"dxWebEngineMail\"\n        user=\"smtpUser\"\n        password=\"smtpPassword\"&gt;\n          &lt;property name=\"mail.smtp.auth\" value=\"false\" /&gt;\n          &lt;property name=\"mail.smtp.port\" value=\"25\" /&gt;\n      &lt;/mailSession&gt;\n    &lt;/server&gt;\n</code></pre> <p>The name of the customization in the example (<code>smtpOverride</code>) can be any string. However, it is recommended that you use a name that describes the change it applies.</p>"},{"location":"deploy_dx/manage/cfg_webengine/configuration_changes_using_overrides/#configuring-ssl","title":"Configuring SSL","text":"<p>The Open Liberty may not trust default certificates. By providing the following configuration setting, Open Liberty trusts the default certificates, enabling communication with third-party services.</p> <pre><code>configOverrideFiles:\n   sslOverride.xml: |\n      &lt;server description=\"DX Web Engine server\"&gt;  \n        &lt;ssl id=\"defaultSSLConfig\" trustDefaultCerts=\"true\" /&gt;\n      &lt;/server&gt;\n</code></pre> <p>The name of the customization in the example (<code>sslOverride</code>) can be any string. However, it is recommended that you use a name that describes the change it applies.</p>"},{"location":"deploy_dx/manage/cfg_webengine/configuration_changes_using_overrides/#configuring-ldap","title":"Configuring LDAP","text":"<p>The following is a sample snippet that shows how to configure the DX Compose server to use an OpenLDAP server. Replace the values for <code>baseDN</code>, <code>bindDN</code>, <code>bindPassword</code>, and <code>host</code> with the proper values.</p> <p>For custom LDAP types, use <code>customFilters</code> to define your own search filters for users and groups. For predefined LDAP types supported by Open Liberty, use <code>idsFilters</code>. If your LDAP directory uses nested groups or hierarchical structures, consider enabling <code>recursiveSearch</code> to ensure all relevant entries are retrieved. For more information, refer to the Open Liberty LDAP Registry documentation.</p> <p>The <code>attributeConfiguration</code> element in the LDAP registry configuration allows you to map LDAP attributes to user registry attributes. This is useful when the attribute names in your LDAP directory do not match the expected attribute names. Each <code>attribute</code> element specifies a mapping:</p> <ul> <li><code>name</code> - The name of the attribute in the LDAP directory</li> <li><code>propertyName</code> - The name of the attribute to be mapped to. In the following example, the LDAP <code>mail</code> attribute is mapped to <code>ibm-primaryEmail</code>, which is the attribute used to display the email address of a user. The LDAP <code>title</code> attribute is mapped to <code>ibm-jobTitle</code>, which is the attribute used to display job title of a user.</li> </ul> <pre><code>configOverrideFiles:\n  ldapOverride.xml: | \n    &lt;server description=\"DX Web Engine server\"&gt; \n      &lt;ldapRegistry id=\"ldap\" realm=\"SampleLdapIDSRealm\"\n        host=\"127.0.0.1\" port=\"1389\" ignoreCase=\"true\"\n        baseDN=\"dc=dx,dc=com\"\n        ldapType=\"Custom\"\n        sslEnabled=\"false\"\n        bindDN=\"cn=dx_user,dc=dx,dc=com\"\n        bindPassword=\"p0rtal4u\"&gt;\n          &lt;customFilters\n            userFilter=\"(&amp;amp;(uid=%v)(objectclass=inetOrgPerson))\"\n            groupFilter=\"(&amp;amp;(cn=%v)(objectclass=groupOfUniqueNames))\"\n            userIdMap=\"*:uid\"\n            groupIdMap=\"*:cn\"\n            groupMemberIdMap=\"groupOfUniqueNames:uniqueMember\"&gt;\n          &lt;/customFilters&gt;\n          &lt;attributeConfiguration&gt;\n            &lt;attribute name=\"mail\" propertyName=\"ibm-primaryEmail\" entityType=\"PersonAccount\"/&gt;\n            &lt;attribute name=\"title\" propertyName=\"ibm-jobTitle\" entityType=\"PersonAccount\"/&gt;\n          &lt;/attributeConfiguration&gt;\n      &lt;/ldapRegistry&gt;\n      &lt;federatedRepository&gt;\n        &lt;primaryRealm name=\"FederatedRealm\" allowOpIfRepoDown=\"true\"&gt;\n          &lt;participatingBaseEntry name=\"o=defaultWIMFileBasedRealm\"/&gt;\n          &lt;participatingBaseEntry name=\"dc=dx,dc=com\"/&gt;\n        &lt;/primaryRealm&gt;\n      &lt;/federatedRepository&gt;\n    &lt;/server&gt;\n</code></pre> <p>To set up a custom LDAP server in Liberty, see Configuring LDAP with Liberty.</p>"},{"location":"deploy_dx/manage/cfg_webengine/configuration_changes_using_overrides/#security-hardening","title":"Security hardening","text":""},{"location":"deploy_dx/manage/cfg_webengine/configuration_changes_using_overrides/#out-of-the-box-configuration","title":"Out-of-the-box configuration","text":"<p>Several out of the box security hardenings have been applied based on Security hardening for production(https://openliberty.io/docs/latest/reference/config/ldapRegistry.html){target=\"_blank\"}:</p> <pre><code>configOverrideFiles:\n  securityOverride1.xml: | \n    &lt;server description=\"DX Web Engine server\"&gt; \n      &lt;webAppSecurity httpOnlyCookies=\"true\" trackLoggedOutSSOCookies=\"false\"/&gt;\n      &lt;httpDispatcher enableWelcomePage=\"false\" /&gt;\n      &lt;httpOptions removeServerHeader=\"true\" /&gt;\n      &lt;httpSession invalidateOnUnauthorizedSessionRequestException=\"true\" cookieHttpOnly=\"true\"/&gt;\n    &lt;/server&gt;  \n</code></pre> <p>The <code>trackLoggedOutSSOCookies</code> setting, when enabled, ensures that if a user logs out from one browser, the same user will be required to log in again if they try to access the resource from another browser. This setting helps prevent session replay attacks by marking the LTPA cookie as invalid upon logout.</p> <p>However, enabling <code>trackLoggedOutSSOCookies</code> can impact your SSO scenarios. For example, if a user logs in from multiple browsers to the same server and logs out from one browser, they must log in again if they try to access the resource from another browser. As a result, <code>trackLoggedOutSSOCookies</code> is set to <code>false</code> by default but can be enabled for production environments.</p> <p>To allow HTTP access for developer setups with the Docker image, SSL only has not been enforced. </p> <p>For a production setup, you can apply the following as a <code>server.xml</code> override:</p> <pre><code>  configOverrideFiles:\n    securityOverride2.xml: | \n      &lt;server description=\"DX Web Engine server\"&gt; \n        &lt;webAppSecurity httpOnlyCookies=\"true\" removeServerHeader=\"true\" disableXPoweredBy=\"true\" trackLoggedOutSSOCookies=\"true\" ssoRequiresSSL=\"true\" sameSiteCookie=\"none\"/&gt;\n        &lt;httpSession invalidateOnUnauthorizedSessionRequestException=\"true\" cookieHttpOnly=\"true\" cookieSameSite=\"None\"/&gt;\n      &lt;/server&gt;\n</code></pre> <p>By default, the system is configured to trust any default certificates, which are typically included in all mainstream browsers. To change this default behavior and disable communication with third-party services, provide the following configuration setting:</p> <pre><code>  configOverrideFiles:\n    securityOverride3.xml: | \n    &lt;server description=\"DX Web Engine server\"&gt; \n      &lt;ssl id=\"defaultSSLConfig\" trustDefaultCerts=\"false\" /&gt;\n    &lt;/server&gt;\n</code></pre> <p>See Security hardening for production for more information.</p>"},{"location":"deploy_dx/manage/cfg_webengine/configuration_changes_using_overrides/#additional-configuration","title":"Additional configuration","text":"<p>You can use virtual hosts to limit the domains the server responds to. In the following example, the virtual host is configured to not respond to other hosts than <code>localhost</code> and <code>sample.hcl.com</code>:</p> <pre><code>&lt;virtualHost id=\"default_host\" allowFromEndpointRef=\"localHostOnly\"&gt;\n    &lt;hostAlias&gt;*:9080&lt;/hostAlias&gt;\n    &lt;hostAlias&gt;*:9443&lt;/hostAlias&gt;\n    &lt;hostAlias&gt;sample.hcl.com:80&lt;/hostAlias&gt;\n    &lt;hostAlias&gt;sample.hcl.com:443&lt;/hostAlias&gt;\n&lt;/virtualHost&gt;\n</code></pre>"},{"location":"deploy_dx/manage/cfg_webengine/configuration_changes_using_overrides/#disabling-authentication-cache-for-impersonation","title":"Disabling Authentication Cache for Impersonation","text":"<p>To ensure the impersonation feature works in HCL DX Compose, you must disable the authentication cache. By default, the authentication cache is enabled. Disabling the cache ensures that the impersonated user is not prompted to authenticate again.</p> <p>Note</p> <p>Disabling the authentication cache might affect performance.</p> <p>To disable the authentication cache, use the following configuration snippet in your <code>values.yaml</code> file:</p> <pre><code>configOverrideFiles:\n  authOverride.xml: | \n    &lt;server description=\"DX Web Engine server\"&gt;\n      &lt;authentication cacheEnabled=\"false\" /&gt;\n    &lt;/server&gt;\n</code></pre> <p>The name of the customization in the example (<code>authOverride</code>) can be any unique string. However, it is recommended that you use a name that describes the change it applies.</p> Related information <ul> <li>Update custom values.yaml with configOverrideFiles using HELM upgrade.</li> </ul>"},{"location":"deploy_dx/manage/cfg_webengine/configure_compose_to_use_oidc/","title":"Configuring DX Compose to use an OIDC identity provider","text":"<p>This topic provides the steps to enable an OpenID Connect (OIDC) identity provider (for example, Google, Facebook) to authenticate a user to HCL Digital Experience (DX) Compose. In this scenario, the user does not log in to DX Compose, but to an OIDC identity provider.</p> <p>Limitation</p> <p>Currently, the user authenticated to DX Compose through an external identity provider must reside in the DX Compose user registry, generally an LDAP server. These steps do not support transient users (that is, users not in the registry) at this time.</p>"},{"location":"deploy_dx/manage/cfg_webengine/configure_compose_to_use_oidc/#prerequisites","title":"Prerequisites","text":"<p>A DX Compose system administrator must create an account in the identity provider and obtain the following information:</p> <ul> <li>clientID</li> <li>clientSecret</li> <li>hostname (for the discovery endpoint URL and jwt URL)</li> <li>userIdentifier</li> </ul>"},{"location":"deploy_dx/manage/cfg_webengine/configure_compose_to_use_oidc/#enabling-oidc-authentication-in-dx-compose","title":"Enabling OIDC authentication in DX Compose","text":"<p>After securing the required information from the OpenID Connect identity provider, the administrator must make these parameters available to DX Compose.</p> <p>During DX Compose installation, there is a file named <code>oidc.yaml</code> located in the <code>charts/hcl-dx-deployment/oidc</code> subdirectory of the Kubernetes node where you ran <code>helm install</code>. An administrator must fill out the <code>oidc.yaml</code> file and use this file during a <code>helm upgrade</code> operation to integrate DX Compose to the external identity provider.</p> <p>Refer to the following steps to enable OIDC authentication in DX Compose:</p> <ol> <li> <p>Edit the <code>oidc.yaml</code> file and enter the following required parameters from the identity provider:</p> <ul> <li>clientID</li> <li>clientSecret</li> <li>hostname (for the discovery endpoint URL and jwt URL)</li> <li>userIdentifier</li> </ul> </li> <li> <p>In the <code>oidc.yaml</code> file, configure the following properties under <code>ConfigService.properties</code>:</p> <ul> <li><code>redirect.logout</code> to <code>true</code></li> <li><code>redirect.logout.ssl</code> to <code>true</code></li> <li><code>redirect.logout.url</code> to the URL to be shown to the user after logout</li> </ul> <p>This configuration forces the logout screen to the identity provider instead of the default DX Compose logout screen. This also ensures that any relevant HTTP cookies are cleared and the user is actually logged out.</p> </li> <li> <p>Run <code>helm upgrade</code> to apply the changes to DX Compose.</p> <p>Note that you must specify two file (<code>-f</code>) parameters in the <code>helm upgrade</code> command. The first <code>-f</code> is the YAML file with all DX Compose values apart from OIDC. The second <code>-f</code> is the <code>oidc.yaml</code> file. See the following sample command:</p> <pre><code>helm upgrade -n dxns -f install-deploy-values.yaml -f ./install-hcl-dx-deployment/oidc/oidc.yaml dx-deployment ./install-hcl-dx-deployment\n</code></pre> <p>For more information, see Upgrading the Helm deployment.</p> </li> </ol>"},{"location":"deploy_dx/manage/cfg_webengine/external_db_database_transfer/","title":"Using an external database and database transfer","text":"<p>By default, WebEngine comes with a local Derby database included in the image and persisted in a PersistentVolume. You can use the Derby database to test the basic functionality of HCL Digital Experience (DX) Compose in a Kubernetes deployment. This works for single-Pod deployments. However, for production environments, it is required to use an external database for better performance and scalability. This document outlines the steps to connect to an external database and transfer the content of the Derby database to the external database in HCL DX Compose deployment.</p> <p>Note</p> <p>For the currently supported external databases, refer to Limitations.</p>"},{"location":"deploy_dx/manage/cfg_webengine/external_db_database_transfer/#setup-external-database-schema-user-creation","title":"Setup external database (schema / user creation)","text":"<p>This section provides the custom scripts for setting up the external database schemas (or users).</p> Database Custom setup script DB2 DB2 custom setup script Oracle Oracle custom setup script <p>Note</p> <p>If you are using Oracle RDS, you will need to configure the database to support XA transactions. In order to support XA transactions for WebEngine, you must remove the default option group. Refer to Configure Custom Option Groups for Amazon RDS for more information.</p>"},{"location":"deploy_dx/manage/cfg_webengine/external_db_database_transfer/#configuring-an-external-database","title":"Configuring an external database","text":"<p>The external database is configured in the Helm custom <code>values.yaml</code> file. You can add the values directly to the custom values file or you can reference them from secrets to hide the plain text entries that can contain credentials.</p> <p>There are two sets of values used to configure the external database:</p> <ul> <li><code>configuration.webEngine.dbDomainProperties</code></li> <li><code>configuration.webEngine.dbTypeProperties</code></li> </ul> <p>You can use the following secrets instead of the provided values:</p> <ul> <li><code>configuration.webEngine.customDbDomainPropertiesSecret</code></li> <li><code>configuration.webEngine.customDbTypePropertiesSecret</code></li> </ul> <p>Note</p> <p>You must create the <code>customDbDomainPropertiesSecret</code> and <code>customDbTypePropertiesSecret</code> secrets before the deployment of the Helm chart. If the secrets are used, all property values set in the custom <code>values.yaml</code> file will be ignored. Therefore, all properties must be set in the secrets, not only the overridden ones.</p>"},{"location":"deploy_dx/manage/cfg_webengine/external_db_database_transfer/#external-database-configuration-in-the-custom-valuesyaml-file","title":"External database configuration in the custom <code>values.yaml</code> file","text":""},{"location":"deploy_dx/manage/cfg_webengine/external_db_database_transfer/#sample-valuesyaml-file-for-db2","title":"Sample <code>values.yaml</code> file for DB2","text":"<p>Note</p> <p>With DX Compose 9.5 CF226 the location of the DB2 library jar in the container is /opt/openliberty/wlp/usr/svrcfg/templates/jars/db2</p> <p>So the value for db2.DbLibrary is now /opt/openliberty/wlp/usr/svrcfg/templates/jars/db2/db2jcc4.jar</p> <p>The db2jcc_license_cu.jar is no longer provided or required.</p> <pre><code>configuration:\n  webEngine:\n    dbDomainProperties:\n      InitializeFeedbackDB: \"true\"\n      feedback.DbType: \"db2\"\n      feedback.DbName: \"WPFDBK\"\n      feedback.DbSchema: \"feedback\"\n      feedback.DataSourceName: \"wpfdbkdbDS\"\n      feedback.DbUrl: \"jdbc:db2://&lt;replace-db-host&gt;:&lt;replace-db-port&gt;/WPFDBK:returnAlias=0;\"\n      feedback.DbUser: \"&lt;replace-db-user&gt;\"\n      feedback.DbPassword: \"&lt;replace-db-password&gt;\"\n      feedback.DbRuntimeUser: \"&lt;replace-db-user&gt;\"\n      feedback.DbRuntimePassword: \"&lt;replace-db-password&gt;\"\n      feedback.DBA.DbUser: \"&lt;replace-db-user&gt;\"\n      feedback.DBA.DbPassword: \"&lt;replace-db-password&gt;\"\n      feedback.DbConfigRoleName: \"WP_PZN_CONFIG_USERS\"\n      feedback.DbRuntimeRoleName: \"WP_PZN_RUNTIME_USERS\"\n      feedback.XDbName: \"WPFDBK\"\n      feedback.DbNode: \"pznNode\"\n      likeminds.DbType: \"db2\"\n      likeminds.DbName: \"WPLM\"\n      likeminds.DbSchema: \"likeminds\"\n      likeminds.DataSourceName: \"wplmdbDS\"\n      likeminds.DbUrl: \"jdbc:db2://&lt;replace-db-host&gt;:&lt;replace-db-port&gt;/WPLM:returnAlias=0;\"\n      likeminds.DbUser: \"&lt;replace-db-user&gt;\"\n      likeminds.DbPassword: \"&lt;replace-db-password&gt;\"\n      likeminds.DbRuntimeUser: \"&lt;replace-db-user&gt;\"\n      likeminds.DbRuntimePassword: \"&lt;replace-db-password&gt;\"\n      likeminds.DBA.DbUser: \"&lt;replace-db-user&gt;\"\n      likeminds.DBA.DbPassword: \"&lt;replace-db-password&gt;\"\n      likeminds.DbConfigRoleName: \"WP_PZN_CONFIG_USERS\"\n      likeminds.DbRuntimeRoleName: \"WP_PZN_RUNTIME_USERS\"\n      likeminds.XDbName: \"WPLM\"\n      likeminds.DbNode: \"pznNode\"\n      release.DbType: \"db2\"\n      release.DbName: \"WPREL\"\n      release.DbSchema: \"release\"\n      release.DataSourceName: \"wpreldbDS\"\n      release.DbUrl: \"jdbc:db2://&lt;replace-db-host&gt;:&lt;replace-db-port&gt;/WPREL:returnAlias=0;\"\n      release.DbUser: \"&lt;replace-db-user&gt;\"\n      release.DbPassword: \"&lt;replace-db-password&gt;\"\n      release.DbRuntimeUser: \"&lt;replace-db-user&gt;\"\n      release.DbRuntimePassword: \"&lt;replace-db-password&gt;\"\n      release.DBA.DbUser: \"&lt;replace-db-user&gt;\"\n      release.DBA.DbPassword: \"&lt;replace-db-password&gt;\"\n      release.DbConfigRoleName: \"WP_BASE_CONFIG_USERS\"\n      release.DbRuntimeRoleName: \"WP_BASE_RUNTIME_USERS\"\n      release.XDbName: \"WPREL\"\n      release.DbNode: \"wpsNode\"\n      community.DbType: \"db2\"\n      community.DbName: \"WPCOMM\"\n      community.DbSchema: \"community\"\n      community.DataSourceName: \"wpcommdbDS\"\n      community.DbUrl: \"jdbc:db2://&lt;replace-db-host&gt;:&lt;replace-db-port&gt;/WPCOMM:returnAlias=0;\"\n      community.DbUser: \"&lt;replace-db-user&gt;\"\n      community.DbPassword: \"&lt;replace-db-password&gt;\"\n      community.DbRuntimeUser: \"&lt;replace-db-user&gt;\"\n      community.DbRuntimePassword: \"&lt;replace-db-password&gt;\"\n      community.DBA.DbUser: \"&lt;replace-db-user&gt;\"\n      community.DBA.DbPassword: \"&lt;replace-db-password&gt;\"\n      community.DbConfigRoleName: \"WP_BASE_CONFIG_USERS\"\n      community.DbRuntimeRoleName: \"WP_BASE_RUNTIME_USERS\"\n      community.XDbName: \"WPCOMM\"\n      community.DbNode: \"wpsNode\"\n      customization.DbType: \"db2\"\n      customization.DbName: \"WPCUST\"\n      customization.DbSchema: \"customization\"\n      customization.DataSourceName: \"wpcustdbDS\"\n      customization.DbUrl: \"jdbc:db2://&lt;replace-db-host&gt;:&lt;replace-db-port&gt;/WPCUST:returnAlias=0;\"\n      customization.DbUser: \"&lt;replace-db-user&gt;\"\n      customization.DbPassword: \"&lt;replace-db-password&gt;\"\n      customization.DbRuntimeUser: \"&lt;replace-db-user&gt;\"\n      customization.DbRuntimePassword: \"&lt;replace-db-password&gt;\"\n      customization.DBA.DbUser: \"&lt;replace-db-user&gt;\"\n      customization.DBA.DbPassword: \"&lt;replace-db-password&gt;\"\n      customization.DbConfigRoleName: \"WP_BASE_CONFIG_USERS\"\n      customization.DbRuntimeRoleName: \"WP_BASE_RUNTIME_USERS\"\n      customization.XDbName: \"WPCUST\"\n      customization.DbNode: \"wpsNode\"\n      jcr.DbType: \"db2\"\n      jcr.DbName: \"WPJCR\"\n      jcr.DbSchema: \"jcr\"\n      jcr.DataSourceName: \"wpjcrdbDS\"\n      jcr.DbUrl: \"jdbc:db2://&lt;replace-db-host&gt;:&lt;replace-db-port&gt;/WPJCR:returnAlias=0;\"\n      jcr.DbUser: \"&lt;replace-db-user&gt;\"\n      jcr.DbPassword: \"&lt;replace-db-password&gt;\"\n      jcr.DbRuntimeUser: \"&lt;replace-db-user&gt;\"\n      jcr.DbRuntimePassword: \"&lt;replace-db-password&gt;\"\n      jcr.DBA.DbUser: \"&lt;replace-db-user&gt;\"\n      jcr.DBA.DbPassword: \"&lt;replace-db-password&gt;\"\n      jcr.DbConfigRoleName: \"WP_JCR_CONFIG_USERS\"\n      jcr.DbRuntimeRoleName: \"WP_JCR_RUNTIME_USERS\"\n      jcr.XDbName: \"WPJCR\"\n      jcr.DbNode: \"wpsNode\"\n    dbTypeProperties:\n      db2.DbDriver: \"com.ibm.db2.jcc.DB2Driver\"\n      db2.DbLibrary: \"/opt/openliberty/wlp/usr/svrcfg/bin/db2jcc4.jar:/opt/openliberty/wlp/usr/svrcfg/bin/db2jcc_license_cu.jar\"\n      db2.JdbcProviderName: \"wpdbJDBC_db2\"\n</code></pre>"},{"location":"deploy_dx/manage/cfg_webengine/external_db_database_transfer/#sample-valuesyaml-file-for-oracle","title":"Sample <code>values.yaml</code> file for ORACLE","text":"<pre><code>configuration:\n  webEngine:\n    dbDomainProperties:\n      InitializeFeedbackDB: \"true\"\n      feedback.DbType: \"oracle\"\n      feedback.DbName: \"WPFDBK\"\n      feedback.DbSchema: \"feedback\"\n      feedback.DataSourceName: \"wpfdbkdbDS\"\n      feedback.DbUrl: \"jdbc:oracle:thin:@//&lt;replace-db-host&gt;:&lt;replace-db-port&gt;/&lt;replace-service-name&gt;\"\n      feedback.DbUser: \"&lt;replace-db-user&gt;\"\n      feedback.DbPassword: \"&lt;replace-db-password&gt;\"\n      feedback.DbRuntimeUser: \"&lt;replace-db-user&gt;\"\n      feedback.DbRuntimePassword: \"&lt;replace-db-password&gt;\"\n      feedback.DBA.DbUser: \"&lt;replace-db-user&gt;\"\n      feedback.DBA.DbPassword: \"&lt;replace-db-password&gt;\"\n      feedback.DbConfigRoleName: \"WP_PZN_CONFIG_USERS\"\n      feedback.DbRuntimeRoleName: \"WP_PZN_RUNTIME_USERS\"\n      feedback.XDbName: \"WPFDBK\"\n      feedback.DbNode: \"pznNode\"\n      likeminds.DbType: \"oracle\"\n      likeminds.DbName: \"WPLM\"\n      likeminds.DbSchema: \"likeminds\"\n      likeminds.DataSourceName: \"wplmdbDS\"\n      likeminds.DbUrl: \"jdbc:oracle:thin:@//&lt;replace-db-host&gt;:&lt;replace-db-port&gt;/&lt;replace-service-name&gt;\"\n      likeminds.DbUser: \"&lt;replace-db-user&gt;\"\n      likeminds.DbPassword: \"&lt;replace-db-password&gt;\"\n      likeminds.DbRuntimeUser: \"&lt;replace-db-user&gt;\"\n      likeminds.DbRuntimePassword: \"&lt;replace-db-password&gt;\"\n      likeminds.DBA.DbUser: \"&lt;replace-db-user&gt;\"\n      likeminds.DBA.DbPassword: \"&lt;replace-db-password&gt;\"\n      likeminds.DbConfigRoleName: \"WP_PZN_CONFIG_USERS\"\n      likeminds.DbRuntimeRoleName: \"WP_PZN_RUNTIME_USERS\"\n      likeminds.XDbName: \"WPLM\"\n      likeminds.DbNode: \"pznNode\"\n      release.DbType: \"oracle\"\n      release.DbName: \"WPREL\"\n      release.DbSchema: \"release\"\n      release.DataSourceName: \"wpreldbDS\"\n      release.DbUrl: \"jdbc:oracle:thin:@//&lt;replace-db-host&gt;:&lt;replace-db-port&gt;/&lt;replace-service-name&gt;\"\n      release.DbUser: \"&lt;replace-db-user&gt;\"\n      release.DbPassword: \"&lt;replace-db-password&gt;\"\n      release.DbRuntimeUser: \"&lt;replace-db-user&gt;\"\n      release.DbRuntimePassword: \"&lt;replace-db-password&gt;\"\n      release.DBA.DbUser: \"&lt;replace-db-user&gt;\"\n      release.DBA.DbPassword: \"&lt;replace-db-password&gt;\"\n      release.DbConfigRoleName: \"WP_BASE_CONFIG_USERS\"\n      release.DbRuntimeRoleName: \"WP_BASE_RUNTIME_USERS\"\n      release.XDbName: \"WPREL\"\n      release.DbNode: \"wpsNode\"\n      community.DbType: \"oracle\"\n      community.DbName: \"WPCOMM\"\n      community.DbSchema: \"community\"\n      community.DataSourceName: \"wpcommdbDS\"\n      community.DbUrl: \"jdbc:oracle:thin:@//&lt;replace-db-host&gt;:&lt;replace-db-port&gt;/&lt;replace-service-name&gt;\"\n      community.DbUser: \"&lt;replace-db-user&gt;\"\n      community.DbPassword: \"&lt;replace-db-password&gt;\"\n      community.DbRuntimeUser: \"&lt;replace-db-user&gt;\"\n      community.DbRuntimePassword: \"&lt;replace-db-password&gt;\"\n      community.DBA.DbUser: \"&lt;replace-db-user&gt;\"\n      community.DBA.DbPassword: \"&lt;replace-db-password&gt;\"\n      community.DbConfigRoleName: \"WP_BASE_CONFIG_USERS\"\n      community.DbRuntimeRoleName: \"WP_BASE_RUNTIME_USERS\"\n      community.XDbName: \"WPCOMM\"\n      community.DbNode: \"wpsNode\"\n      customization.DbType: \"oracle\"\n      customization.DbName: \"WPCUST\"\n      customization.DbSchema: \"customization\"\n      customization.DataSourceName: \"wpcustdbDS\"\n      customization.DbUrl: \"jdbc:oracle:thin:@//&lt;replace-db-host&gt;:&lt;replace-db-port&gt;/&lt;replace-service-name&gt;\"\n      customization.DbUser: \"&lt;replace-db-user&gt;\"\n      customization.DbPassword: \"&lt;replace-db-password&gt;\"\n      customization.DbRuntimeUser: \"&lt;replace-db-user&gt;\"\n      customization.DbRuntimePassword: \"&lt;replace-db-password&gt;\"\n      customization.DBA.DbUser: \"&lt;replace-db-user&gt;\"\n      customization.DBA.DbPassword: \"&lt;replace-db-password&gt;\"\n      customization.DbConfigRoleName: \"WP_BASE_CONFIG_USERS\"\n      customization.DbRuntimeRoleName: \"WP_BASE_RUNTIME_USERS\"\n      customization.XDbName: \"WPCUST\"\n      customization.DbNode: \"wpsNode\"\n      jcr.DbType: \"oracle\"\n      jcr.DbName: \"WPJCR\"\n      jcr.DbSchema: \"jcr\"\n      jcr.DataSourceName: \"wpjcrdbDS\"\n      jcr.DbUrl: \"jdbc:oracle:thin:@//&lt;replace-db-host&gt;:&lt;replace-db-port&gt;/&lt;replace-service-name&gt;\"\n      jcr.DbUser: \"&lt;replace-db-user&gt;\"\n      jcr.DbPassword: \"&lt;replace-db-password&gt;\"\n      jcr.DbRuntimeUser: \"&lt;replace-db-user&gt;\"\n      jcr.DbRuntimePassword: \"&lt;replace-db-password&gt;\"\n      jcr.DBA.DbUser: \"&lt;replace-db-user&gt;\"\n      jcr.DBA.DbPassword: \"&lt;replace-db-password&gt;\"\n      jcr.DbConfigRoleName: \"WP_JCR_CONFIG_USERS\"\n      jcr.DbRuntimeRoleName: \"WP_JCR_RUNTIME_USERS\"\n      jcr.XDbName: \"WPJCR\"\n      jcr.DbNode: \"wpsNode\"\n    dbTypeProperties:\n      oracle.DbDriver: \"oracle.jdbc.driver.OracleDriver\"\n      oracle.DbLibrary: \"/opt/openliberty/wlp/usr/svrcfg/templates/jars/oracle/ojdbc11.jar:/opt/openliberty/wlp/usr/svrcfg/templates/jars/oracle/xdb6-11.2.0.4.jar\"\n      oracle.JdbcProviderName: \"wpdbJDBC_oracle\"\n</code></pre>"},{"location":"deploy_dx/manage/cfg_webengine/external_db_database_transfer/#external-database-configuration-in-the-custom-secrets-file","title":"External database configuration in the custom secrets file","text":"<pre><code>configuration:\n  webEngine:\n    customDbTypePropertiesSecret: custom-credentials-webengine-dbtype-secret\n    customDbDomainPropertiesSecret: custom-credentials-webengine-dbdomain-secret\n</code></pre> <p>Make sure to create the secrets before the deployment of the Helm chart. You must reference the secret names in the custom <code>values.yaml</code> file. To create the secrets, use the following commands:</p> <pre><code>kubectl create secret generic custom-credentials-webengine-dbtype-secret --from-file=dx_dbdomain.properties\nkubectl create secret generic custom-credentials-webengine-dbdomain-secret --from-file=dx_dbtype.properties\n</code></pre> <p>Create the properties files with the same properties as in the custom <code>values.yaml</code> file in the format <code>key=value</code>. For example:</p> <pre><code>db2.DbDriver=com.ibm.db2.jcc.DB2Driver\ndb2.DbLibrary=/opt/openliberty/wlp/usr/svrcfg/bin/db2jcc4.jar:/opt/openliberty/wlp/usr/svrcfg/bin/db2jcc_license_cu.jar\ndb2.JdbcProviderName=wpdbJDBC_db2\n</code></pre>"},{"location":"deploy_dx/manage/cfg_webengine/external_db_database_transfer/#changing-the-database-configuration","title":"Changing the database configuration","text":"<p>To change the database configuration, update the custom <code>values.yaml</code> file or the custom secrets file with the new values and do a <code>helm upgrade</code>. When the database configuration is changed, a Pod restart is triggered automatically. This also applies when a new secret is created and referenced in the custom <code>values.yaml</code> file. If an existing secret is updated, you must restart the Pods manually after the secret is updated for the changes to take effect.</p>"},{"location":"deploy_dx/manage/cfg_webengine/external_db_database_transfer/#using-the-external-database-and-triggering-the-database-transfer","title":"Using the external database and triggering the database transfer","text":"<p>The external database is used by setting the <code>configuration.webEngine.useExternalDatabase</code> property to <code>true</code> in the custom <code>values.yaml</code> file and doing a  <code>helm upgrade</code>. This triggers a database transfer when enabled for the first time. The database transfer is a one-time operation that copies the content of the Derby database to the external database.</p> <p>To drop and recreate all existing WebEngine tables in the external database when transferring the Derby data, set the <code>configuration.webEngine.dropDatabaseTables</code> property to <code>true</code> in the custom <code>values.yaml</code> file when doing the <code>helm upgrade</code> for the database transfer. WebEngine data that may exist in the external database will be lost. If you change the <code>configuration.webEngine.dropDatabaseTables</code> property to <code>true</code>, it is recommended to immediately reset it to <code>false</code> after your <code>helm upgrade</code>.  Failure to do so could lead to unexpected loss of data.</p>"},{"location":"deploy_dx/manage/cfg_webengine/external_db_database_transfer/#dbdomainproperties","title":"dbDomainProperties","text":"<p>Refer to the following table for more information about the properties you can use:</p> Property Description &lt;domain&gt;.DbType Database management software to use for the \\&lt;domain&gt; domain. &lt;domain&gt;.DbName The name of the database  to be used for this portal database domain. It must comply with your database management software requirements. This property that is combined with the properties schema name and JDBC database URL must be unique for the portal database domains release, community, customization, and JCR. &lt;domain&gt;.DbSchema The name to be used to qualify database objects of this portal database domain. It must comply with your database management software requirements. This property that is combined with the properties database name and JDBC database URL must be unique for the portal database domains release, community, customization, and JCR. &lt;domain&gt;.DataSourceName The name of the data source to be used for this portal database domain. You cannot use the reserved names releaseDS, communityDS, customizationDS, jcrDS, lmdbDS, and feedback. You can use the same name for all portal database domains that are sharing user ID, password, and JDBC database URL. &lt;domain&gt;.DbUrl The JDBC database URL to be used to connect with the database of this portal database domain. It must comply with your JDBC Driver software requirements. This property that is combined with the properties database name and schema name must be unique for the portal database domains release, community, customization, and JCR. &lt;domain&gt;.DbUser The database user ID to be used to configure the database objects of this portal database domain. It must comply with your database management software requirements. It is also used by the data source to connect with the database, unless you specify a runtime database user. &lt;domain&gt;.DbPassword The password of the database user ID used to configure the database objects of this portal database domain. It must comply with your database management software requirements. It is also used by the data source to connect with the database, unless you specify a runtime database user. &lt;domain&gt;.DbRuntimeUser The database user ID used for the data source of the portal database domain to connect with the database during day-to-day operations. It must comply with your database management software requirements. It has fewer permissions than the configuration database user (DbUser) that is used when you leave this blank. &lt;domain&gt;.DbRuntimePassword The password of the database user ID used for the data source of this portal database domain to connect with the database during day-to-day operations. It must comply with your database management software requirements. &lt;domain&gt;.DBA.DbUser The database administration user ID used for privileged database operations during database creation and setup for this portal database domain. It must comply with your database management software requirements. &lt;domain&gt;.DBA.DbPassword The password of the database administration user ID used for privileged database operations during database creation and setup for this portal database domain. It must comply with your database management software requirements. &lt;domain&gt;.DbConfigRoleName The name of the role or group for this portal database domain that includes the database permissions that are required by the configuration database user. The configuration database user configures the database objects of this portal database domain. The role or group must comply with your database management software requirements. The configuration database user must be a member of this role or group. If this role or group does not exist, create it and assign it to the release.DbUser ID. &lt;domain&gt;.DbRuntimeRoleName The name of the role or group for this portal database domain that has the database permissions that are required by the runtime database user during day-to-day operations. The role or group must comply with your database management software requirements. The runtime database user must be a member of this role or group. If this role or group does not exist, create it and assign it to the release.DbRuntimeUser ID. &lt;domain&gt;.XDbName The database alias used to create the database for this portal database domain. It must comply with your database management software requirements. &lt;domain&gt;.DbNode The name of the database node that is used to create the database for this portal database domain. It must comply with your database management software requirements. InitializeFeedbackDB Specify how to handle the Feedback database during database transfer from Derby."},{"location":"deploy_dx/manage/cfg_webengine/external_db_database_transfer/#dbtypeproperties","title":"dbTypeProperties","text":"<p>Refer to the following table for more information about the properties you can use:</p> Property Description db2.DbDriver Name of the database driver class for IBM DB2. db2.DbLibrary Path to the database driver library for IBM DB2. db2.JdbcProviderName Name of the JDBC provider for IBM DB2. oracle.DbDriver Name of the database driver class for ORACLE DB. oracle.DbLibrary Path to the database driver library for ORACLE DB. oracle.JdbcProviderName Name of the JDBC provider for ORACLE DB."},{"location":"deploy_dx/manage/cfg_webengine/ldap_configuration/","title":"Configuring LDAP","text":""},{"location":"deploy_dx/manage/cfg_webengine/ldap_configuration/#introduction","title":"Introduction","text":"<p>This guide provides instructions for configuring an (Lightweight Directory Access Protocol) LDAP registry in HCL Digital Experience (DX) Compose. This covers how to integrate an LDAP server with the WebEngine container using Helm.</p>"},{"location":"deploy_dx/manage/cfg_webengine/ldap_configuration/#ldap-configuration-in-the-valuesyaml","title":"LDAP configuration in the <code>values.yaml</code>","text":"<p>Refer to the following sample snippet to configure the DX WebEngine server to use an LDAP server.</p> <pre><code>configuration:\n  webEngine:\n    ldap: \n      host: \"ldap.example.com\"\n      port: 389\n      suffix: \"dc=example,dc=com\"\n      serverType: \"Custom\"\n      id: \"dx_ldap\"\n      type: \"other\"\n      bindUser: 'dx_user'\n      bindPassword: 'p0rtal4u'\n      customLdapSecret: \"customLdapSecret\"\n</code></pre> <p>Replace the values for the following parameters with the values of the LDAP server:</p> <ul> <li><code>host</code></li> <li><code>port</code></li> <li><code>baseDN</code></li> <li><code>bindDN</code></li> <li><code>bindPassword</code></li> </ul>"},{"location":"deploy_dx/manage/cfg_webengine/ldap_configuration/#ldap-configuration-parameters","title":"LDAP configuration parameters","text":"<p>In the sample configuration, the following parameters are used:</p> <ul> <li> <p><code>host</code>: The LDAP server hostname. Only used if LDAP type is <code>other</code>.</p> </li> <li> <p><code>port</code>: The LDAP server port. Only used if LDAP type is <code>other</code>.</p> </li> <li> <p><code>suffix</code>: Base Distinguished Name for LDAP searches (also known as <code>baseDN</code>).</p> </li> <li> <p><code>serverType</code>: The type of LDAP server. Accepts <code>Custom</code>.</p> </li> <li> <p><code>id</code>: The LDAP configuration ID. Only used if LDAP type is <code>other</code>.</p> </li> <li> <p><code>type</code>: The type determines which type of LDAP to use. Accepts <code>none</code>, <code>dx</code>, or <code>other</code>.</p> </li> <li> <p><code>none</code>: No LDAP configuration.</p> </li> <li> <p><code>dx</code>: For OpenLDAP server. You can also adjust the image version with <code>images &gt; tags &gt; openLdap</code>.</p> </li> <li> <p><code>other</code>: For other LDAP servers.</p> </li> <li> <p><code>bindUser</code>: User used to connect to LDAP. Only used if LDAP type is <code>other</code>.</p> </li> <li> <p><code>bindPassword</code>: Password used to connect to LDAP. Only used if LDAP type is <code>other</code>.</p> </li> <li> <p><code>customLdapSecret</code>: The name of the secret that contains the bind user and password. This is used to store the bind user and password in a secret. Only used if LDAP type is <code>other</code>.</p> </li> </ul> <p>Note</p> <p>Provide either <code>customLdapSecret</code> or <code>bindUser</code> and <code>bindPassword</code>. If both are provided, the LDAP Bind User and Password from the secret will be used.</p>"},{"location":"deploy_dx/manage/cfg_webengine/ldap_configuration/#creating-a-secret","title":"Creating a secret","text":"<p>To create a secret, run the following command:</p> <pre><code>kubectl create secret generic CUSTOM_SECRET_NAME --from-literal=bindUser=CUSTOM_BIND_USER --from-literal=bindPassword=CUSTOM_BIND_PASSWORD --namespace=NAME_SERVER\n</code></pre> <p>Replace <code>CUSTOM_SECRET_NAME</code>, <code>CUSTOM_BIND_USER</code>, <code>CUSTOM_BIND_PASSWORD</code>, and <code>NAME_SERVER</code> with the actual values.</p> <p>For example:</p> <pre><code>kubectl create secret generic custom-web-engine-secret --from-literal=bindUser=dx_user --from-literal=bindPassword=p0rtal4u --namespace=dxns\n</code></pre>"},{"location":"deploy_dx/manage/cfg_webengine/ldap_configuration/#ldap-configuration-using-overrides","title":"LDAP configuration using overrides","text":"<p>For information on how to configure LDAP using configuration overrides, refer to DX Compose configuration changes using overrides.</p>"},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/","title":"WebEngine server configuration","text":"<p>The configuration of the Digital Experience (DX) Compose WebEngine server is primarily defined by a mandatory file named <code>server.xml</code>. This file is important because it contains the core settings required for the server to operate correctly. The <code>server.xml</code> file must adhere to the following specifications:</p> <ul> <li> <p>XML format: The <code>server.xml</code> file must be a well-formed XML document. This means it should follow the standard XML syntax rules, such as having a single root element, properly nested tags, and correctly closed elements.</p> </li> <li> <p>Root element: The root element of the <code>server.xml</code> file must be <code>&lt;server&gt;</code>. This element serves as the container for all other configuration settings within the file.</p> </li> <li> <p>Element and attribute handling: During the processing of the <code>server.xml</code> file, the server parses and applies the configuration settings defined within the file. However, any elements or attributes that the server does not recognize or understand are ignored. This allows for flexibility in the configuration file and enables the inclusion of custom or future settings without causing errors.</p> </li> </ul> <p>In addition to the <code>server.xml</code> file, the WebEngine server configuration can include a set of optional files. These optional files can provide additional configuration settings or override specific settings defined in the <code>server.xml</code> file. However, the presence and structure of these optional files are not strictly enforced, and their usage depends on the specific requirements of the server setup.</p> <p>By adhering to these guidelines, the <code>server.xml</code> file ensures a consistent and reliable configuration for the WebEngine server, while also allowing for extensibility and customization.</p>"},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#core-features","title":"Core features","text":""},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#java-ee","title":"Java EE","text":"<p>WebEngine offers extensive support for Java Platform, Enterprise Edition (Java EE), which is a set of specifications and standards designed for developing large-scale, multi-tiered, scalable, and secure enterprise applications. Java EE provides a robust framework for building web applications, enterprise services, and distributed systems. It includes APIs for database access, messaging, web services, and more, enabling developers to create sophisticated and high-performance applications that can handle complex business logic and large user bases. With WebEngine's support for Java EE, developers can use these tools and technologies to streamline development processes, ensure application reliability, and enhance security.</p>"},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#administration-center","title":"Administration Center","text":"<p>The Administration Center is a centralized interface designed for the management and monitoring of the application server and its associated resources. This interface allows administrators to efficiently oversee server configurations, performance metrics, and other critical aspects of server management.</p> <p>One of the key features of the Administration Center is the ability to monitor the <code>server.xml</code> configuration file. This file contains essential configuration details for the server such as network settings, resource allocations, and security configurations.</p> <p>Administrators can access the <code>server.xml</code> file through the Administration Center using the following URL template:</p> <pre><code>https://&lt;domain-name&gt;/adminCenter/#explore/serverConfig/${server.config.dir}/server.xml\n</code></pre> <p>Where:</p> <ul> <li><code>&lt;domain-name&gt;</code> should be replaced with the domain name of your server.</li> <li><code>${server.config.dir}</code> is a placeholder for the directory path where the <code>server.xml</code> file is located. By navigating to this URL, administrators can view and manage the server configuration settings directly from the Administration Center, ensuring that the server operates smoothly and efficiently.</li> </ul>"},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#dx-application-extensions","title":"DX Application Extensions","text":"<p>DX Application Extensions provide a framework for extending and customizing DX applications to meet specific business requirements. This includes the ability to add new features, modify existing functionalities, and integrate with other systems. The extensions can be developed using standard programming languages and tools, and they can be deployed and managed within the DX environment.</p> <p>With DX Application Extensions, organizations can tailor their DX applications to better align with their unique business processes and requirements.</p>"},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#rest-connector","title":"REST Connector","text":"<p>The REST Connector facilitates seamless integration with external systems and services through RESTful APIs. This connector allows applications to communicate over HTTP/HTTPS using standard HTTP methods such as GET, POST, PUT, DELETE, and PATCH.</p> <p>By using REST Connector, developers can easily integrate their applications with third-party services, enabling data exchange and functionality extension without compromising security or performance.</p>"},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#database-connectivity","title":"Database connectivity","text":"<p>The server supports robust connectivity to a wide range of databases, ensuring seamless data management and retrieval. This includes support for relational databases such as MySQL, PostgreSQL, Oracle, and SQL Server, as well as NoSQL databases like MongoDB and Cassandra.</p> <p>By leveraging these features, developers and administrators can ensure efficient and secure database connectivity, enabling their applications to handle data-intensive operations with ease.</p>"},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#application-management","title":"Application management","text":""},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#web-container-settings","title":"Web Container Settings","text":"<p>The Web Container Settings manage the lifecycle of servlets and web applications within the server. This lifecycle includes the deployment, initialization, execution, and termination of web applications, ensuring they run efficiently and reliably.</p> <p>By using Web Container Settings, administrators can ensure that web applications are deployed and managed effectively, providing a stable and high-performance environment for end-users.</p>"},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#portlet-container-settings","title":"Portlet Container Settings","text":"<p>The Portlet Container Settings manage the lifecycle and execution of portlet-based applications within the server. Portlets are pluggable user interface components that are managed and displayed in a web portal. They are designed to deliver dynamic content and enhance user interaction and experience.</p> <p>By using Portlet Container Settings, administrators can ensure that portlet-based applications are efficiently managed, providing a robust and interactive user experience within the web portal.</p>"},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#enterprise-and-web-applications","title":"Enterprise and web applications","text":"<p>The server supports a wide range of enterprise and web applications, offering a flexible and extensible platform for various components such as themes, portlets, and other web elements. This capability allows developers to create and deploy sophisticated applications that can be customized and scaled according to business needs.</p> <p>By using these features, organizations can ensure that their web applications are not only visually appealing, but also highly functional, user-friendly, and provide a seamless experience for end users.</p>"},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#security-features-and-configurations","title":"Security features and configurations","text":""},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#security-features","title":"Security features","text":"<ul> <li>Application Security: This feature ensures the protection of application data and resources from unauthorized access and potential threats. It involves measures such as input validation, secure coding practices, and regular security assessments to identify and mitigate vulnerabilities.</li> <li>Transport Security: This feature secures data transmission between clients and servers, preventing eavesdropping and tampering. It typically uses protocols such as Transport Layer Security (TLS) to encrypt data in transit, ensuring confidentiality and integrity.</li> <li>LDAP Registry for Authentication: This feature provides a centralized authentication mechanism using the Lightweight Directory Access Protocol (LDAP). LDAP servers store user credentials and authentication information, allowing applications to authenticate users against a single, centralized directory.</li> <li>Federated Registry for Identity Management: This feature manages user identities across multiple systems, enabling single sign-on (SSO) and consistent identity management. Federated identity management systems use standards such as Security Assertion Markup Language (SAML) or OAuth to share authentication and authorization data across different domains.</li> <li>JAAS Login Modules for Authentication Support: This feature supports Java Authentication and Authorization Service (JAAS) for flexible and pluggable authentication. JAAS login modules allow developers to define custom authentication mechanisms, which can be easily integrated into Java applications.</li> </ul>"},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#trust-association-interceptors","title":"Trust Association Interceptors","text":"<p>Trust Association Interceptors (TAIs) provide additional authentication mechanisms beyond traditional methods, enhancing security.</p> <p>TAIs intercept requests and perform custom authentication logic before passing the request to the application. This allows for advanced security measures such as multi-factor authentication.</p>"},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#configurations","title":"Configurations","text":"<ul> <li>Keystores and Secure Sockets Layer (SSL): Ensures secure communications by managing keystores and configuring SSL. Keystores store cryptographic keys and certificates, which are used to establish secure SSL connections. Proper configuration of SSL ensures encrypted communication channels.</li> <li>User and group management: Controls user roles and administrator access, ensuring proper authorization and access control. This involves defining user roles, assigning permissions, and managing group memberships to enforce security policies and restrict access to sensitive resources.</li> <li>Authentication cache: Optimizes performance by caching authentication results, reducing the need for repeated authentication checks. An authentication cache stores the results of recent authentication attempts, allowing subsequent requests to be authenticated more quickly by reusing cached results.</li> <li>Web application security: Defines policies for securing web applications, protecting against common security threats such as cross-site scripting (XSS) and SQL injection. This includes configuring security headers, implementing input validation, and using security frameworks to enforce security policies and protect web applications from attacks.</li> </ul> <p>By implementing these security features and configurations, the system ensures robust protection of data, secure communication, and effective identity and access management.</p>"},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#data-and-transaction-mmanagement","title":"Data and transaction Mmanagement","text":""},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#data-sources-and-jndi","title":"Data sources and JNDI","text":"<p>Data sources are configured to establish and manage connections to databases. This configuration includes specifying the database type, connection URL, credentials, and other connection properties. The Java Naming and Directory Interface (JNDI) is used to reference these data sources within the application, providing a standardized way to access database connections and other resources.</p>"},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#jndi-objects-and-references","title":"JNDI objects and references","text":"<p>JNDI settings are used to define and access various naming resources within the application. These resources can include environment entries, EJB references, and resource links. By using JNDI, applications can look up and retrieve these resources at runtime, enabling dynamic configuration and resource management.</p>"},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#transaction-management","title":"Transaction management","text":"<p>Transaction management is crucial for maintaining data consistency and integrity across multiple operations. The server supports both container-managed and bean-managed transactions, allowing developers to choose the appropriate transaction management strategy for their applications. This includes support for distributed transactions, ensuring that all operations within a transaction are either committed or rolled back as a single unit.</p>"},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#persistence","title":"Persistence","text":"<p>The Java Persistence API (JPA) is used for Object-Relational Mapping (ORM) and data handling within applications. JPA provides a standardized way to map Java objects to database tables, enabling developers to interact with the database using Java objects rather than SQL queries. This abstraction simplifies data access and manipulation, while also providing features such as caching, lazy loading, and query optimization.</p> <p>By using these data and transaction management features, developers can ensure efficient and reliable data handling within their applications, while maintaining data consistency and integrity across all operations.</p>"},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#networking-and-http-endpoints","title":"Networking and HTTP endpoints","text":""},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#endpoint-configuration","title":"Endpoint configuration","text":"<p>The server supports the configuration of HTTP and HTTPS endpoints, which are essential for handling client requests and facilitating secure communication. Administrators can define multiple endpoints, specifying details such as port numbers, protocols, and security settings. This configuration ensures that the server can efficiently manage incoming and outgoing traffic, providing reliable and secure access to web applications and services.</p>"},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#local-communication","title":"Local communication","text":"<p>Local communication settings facilitate efficient internal communication between server components and services. This includes configuring inter-process communication (IPC) mechanisms and optimizing data exchange within the server environment. By streamlining local communication, the server can enhance performance and reduce latency for internal operations.</p> <p>By properly configuring networking and HTTP endpoints, as well as optimizing local communication, administrators can ensure that the server operates efficiently, securely, and reliably, providing a robust foundation for web applications and services.</p>"},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#caching","title":"Caching","text":"<p>Caching is a critical feature for enhancing the performance and scalability of web applications by reducing the load on backend systems and improving response times. The server supports both distributed caching and portlet-level caching, each serving distinct purposes:</p>"},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#distributed-caching","title":"Distributed caching","text":"<p>Distributed caching involves storing cache data across multiple nodes in a cluster, ensuring high availability and fault tolerance. This type of caching is particularly useful for large-scale applications where data consistency and quick access are crucial.</p>"},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#portlet-level-caching","title":"Portlet-level caching","text":"<p>Portlet-level caching focuses on caching data specific to individual portlets within a web portal. This type of caching is designed to enhance the performance of portlet-based applications by reducing the need to repeatedly fetch or compute data for each user request.</p> <p>By using both distributed caching and portlet-level caching, the server ensures efficient data access, reduced latency, and improved overall performance for web applications.</p>"},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#executor-services","title":"Executor Services","text":"<p>Executor Services are responsible for managing the execution of asynchronous tasks within the application. These services provide a framework for running background tasks, scheduled jobs, and concurrent processing, ensuring that tasks are executed efficiently and reliably.</p> <p>By using Executor Services, developers can efficiently manage background and concurrent tasks, ensuring that applications remain performant and responsive under varying workloads.</p>"},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#shared-libraries","title":"Shared Libraries","text":"<p>Shared Libraries provide a mechanism for applications to access and utilize reusable libraries, ensuring consistency and reducing redundancy across the server environment. These libraries typically include JAR artifacts that contain common functionalities, utilities, and dependencies required by multiple applications. Examples include JAR artifacts in dxconfig, dxcorelib, and derbylib.</p> <p>By using Shared Libraries, organizations can enhance the development, deployment, and maintenance of their applications, ensuring a more streamlined and efficient server environment.</p>"},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#logging","title":"Logging","text":"<p>Logging is an important aspect of application management because it provides insights into the application's behavior, performance, and potential issues. The server supports comprehensive logging configurations that enable administrators and developers to track errors, debug issues, and monitor application activities.</p> <p>By using these logging features, administrators can ensure effective error tracking, debugging, and monitoring of the application.</p>"},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#context-and-dependency-injection","title":"Context and Dependency Injection","text":"<p>Context and Dependency Injection (CDI) is a framework for managing object lifecycles and dependencies within Java applications. CDI simplifies the development of loosely coupled, testable, and maintainable applications by providing the following:</p> <ul> <li>Dependency injection: Automatic injection of dependencies which reduces boilerplate code and enhances modularity.</li> <li>Context management: Scoping and lifecycle management of beans which ensures proper resource allocation and cleanup.</li> </ul> <p>By utilizing CDI, developers can create more maintainable and scalable applications with reduced complexity.</p>"},{"location":"deploy_dx/manage/cfg_webengine/server_configuration/#health-and-metrics","title":"Health and metrics","text":"<p>Health and metrics monitoring is essential for maintaining the reliability and performance of applications. The server provides comprehensive configurations for health checks, metrics collection, and monitoring, including:</p> <ul> <li>Health check endpoints: Configurable endpoints that provide real-time health status of the application and its components, enabling proactive issue detection and resolution.</li> <li>Metrics collection: Collection of various metrics (for example, CPU usage, memory usage, request counts) to monitor application performance and resource utilization.</li> <li>Application monitoring: Integration with application performance monitoring (APM) tools (for example, Prometheus, Grafana) for detailed insights into application behavior and performance.</li> <li>System monitoring: Monitoring of underlying system resources to ensure optimal operation and prevent resource bottlenecks.</li> </ul> <p>By implementing these health and metrics configurations, administrators can ensure continuous monitoring and proactive management of application and system health.</p>"},{"location":"deploy_dx/manage/cfg_webengine/tune_initial_portal_performance/","title":"Tuning the initial DX Compose performance","text":"<p>This topic provides information on how to tune the initial HCL Digital Experience (DX) Compose performance before load testing. This page identifies Helm charts (YAML files) that provide initial tuning for various WebEngine production scenarios and provides the Helm command used to update those environments.</p> <p>In general, these Helm charts provide the tunings for the WebEngine container. You must immediately apply the tunings provided before modifying the settings for a specific environment which contains custom themes, skins, and pages. For more information, refer to Tune your environment topic. The Performance Tuning Guide was created for DX running on WebSphere Application Server, either standalone or running in Kubernetes. However, most settings in the guide are valid for running in DX Compose as well.</p> <p>Note that you can only determine the most appropriate settings after any changes or additions to DX Compose are complete. These changes include all new themes, skins, and pages to be added. After applying the changes, you can determine the optimal settings after simulating a test load against the augmented DX Compose environment.</p> <p>To know if the settings are optimal, there should be no errors in <code>SystemOut.log</code>, <code>console.log</code> and <code>trace.log</code>. DX Compose is a Java-based software and in Java, any errors in the logs from commonly used themes can serialize page rendering, which slows down performance.</p>"},{"location":"deploy_dx/manage/cfg_webengine/tune_initial_portal_performance/#helm-charts-for-initial-tuning","title":"Helm charts for initial tuning","text":"<p>The following files are used to initially tune DX Compose WebEngine. They are located in the <code>hcl-dx-deployment/performance</code> directory of a Kubernetes deployment:</p> <ul> <li><code>webengine-performance-rendering.yaml</code></li> <li><code>webengine-performance-authoring.yaml</code></li> </ul>"},{"location":"deploy_dx/manage/cfg_webengine/tune_initial_portal_performance/#production-rendering-environment","title":"Production-rendering environment","text":"<p>The file <code>webengine-performance-rendering.yaml</code> contains the recommended initial tuning for a production-rendering environment. The term rendering implies an environment where Web Content Manager (WCM) is heavily cached to provide optimal page-rendering performance. Changes to the content may not be readily available because content might be cached. This environment is geared to rendering production content to users as responsively as possible.</p> <p>It is expected that WCM content is syndicated to this rendering environment, generally from a WCM authoring server. A separate authoring environment should be available to generate content, including new DX Compose pages, which will be available to users of the site on the rendering environment after syndication occurs.</p> <p>See the content of the <code>webengine-performance-rendering.yaml</code> file.</p> <pre><code>configuration:\n  webEngine:\n    configOverrideFiles:\n      derbyMaxConnections.xml: |\n        &lt;server description=\"DX Web Engine server\"&gt;\n          &lt;!-- This setting is for Derby; if you transfer the database to DB2 you likely need to change this setting to use a higher maxPoolSize; say 300\" --&gt;\n          &lt;!-- The dataSource id likely needs to be changed as well --&gt;\n          &lt;dataSource id=\"DefaultDataSource\" jndiName=\"jdbc/wpdbDS\" statementCacheSize=\"10\" isolationLevel=\"TRANSACTION_READ_COMMITTED\"&gt;\n            &lt;jdbcDriver libraryRef=\"derbyLib\" /&gt;\n            &lt;properties.derby.embedded connectionAttributes=\"upgrade=true\" createDatabase=\"false\" databaseName=\"resources/wpsdb\" shutdownDatabase=\"false\" /&gt;\n            &lt;connectionManager agedTimeout=\"7200\" connectionTimeout=\"180\" maxIdleTime=\"1800\" maxPoolSize=\"100\" minPoolSize=\"10\" purgePolicy=\"EntirePool\" reapTime=\"180\" /&gt;\n          &lt;/dataSource&gt;\n          &lt;/server&gt;\n      WCMDynacachesPerformance.xml: |\n        &lt;server description=\"DX Web Engine server\"&gt;\n              &lt;distributedMap id=\"services/cache/iwk/abspath\" memorySizeInEntries=\"32000\"&gt;&lt;/distributedMap&gt;\n              &lt;distributedMap id=\"services/cache/iwk/abspathreverse\" memorySizeInEntries=\"32000\"&gt;&lt;/distributedMap&gt;\n              &lt;distributedMap id=\"services/cache/iwk/processing\" memorySizeInEntries=\"10000\"&gt;&lt;/distributedMap&gt;\n              &lt;distributedMap id=\"services/cache/iwk/session\" memorySizeInEntries=\"6000\"&gt;&lt;/distributedMap&gt;\n              &lt;distributedMap id=\"services/cache/iwk/strategy\" memorySizeInEntries=\"32000\"&gt;&lt;/distributedMap&gt;\n              &lt;distributedMap id=\"services/cache/iwk/summary\" memorySizeInEntries=\"4000\"&gt;&lt;/distributedMap&gt;\n        &lt;/server&gt;\n    propertiesFilesOverrides:\n      WCMConfigService.properties:\n        connect.moduleconfig.ajpe.contentcache.defaultcontentcache: \"SECURE\"\n        connect.moduleconfig.ajpe.contentcache.contentcacheexpires: \"REL 2H\"\n        user.cache.enable: \"true\"\n        versioningStrategy.Default: \"manual\"\n        versioningStrategy.AuthoringTemplate: \"manual\"\n        versioningStrategy.Component: \"manual\"\n        versioningStrategy.Content: \"manual\"\n        versioningStrategy.PresentationTemplate: \"manual\"\n        versioningStrategy.SiteArea: \"manual\"\n        versioningStrategy.PortalPage: \"manual\"\n        versioningStrategy.Taxonomy: \"manual\"\n        versioningStrategy.Workflow: \"manual\"\n        deployment.subscriberOnly: \"true\"\n      CacheManagerService.properties:\n        cacheinstance.com.ibm.wps.ac.AccessControlUserContextCache.size: \"8403\"\n        cacheinstance.com.ibm.wps.model.factory.UserSpecificModelCache.size: \"8403\"\n      ConfigService.properties:\n        timeout.resume.session: \"true\"\n        persistent.session.level: \"0\"\n        record.lastlogin: \"false\"\n        content.topology.dynamic: \"false\"\n        friendly.enabled: \"true\"\n        friendly.pathinfo.enabled: \"true\"\n        cache.dynamic.content.spot: \"false\"\n        resourceaggregation.cache.markup: \"true\"\n        resourceaggregation.enableRuntimePortletCapabilitiesFilter: \"false\"\n      PumaStoreService.properties:\n        store.puma_default.disableACforRead: \"true\"\n      CPConfigurationService.properties:\n        com.ibm.wps.cp.tagging.isTaggingEnabled: \"false\"\n        com.ibm.wps.cp.rating.isRatingEnabled: \"false\"\n      CommonComponentConfigService.properties:\n        cc.multipart.enabled: \"false\"\n        cc.multipart.correlatehosts: \"false\"\n      NavigatorService.properties:\n        public.expires: \"3600\"\n        public.reload: \"3600\"\n        remote.cache.expiration: \"28800\"\n      RegistryService.properties:\n        default.interval: \"28800\"\n        bucket.transformationapp: \"28800\"\n        bucket.transformation.int: \"28800\"\n      AccessControlDataManagementService.properties:\n        accessControlDataManagement.acucIgnoreResourceTypes: \"null\"\n        accessControlDataManagement.loadRolesParentBased: \"false\"\nenvironment:\n  pod:\n    webEngine:\n    - name: JVM_ARGS\n      value: \"-Xmx3548m -Xms3548m -Xmn1024m -XX:MaxDirectMemorySize=256000000\"\n</code></pre>"},{"location":"deploy_dx/manage/cfg_webengine/tune_initial_portal_performance/#production-authoring-environment","title":"Production-authoring environment","text":"<p>The file <code>webengine-performance-authoring.yaml</code> contains the recommended initial tuning for an environment where content authors create, delete, and edit content. The production-authoring environment is where new pages would be made available to users through syndication to the rendering environments.</p> <p>There should be minimal to no caching in this environment. This facilitates an optimal editing experience for content authoring as changes become immediately visible.  </p> <p>See the content of the <code>webengine-performance-authoring.yaml</code> file.</p> <pre><code>configuration:\n  webEngine:\n    configOverrideFiles:\n      derbyMaxConnections.xml: |\n        &lt;server description=\"DX Web Engine server\"&gt;\n          &lt;!-- This setting is for Derby; if you transfer the database to DB2 you likely need to change this setting to use a higher maxPoolSize; say 300\" --&gt;\n          &lt;!-- The dataSource id likely needs to be changed as well --&gt;\n          &lt;dataSource id=\"DefaultDataSource\" jndiName=\"jdbc/wpdbDS\" statementCacheSize=\"10\" isolationLevel=\"TRANSACTION_READ_COMMITTED\"&gt;\n            &lt;jdbcDriver libraryRef=\"derbyLib\" /&gt;\n            &lt;properties.derby.embedded connectionAttributes=\"upgrade=true\" createDatabase=\"false\" databaseName=\"resources/wpsdb\" shutdownDatabase=\"false\" /&gt;\n            &lt;connectionManager agedTimeout=\"7200\" connectionTimeout=\"180\" maxIdleTime=\"1800\" maxPoolSize=\"100\" minPoolSize=\"10\" purgePolicy=\"EntirePool\" reapTime=\"180\" /&gt;\n          &lt;/dataSource&gt;\n          &lt;/server&gt;\n      WCMDynacachesPerformance.xml: |\n        &lt;server description=\"DX Web Engine server\"&gt;\n              &lt;distributedMap id=\"services/cache/iwk/abspath\" memorySizeInEntries=\"8000\"&gt;&lt;/distributedMap&gt;\n              &lt;distributedMap id=\"services/cache/iwk/abspathreverse\" memorySizeInEntries=\"8000\"&gt;&lt;/distributedMap&gt;\n              &lt;distributedMap id=\"services/cache/iwk/processing\" memorySizeInEntries=\"10000\"&gt;&lt;/distributedMap&gt;\n              &lt;distributedMap id=\"services/cache/iwk/session\" memorySizeInEntries=\"6000\"&gt;&lt;/distributedMap&gt;\n              &lt;distributedMap id=\"services/cache/iwk/strategy\" memorySizeInEntries=\"8000\"&gt;&lt;/distributedMap&gt;\n              &lt;distributedMap id=\"services/cache/iwk/summary\" memorySizeInEntries=\"2000\"&gt;&lt;/distributedMap&gt;\n        &lt;/server&gt;\n    propertiesFilesOverrides:\n      WCMConfigService.properties:\n        user.cache.enable: \"true\"\n        versioningStrategy.Default: \"always\"\n        versioningStrategy.AuthoringTemplate: \"always\"\n        versioningStrategy.Component: \"always\"\n        versioningStrategy.Content: \"always\"\n        versioningStrategy.PresentationTemplate: \"always\"\n        versioningStrategy.SiteArea: \"always\"\n        versioningStrategy.PortalPage: \"always\"\n        versioningStrategy.Taxonomy: \"always\"\n        versioningStrategy.Workflow: \"always\"\n        deployment.subscriberOnly: \"false\"\n      CacheManagerService.properties:\n        cacheinstance.com.ibm.wps.ac.AccessControlUserContextCache.size: \"8403\"\n        cacheinstance.com.ibm.wps.model.factory.UserSpecificModelCache.size: \"8403\"\n      ConfigService.properties:\n        timeout.resume.session: \"true\"\n        persistent.session.level: \"0\"\n        record.lastlogin: \"false\"\n        content.topology.dynamic: \"false\"\n        friendly.enabled: \"true\"\n        friendly.pathinfo.enabled: \"true\"\n        cache.dynamic.content.spot: \"false\"\n        resourceaggregation.cache.markup: \"true\"\n        resourceaggregation.enableRuntimePortletCapabilitiesFilter: \"false\"\n      PumaStoreService.properties:\n        store.puma_default.disableACforRead: \"true\"\n      CPConfigurationService.properties:\n        com.ibm.wps.cp.tagging.isTaggingEnabled: \"false\"\n        com.ibm.wps.cp.rating.isRatingEnabled: \"false\"\n      CommonComponentConfigService.properties:\n        cc.multipart.enabled: \"false\"\n        cc.multipart.correlatehosts: \"false\"\n      NavigatorService.properties:\n        public.expires: \"3600\"\n        public.reload: \"3600\"\n        remote.cache.expiration: \"28800\"\n      RegistryService.properties:\n        default.interval: \"28800\"\n        bucket.transformationapp: \"28800\"\n        bucket.transformation.int: \"28800\"\n      AccessControlDataManagementService.properties:\n        accessControlDataManagement.acucIgnoreResourceTypes: \"null\"\n        accessControlDataManagement.loadRolesParentBased: \"true\"\n\nenvironment:\n  pod:\n    webEngine:\n    - name: JVM_ARGS\n      value: \"-Xmx3548m -Xms3548m -Xmn1024m -XX:MaxDirectMemorySize=256000000\"\n</code></pre>"},{"location":"deploy_dx/manage/cfg_webengine/tune_initial_portal_performance/#tuning-for-developers","title":"Tuning for developers","text":"<p>No specific initial tuning file is available for developers. It is expected that developers use Docker Compose instead of Kubernetes; Helm charts are not available in Docker Compose. If a tuning file is needed for developers, the shipped DX Compose image should be sufficient. If not, developers can modify the shipped DX Compose image to be applicable to their needs using <code>docker commit</code> or a Dockerfile.</p>"},{"location":"deploy_dx/manage/cfg_webengine/tune_initial_portal_performance/#applying-the-helm-chart-settings","title":"Applying the Helm chart settings","text":"<p>The Helm charts for performance listed in Helm charts for initial tuning are insufficient for a Helm update. When updating, you must always use any of the performance Helm charts together with the Helm chart for non-performance changes.</p> <p>See the following sample command:</p> <pre><code>helm upgrade -n dxns -f install-deploy-values.yaml -f ./install-hcl-dx-deployment/performance/webengine-performance-rendering.yaml dx-deployment ./install-hcl-dx-deployment\n</code></pre> <p>In this sample command, the first <code>-f</code> for <code>install-deploy-values.yaml</code> refers to the Helm chart for non-performance changes. The second <code>-f</code> for <code>webengine-performance-rendering.yaml</code> is the Helm chart for performance changes specifically for the initial tunings of a rendering environment.</p>"},{"location":"deploy_dx/manage/cfg_webengine/tune_initial_portal_performance/#updating-the-size-of-datasources","title":"Updating the size of <code>dataSources</code>","text":"<p>During <code>helm upgrade</code>, there is no automated method to find and update the minimum and maximum size of the <code>dataSources</code> in <code>server.xml</code>. You must manually update the datasources to the correct size. To update the minimum and maximum size, wait until Kubernetes restarts the pod after a <code>helm upgrade</code> and do the following steps:</p> <ol> <li> <p>In the performance YAML file (<code>webengine-performance-rendering.yaml</code> or <code>webengine-performance-authoring.yaml</code>), incrementally adjust the <code>dataSource</code> sizes until the performance is optimal.</p> <p>You might have to run the load testing multiple times to determine the right size.</p> </li> <li> <p>Perform a <code>helm upgrade</code> every time you modify the <code>dataSource</code> sizes to apply the changes.</p> <p>The WebEngine pods pick up the new sizes automatically after the <code>helm upgrade</code> without restarting.</p> </li> </ol>"},{"location":"deploy_dx/manage/cfg_webengine/update_properties_with_helm/","title":"Updating DX Compose WebEngine properties using Helm values","text":"<p>This topic provides steps on how to use the Helm chart's <code>values.yaml</code> file to add, update, or delete Digital Experience (DX) Compose properties. The <code>values.yaml</code> file contains the default values for the properties used during the deployment of the Helm chart. You can override these default values by updating the <code>values.yaml</code> file.</p>"},{"location":"deploy_dx/manage/cfg_webengine/update_properties_with_helm/#overriding-default-values-in-valuesyaml","title":"Overriding default values in <code>values.yaml</code>","text":"<p>To override the default values for the properties used during the deployment of the Helm chart, add the <code>propertiesFilesOverrides</code> section in the <code>values.yaml</code> file.</p> <p>See the sample format for <code>propertiesFilesOverrides</code>:</p> <pre><code>configuration:\n  webEngine:\n    propertiesFilesOverrides: \n      &lt;propertiesFileName&gt;: \n          &lt;propertyKey&gt;: &lt;propertyValue&gt;\n</code></pre> <p>For the description of each parameter value, refer to the following list:</p> <ul> <li><code>propertiesFileName</code>: Name of the properties file that you want to update.</li> <li><code>propertyKey</code>: Key of the property that you want to update.</li> <li><code>propertyValue</code>: Value that you want to set for the property.</li> </ul>"},{"location":"deploy_dx/manage/cfg_webengine/update_properties_with_helm/#updating-and-adding-properties-to-a-properties-file","title":"Updating and adding properties to a properties file","text":"<p>With key-value pairs under the properties file name, the properties will be updated, and if not present, will be added to the properties file. Refer to the following sample values for each parameter in <code>propertiesFilesOverrides</code>:</p> <ul> <li><code>propertiesFileName</code>: <code>ConfigService.properties</code></li> <li><code>propertyKey</code>: <code>uri.context.path</code></li> <li><code>propertyValue</code>: <code>\"/wps/mycontenthandler\"</code></li> </ul> <p>See the following sample configuration:</p> <pre><code>configuration:\n  webEngine:\n    propertiesFilesOverrides: \n      FeedbackService.properties:\n        feedbackRecordCachePriority: \"1\"\n        newProperty: \"test\"\n        logBufferSize: \"5001\"\n      RegistryService.properties:\n        default.interval: '1900'\n        newVal: 'test'\n      ConfigService.properties:\n        uri.context.path: \"/wps/mycontenthandler\"\n        uri.poc.protected: \"/mypoc\"\n</code></pre>"},{"location":"deploy_dx/manage/cfg_webengine/update_properties_with_helm/#disabling-properties-from-a-properties-file","title":"Disabling properties from a properties file","text":"<p>To disable properties, use the <code>propertiesDisable</code> section. <code>propertiesDisable</code> follows a similar key-value pair format as <code>propertiesFilesOverrides</code>. The key represents the property you want to disable from the properties file, and the value can be any string or you can leave it empty (\"\").</p> <p>See the following sample:</p> <pre><code>configuration:\n  webEngine:\n    propertiesDisable:\n      FeedbackService.properties: \n        feedbackRecordCachePriority: \"\"\n        logBufferSize: \"\"\n</code></pre> <p>You can update, delete, or add multiple properties under the same properties file. You can also use multiple properties files.</p>"},{"location":"deploy_dx/manage/cfg_webengine/update_properties_with_helm/#updating-properties-with-helm-values","title":"Updating properties with Helm values","text":""},{"location":"deploy_dx/manage/cfg_webengine/update_properties_with_helm/#updating-the-valuesyaml-file","title":"Updating the <code>values.yaml</code> file","text":"<ol> <li> <p>Add the properties you want to override or delete using the <code>propertiesFilesOverrides</code> section or <code>propertiesDisable</code> section, respectively.</p> </li> <li> <p>After updating or disabling properties, perform a Helm upgrade to apply the changes.</p> </li> </ol>"},{"location":"deploy_dx/manage/cfg_webengine/update_properties_with_helm/#restarting-the-server","title":"Restarting the server","text":"<p>The server is automatically restarted to pick up properties file changes.</p> <p>Note</p> <p>The properties file changes are not persistent and will be lost after being removed from the <code>propertiesFilesOverrides</code> section of the <code>values.yaml</code> file.</p>"},{"location":"deploy_dx/manage/cfg_webengine/update_wpsadmin_password/","title":"Updating the default administrator password","text":"<p>This topic provides the steps for updating the default administrator (wpsadmin) password.</p> <p>Limitation</p> <p>It is not possible to change the <code>wpsadmin</code> username at this time. However, you can update the <code>wpsadmin</code> password.</p> <p>To update the default administrator password, refer to the following steps:</p> <ol> <li> <p>Create a secret with the new administrator password using the following command:</p> <pre><code>kubectl create secret generic CUSTOM_SECRET_NAME --from-literal=username=wpsadmin --from-literal=password=CUSTOM_ADMIN_PASSWORD --namespace=&lt;NAMESPACE&gt;\n</code></pre> <p>Replace the values for the following:  - <code>CUSTOM_SECRET_NAME</code> with the name of the secret. - <code>CUSTOM_ADMIN_PASSWORD</code> with the new administrator password.</p> </li> <li> <p>Update the <code>values.yaml</code> file with the secret name. See the following sample:</p> <pre><code>security:\n  webEngine:\n    webEngineUser: \"wpsadmin\"\n    webEnginePassword: \"WEB_ENGINE_PASSWORD\"\n    customWebEngineSecret: \"CUSTOM_SECRET_NAME\"\n</code></pre> <ul> <li> <p>Replace <code>CUSTOM_SECRET_NAME</code> with the name of the secret created in Step 1.</p> </li> <li> <p>Replace <code>WEB_ENGINE_PASSWORD</code> with the new administrator password.</p> </li> <li> <p>Make sure to either provide a <code>customWebEngineSecret</code> or a <code>webEngineUser</code> and <code>webEnginePassword</code>.</p> </li> </ul> </li> <li> <p>Do a Helm upgrade.</p> </li> <li> <p>Restart the server to apply the updated password.</p> </li> </ol> <p>For adding other administrators and users with no administrator access, see configOverrideFiles.</p>"},{"location":"deploy_dx/manage/cfg_webengine/wcm_modules/","title":"WCM modules","text":"<p>This topic provides the commands for starting Web Content Manager (WCM) modules and importing WCM libraries in DX Compose.</p> <p>When running Digital Experience (DX) Core on WebSphere Application Server (WAS), WCM modules such as workflow checker, importing or exporting libraries, member fixer, and others would be triggered through the ConfigEngine as documented in Exporting and importing web content libraries.</p> <p>In DX Compose, you can start WCM modules using HTTP -- through a browser, postman, or other tools. For example, the previous command in Core on WAS was:</p> <pre><code>./ConfigEngine.sh export-wcm-data -DWasPassword=password -DPortalAdminPwd=password -Dexport.directory=/opt/HCL/wp_profile/export -Dexport.libraryname=\"Web Content\"\n</code></pre> <p>For DX Compose, the new command is:</p> <pre><code>https://myserver.hcl.com/wps/wcm/myconnect?MOD=data&amp;processLibraries=false&amp;taskType=export&amp;exportLibrary=Web+Content&amp;output.dir=%2Fopt%2FHCL%2Fwp_profile%2Fexport\n</code></pre> <p>You must log in first to HCL DX or WCM in the same browser before running the command.</p> <p>The browser command might time out for long-running calls. It is recommended to connect to the container and run <code>wget</code> or <code>curl</code> with the URL after logging in.</p>"},{"location":"deploy_dx/manage/cfg_webengine/wcm_modules/#importing-wcm-libraries","title":"Importing WCM libraries","text":"<p>To import WCM libraries, ensure that the file is copied into the WebEngine container (for example, <code>/opt/openliberty/test</code>). </p> <p>The command would be similar to the following:</p> <pre><code>https://myserver.hcl.com/wps/wcm/myconnect?MOD=data&amp;processLibraries=false&amp;taskType=import&amp;input.dir=\"/opt/openliberty/test\"&amp;skipScheduleActions=false&amp;renameConflict=false&amp;importLibrary=importLibrary\n</code></pre>"},{"location":"deploy_dx/manage/cfg_webengine/webengine_directory_structure/","title":"WebEngine directory structure","text":"<p>This topic provides the directory structure within the WebEngine container and its associated sidecar container for logs. This includes paths to various configuration files, logs, and other critical directories.</p>"},{"location":"deploy_dx/manage/cfg_webengine/webengine_directory_structure/#webengine-container","title":"WebEngine container","text":""},{"location":"deploy_dx/manage/cfg_webengine/webengine_directory_structure/#webengine-server-path","title":"WebEngine server path","text":"<p>The root directory for the WebEngine server is located at: <pre><code>/opt/openliberty/wlp\n</code></pre></p>"},{"location":"deploy_dx/manage/cfg_webengine/webengine_directory_structure/#server-configuration-files-path","title":"Server configuration files path","text":"<p>Configuration files for the WebEngine server, such as <code>server.xml</code>, <code>jvm.options</code>, <code>server.env</code>, are stored in the following directory:</p> <pre><code>/opt/openliberty/wlp/usr/servers/defaultServer/\n</code></pre>"},{"location":"deploy_dx/manage/cfg_webengine/webengine_directory_structure/#log-folder","title":"Log folder","text":"<p>Log files for tracing and informational purposes are stored in the following directory: <pre><code>/opt/openliberty/wlp/usr/servers/defaultServer/logs/\n</code></pre></p>"},{"location":"deploy_dx/manage/cfg_webengine/webengine_directory_structure/#customization","title":"Customization","text":"<p>You can store custom configuration files in the following directory: <pre><code>/opt/openliberty/wlp/usr/servers/defaultServer/customization\n</code></pre></p>"},{"location":"deploy_dx/manage/cfg_webengine/webengine_directory_structure/#configuration-overrides","title":"Configuration overrides","text":"<p>You can store configuration override files in the following directory:  <pre><code>/opt/openliberty/wlp/usr/servers/defaultServer/configDropins/overrides\n</code></pre></p> <p>For more details, refer to DX WebEngine configuration changes using overrides.</p>"},{"location":"deploy_dx/manage/cfg_webengine/webengine_directory_structure/#properties-overrides","title":"Properties overrides","text":"<p>You can store the override files for properties in the following directory:</p> <pre><code>/opt/openliberty/wlp/usr/servers/defaultServer/properties-overrides\n</code></pre>"},{"location":"deploy_dx/manage/cfg_webengine/webengine_directory_structure/#properties","title":"Properties","text":"<p>Service configuration properties are stored in the following directory: <pre><code>/opt/openliberty/wlp/usr/servers/defaultServer/resources/dxconfig/config/services\n</code></pre></p>"},{"location":"deploy_dx/manage/cfg_webengine/webengine_directory_structure/#database-properties","title":"Database properties","text":"<p>Database properties are stored in the following directory: <pre><code>/opt/openliberty/wlp/usr/svrcfg/properties/\n</code></pre></p>"},{"location":"deploy_dx/manage/cfg_webengine/webengine_directory_structure/#custom-secrets","title":"Custom secrets","text":"<p>Custom secrets are stored in subfolders under the following directory:</p> <pre><code>/mnt/customSecrets/\n</code></pre> <p>For more details, refer to Using custom secrets in WebEngine.</p>"},{"location":"deploy_dx/manage/cfg_webengine/webengine_directory_structure/#custom-certificates","title":"Custom certificates","text":"<p>Custom certificates are stored in subfolders under the following directory:</p> <pre><code>/mnt/certs\n</code></pre> <p>For more details, refer to Using custom Certificates in WebEngine.</p>"},{"location":"deploy_dx/manage/cfg_webengine/webengine_directory_structure/#sidecar-container-for-logs","title":"Sidecar container for logs","text":""},{"location":"deploy_dx/manage/cfg_webengine/webengine_directory_structure/#systemout-log","title":"SystemOut log","text":"<p>The main log file for system output is located in the following directory: <pre><code>/var/logs/SystemOut.log\n</code></pre></p>"},{"location":"deploy_dx/manage/cfg_webengine/webengine_directory_structure/#trace-log","title":"Trace log","text":"<p>The trace log file is located in the following directory: <pre><code>/var/logs/trace.log\n</code></pre></p> <p>This structure ensures that all configuration files, logs, and custom settings are organized accessible within the WebEngine and its sidecar container.</p>"},{"location":"deploy_dx/manage/working_with_compose/","title":"Working with DX Compose","text":"<ul> <li>Changing the DX Compose WebEngine URL Learn how to change the WebEngine context root, home, and personalized home values in your DX Compose deployment.</li> <li>Managing outbound connections (Ajax Proxy) Learn a different technique that you should use to manage outbound connections with WebEngine. </li> <li>Managing users and groups Learn how to configure users and groups in DX Compose.</li> <li>Monitoring the WebEngine Deployment Learn how to use metrics to monitor activity and performance of the DX WebEngine container.</li> <li>Restarting the WebEngine server Learn how to restart the WebEngine server.</li> <li>Staging to production Learn how to stage one WebEngine instance to another.</li> <li>Supported DXClient operations Learn the supported DXClient operations in DX Compose. </li> <li>Troubleshooting DX Compose Learn how to resolve issues in your DX Compose deployment.</li> <li>Using custom secrets Learn how to use custom secrets through the <code>values.yaml</code> file. </li> <li>Upgrading the Helm deployment Learn how to upgrade the Helm deployment using the updated <code>values.yaml</code> file.</li> <li>Viewing WebEngine server logs Learn how to view the WebEngine server logs through Kubernetes.</li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/change_context_root_or_home/","title":"Changing the WebEngine context root or home URI","text":"<p>HCL Digital Experience (DX) Compose consists of multiple applications and services that can be deployed. Depending on your needs, you can change the default WebEngine context root of the Uniform Resource Locator (URL) and the Uniform Resource Identifier (URI) any time after you install HCL DX Compose to better suit the requirements of your organization. Note that <code>/wps/portal</code> and <code>/wps/myportal</code> are the default WebEngine server values where:</p> <ul> <li><code>wps</code> is the default context root.</li> <li><code>portal</code> is the default home value.</li> <li><code>myportal</code> is the default personalized home value.</li> </ul> <p>To change the WebEngine URL or URI in Kubernetes deployments, adjust the <code>custom-values.yaml</code> file used for your Helm deployment. For more information, see Custom value files</p> <p>Note</p> <p>Configuration changes to Helm-based deployments using methods outside of running <code>helm upgrade</code> will not persist through image upgrades or pod restarts.</p>"},{"location":"deploy_dx/manage/working_with_compose/change_context_root_or_home/#changing-the-url-context-root-using-helm","title":"Changing the URL context root using Helm","text":"<p>To change the WebEngine context root in a Helm-based deployment:</p> <ol> <li> <p>Update the <code>networking.webengine.contextRoot</code> value in the <code>custom-values.yaml</code> file to your desired context root.</p> <pre><code># Networking configuration specific to webEngine\nwebEngine:\n  # Host of webEngine, must be specified as a FQDN\n  host: \"\"\n  # Port of webEngine\n  port:\n  # Setting if SSL is enabled for webEngine\n  ssl: true\n  # webEngine Context root, only alter if your deployment already uses a non default context route\n  contextRoot: \"myContextRoot\"\n</code></pre> </li> <li> <p>Upgrade the deployment using Helm:</p> <pre><code>  helm upgrade &lt;RELEASE_NAME&gt; -n &lt;NAMESPACE&gt; -f custom-values.yaml &lt;HELM_CHART_DIRECTORY&gt;\n</code></pre> </li> </ol>"},{"location":"deploy_dx/manage/working_with_compose/change_context_root_or_home/#changing-the-uri-using-helm","title":"Changing the URI using Helm","text":"<ol> <li> <p>Update the <code>networking.webengine.home</code> and <code>networking.webengine.personalizedHome</code> values in the <code>custom-values.yaml</code> file to your desired values.</p> <pre><code># Networking configuration specific to webEngine\nwebEngine:\n  # webEngine Context root, only alter if your deployment already uses a non default context route\n  contextRoot: \"myContextRoot\"\n  # webEngine personalized home, only alter if your deployment already uses a non default personalized home\n  personalizedHome: \"myAuthenticatedHome\"\n  # webEngine home, only alter if your deployment already uses a non default home\n  home: \"myAnonymousHome\"\n</code></pre> </li> <li> <p>Upgrade the deployment using Helm:</p> <pre><code>  helm upgrade &lt;RELEASE_NAME&gt; -n &lt;NAMESPACE&gt; -f custom-values.yaml &lt;HELM_CHART_DIRECTORY&gt;\n</code></pre> </li> </ol>"},{"location":"deploy_dx/manage/working_with_compose/change_context_root_or_home/#changing-the-context-root-in-people-service","title":"Changing the context root in People Service","text":"<p>The People Service Helm chart cannot automatically detect changes in the parent chart. If you have deployed HCL People Service along with DX Compose, you must adjust the <code>configuration.dx.portletPageContextRoot</code> in the People Service <code>custom-values.yaml</code> file and the <code>configuration.peopleservice.configuration.dx.portletPageContextRoot</code> in the DX Compose <code>custom-values.yaml</code> file. After updating these values, upgrade the deployment using both <code>custom-values.yaml</code> files. Refer to the following steps:</p> <ol> <li> <p>Update the <code>configuration.dx.portletPageContextRoot</code> in the People Service <code>custom-values.yaml</code> file.</p> <pre><code># Application configuration\nconfiguration:\n  # Authencation configuration for DX integration\n  dx:\n    # -- (string) Context root for the People Service portlet page\n    # @section -- DX configuration\n    portletPageContextRoot: \"/myContextRoot/myAuthenticatedHome/Practitioner/PeopleService\"\n</code></pre> </li> <li> <p>Update the <code>configuration.peopleservice.configuration.dx.portletPageContextRoot</code> in the DX Compose <code>custom-values.yaml</code> file.</p> <pre><code># Application configuration\nconfiguration:\n  # Configuration for the peopleservice sub-chart.\n  # Set `enabled` to `true` to enable the peopleservice sub-chart, or `false` to disable it.\n  peopleservice:\n  enabled: true\n  # Application configuration\n  configuration:\n    # Integration configuration\n    integration:\n    # Indicates if DX integration is enabled\n    dx: true\n    # Integration specific configuration for DX\n    dx:\n    # Context root for the People Service portlet page\n    portletPageContextRoot: \"/myContextRoot/myAuthenticatedHome/Practitioner/PeopleService\"\n</code></pre> </li> <li> <p>Upgrade the deployment using Helm:</p> <pre><code>  helm upgrade &lt;RELEASE_NAME&gt; -n &lt;NAMESPACE&gt; -f dx-compose-custom-values.yaml -f peopleservice-custom-values.yaml &lt;HELM_CHART_DIRECTORY&gt;\n</code></pre> </li> </ol>"},{"location":"deploy_dx/manage/working_with_compose/change_context_root_or_home/#changing-the-context-root-in-a-non-helm-deployment","title":"Changing the context root in a non-Helm deployment","text":"<p>The following instructions provide the name and proper usage of the Linux bash script used to change either the context root (for example, <code>wps</code>) or the home URL (for example, <code>portal</code> in <code>wps/portal</code> or <code>myportal</code> in <code>/wps/myportal</code>) of DX WebEngine in a non-Helm deployment.</p> <p>To change the context root, use the following script:</p> <pre><code>/opt/openliberty/wlp/usr/svrcfg/bin/changeContextRoot.sh\n</code></pre>"},{"location":"deploy_dx/manage/working_with_compose/change_context_root_or_home/#script-options","title":"Script options","text":"<p>The following are the required and optional parameters to this shell script:</p> <pre><code>-h Show this help message\n-s The WebEngine server name (for example, defaultServer)\n-n New Context Root: Specify the new context root\n-l DX WebEngine Location: Specify the directory containing your DX Compose WebEngine installation (for example, /opt/openliberty). Note that it should contain a directory called wlp\n-u WebEngine Admin User ID: Used for XMLAccess\n-P WebEngine Admin User Password: Used for XMLAccess\n-x Do not run any XMLAccess (used for secondary pods in Kubernetes)\n</code></pre> <p>The <code>-n</code> parameter is optional. However, by not specifying it, you are requesting that the new context root is null.</p> <p>If the <code>-x</code> parameter is present, which implies that the script will not run XMLAccess, then the <code>-u</code> and <code>-P</code> parameters (which are used for XMLAccess) are not required and will be ignored if present. The <code>-x</code> parameter is supplied because all nodes in Kubernetes other than the primary should not be doing XMLAccess.</p> <p>The script does an XMLAccess export of the Themes and Skins to extract the context root contained therein. If the context root specified by the <code>-n</code> parameter is the same as the context root extracted from the XMLAccess export, no new XMLAccess for the Portlet update and the Theme/Skins update will take place because the context root is already correct.</p> <p>Except for the <code>-h</code> and <code>-x</code> parameters, all other options are required.</p>"},{"location":"deploy_dx/manage/working_with_compose/change_context_root_or_home/#sample-use-of-script","title":"Sample use of script","text":"<p>This example changes the context root of the WebEngine server from <code>wps</code> to <code>newRoot</code>:</p> <pre><code>/opt/openliberty/wlp/usr/svrcfg/bin/changeContextRoot.sh -n newRoot -l /opt/openliberty -s defaultServer -u wpsadmin -P wpsadmin\n</code></pre> <p>This example changes a WebEngine server context root of <code>wps</code> to having no context root at all:</p> <pre><code>/opt/openliberty/wlp/usr/svrcfg/bin/changeContextRoot.sh -l /opt/openliberty -s defaultServer -u wpsadmin -P wpsadmin\n</code></pre> <p>In this case, you can access the portal as:</p> <pre><code>localhost/portal\n</code></pre>"},{"location":"deploy_dx/manage/working_with_compose/change_context_root_or_home/#changing-the-home-url-in-a-non-helm-deployment","title":"Changing the home URL in a non-Helm deployment","text":"<p>Follow the steps in this section in case you want to use a string like <code>newHome</code> and <code>mynewHome</code> in the home URL, as opposed to <code>portal</code> and <code>myportal</code> in <code>/wps/portal</code> and <code>/wps/myportal</code>.</p> <p>To change the home URL, use the script <code>changeHomeURLs.sh</code> located in Docker or Kubernetes at:</p> <pre><code>/opt/openliberty/wlp/usr/svrcfg/bin/changeHomeURLs.sh\n</code></pre>"},{"location":"deploy_dx/manage/working_with_compose/change_context_root_or_home/#script-options_1","title":"Script options","text":"<p>The parameters for this script (except of <code>-h</code>) are all required and include:</p> <pre><code>-h Show this help message\n-s The WebEngine server name (for example, defaultServer)\n-a The new anonymous Home url\n-A The new authenticated Home url\n-l DX WebEngine server Location: Specify the directory containing your DX Compose WebEngine installation (for example, /opt/openliberty). Note that it should contain a directory called wlp.\n</code></pre>"},{"location":"deploy_dx/manage/working_with_compose/change_context_root_or_home/#sample-use-of-script_1","title":"Sample use of script","text":"<p>This example changes the anonymous home to <code>newHome</code> and the authenticated home to <code>mynewHome</code>:</p> <pre><code>/opt/openliberty/wlp/usr/svrcfg/bin/changeHomeURLs.sh -l /opt/openliberty -s defaultServer -a newHome -A mynewHome\n</code></pre> <p>In this case, you can access the Portal as:</p> <pre><code>localhost/wps/newHome\n</code></pre> <p>or</p> <pre><code>localhost/wps/mynewHome\n</code></pre>"},{"location":"deploy_dx/manage/working_with_compose/custom_certificates/","title":"Using custom certificates in WebEngine","text":"<p>This topic provides the steps on how to add custom certificates to the WebEngine server configuration through the Helm <code>values.yaml</code> file.</p> <p>You can use the <code>customKeystoreSecrets</code> and <code>customTruststoreSecrets</code> parameters to reference multiple keystore secrets and truststore secrets respectively. These keystore secrets contain the certificates and keys required for Secure Sockets Layer (SSL) communication with the WebEngine server and for encrypted communication with other services and truststore secrets to trust certificates of other services.</p>"},{"location":"deploy_dx/manage/working_with_compose/custom_certificates/#adding-custom-certificates-using-the-valuesyaml-file","title":"Adding custom certificates using the <code>values.yaml</code> file","text":"<p>Each secret specified in <code>customKeystoreSecrets</code> is mounted into its own folder under the <code>/mnt/certs/keystores</code> directory. Each secret specified in <code>customTruststoreSecrets</code> is mounted into its own folder under the <code>/mnt/certs/truststores</code> directory in the container. During system startup, the WebEngine server scans for subfolders under <code>/mnt/certs/keystores</code> and <code>/mnt/certs/truststores</code>. Each subfolder represents a separate mounted secret. The server uses keytool and OpenSSL to create the keystore and truststore files and import the provided certificates and keys. The keystore is created at <code>resources/security/key.p12</code> and the truststore at <code>resources/security/truststore.p12</code> within the Open Liberty server directory.</p> <p>Helm parameters <code>customKeystoreSecrets</code> and <code>customTruststoreSecrets</code> trigger mounting and processing of the corresponding secrets. A random password is generated and inserted into the XML override snippets, which are created as follows:</p> <ul> <li>If keystore secrets are provided, certificate files in the keystore secrets are imported into a keystore override snippet created at <code>configDropins/keystoreOverrides/customKeyStore.xml</code>.</li> <li>If truststore secrets are provided, certificate files in the truststore secrets are imported into a truststore override snippet created at <code>configDropins/keystoreOverrides/customTrustStore.xml</code>.</li> </ul> <p>These snippets are applied to your server configuration to ensure the correct keystore and truststore are used. For example:</p> <pre><code>&lt;!-- customKeyStore.xml --&gt;\n&lt;keyStore id=\"customKeyStore\" location=\"key.p12\" password=\"UvfHFmrM99KV7VU9mnTkgLQZd34=\" type=\"PKCS12\" /&gt;\n</code></pre> <pre><code>&lt;!-- customTrustStore.xml --&gt;\n&lt;keyStore id=\"customTrustStore\" location=\"truststore.p12\" password=\"qvxP3kjx6u+/skWSa56/Hnkmlps=\" type=\"PKCS12\" /&gt;\n</code></pre> <p>In addition, a custom SSL override snippet (<code>customSSL.xml</code>) is always generated and applied to the server configuration, even if only one of the custom keystore or truststore contains certificates. This is because the SSL configuration requires both entries even if one store is empty. The generated SSL snippet references both <code>customKeyStore</code> and <code>customTrustStore</code>.</p> <pre><code>&lt;!-- customSSL.xml --&gt;\n&lt;ssl id=\"customSSLConfig\" keyStoreRef=\"customKeyStore\" trustStoreRef=\"customTrustStore\" trustDefaultCerts=\"true\"/&gt;\n</code></pre> <p>You can reference this custom SSL configuration using the <code>sslRef</code> attribute in your LDAP Registry configuration or in your OpenID Connect Client configuration to enable secure SSL communication.</p>"},{"location":"deploy_dx/manage/working_with_compose/custom_certificates/#creating-a-keystore-secret","title":"Creating a keystore secret","text":"<p>To create a new secret from the Transport Layer Security (TLS) key and certificate files, run the following command:</p> <pre><code>kubectl create secret tls tls-secret --key=\"certificate.key\" --cert=\"certificate.crt\"\n</code></pre>"},{"location":"deploy_dx/manage/working_with_compose/custom_certificates/#creating-a-truststore-secret","title":"Creating a truststore secret","text":"<p>Alternatively, you can add only the SSL certificate to another secret using the following command:</p> <pre><code>kubectl create secret generic ca-secret --from-file=certificate.ca\n</code></pre>"},{"location":"deploy_dx/manage/working_with_compose/custom_certificates/#example","title":"Example","text":"<p>See the following sample configuration:</p> <pre><code>configuration:\n  webEngine:\n    . . .\n    customKeystoreSecrets:\n      tls-secret-1: \"tls-secret-1\"\n      tls-secret-2: \"tls-secret-2\"\n    customTruststoreSecrets:\n      ca-secret-1: \"ca-secret-1\"\n      ca-secret-2: \"ca-secret-2\"\n</code></pre> <p>Important</p> <p>For successful inclusion in the keystore or truststore, all secret key names (for example, <code>tls-secret-1:</code>) must be in lowercase.</p> <p>This example aggregates all certificates and keys from the secrets specified in <code>customKeystoreSecrets</code> into the <code>customKeyStore</code>, and all certificates from the secrets specified in <code>customTruststoreSecrets</code> into the <code>customTrustStore</code>. These files serve as the default keystore and truststore for various WebEngine configuration elements that require them. As described in Adding custom certificates using the <code>values.yaml</code> file, configuration override files are automatically generated on system startup to use the updated keystore and truststore.</p> <p>Important</p> <p>It is required to restart the pod every time there are changes to the keystores or truststores.</p>"},{"location":"deploy_dx/manage/working_with_compose/custom_secrets/","title":"Using custom secrets in WebEngine","text":"<p>This document outlines how to use custom secrets in the WebEngine server configuration through the <code>values.yaml</code> file.</p> <p>Apart from administrator credentials, there can be use cases where additional credentials, secrets, or key files are required. To pass them to the deployment, you can use the <code>configuration.webEngine.customSecrets</code> value to reference additional Kubernetes Secrets.</p> <p>Secrets are both injected as environment variables and mounted as files in <code>/mnt/customSecrets</code> in a subfolder named after the referenced key. From there, you can reference secrets in the server configuration or in configOverrideFiles. All keys and values under <code>customSecrets</code> must consist of lowercase alphanumeric characters or dashes (-), and must start and end with an alphanumeric character (for example, <code>my-name</code>, or <code>123-abc</code>). <code>helm install</code> throws one of the following errors if these requirements are not met:</p> <ul> <li><code>configuration.webEngine.customSecrets: Additional property is not allowed</code></li> <li><code>configuration.webEngine.customSecrets.: Does not match pattern '^\\[a-z0-9\\]([-a-z0-9]*[a-z0-9])?$'</code></li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/custom_secrets/#using-custom-secrets-to-define-administrator-password","title":"Using custom secrets to define administrator password","text":"<p>To use a custom secret to define the WebEngine administrator password, see Updating the default administrator password for instructions.</p> <p>Note</p> <p>It is not possible to change the <code>wpsadmin</code> username at this time.</p>"},{"location":"deploy_dx/manage/working_with_compose/custom_secrets/#using-custom-secrets-as-credentials","title":"Using custom secrets as credentials","text":"<p>Create a secret in the Kubernetes cluster.</p> <p>For example, to create a secret named <code>my-custom-ldap-credentials</code>, which contains two entries, <code>LDAP_USERNAME</code> and <code>LDAP_PASSWORD</code>, run the following command:</p> <pre><code>kubectl create secret generic my-custom-ldap-credentials --from-literal=LDAP_USERNAME=&lt;your-username&gt; --from-\nliteral=LDAP_PASSWORD=&lt;your-password&gt; --namespace=&lt;namespace&gt; \n</code></pre> <p>The secret is referenced as <code>ldap-credentials</code> in the custom Helm values:</p> <pre><code>configuration: \n  webEngine:\n    . . . \n    customSecrets: \n      ldap-credentials: my-custom-ldap-credential\n</code></pre> <p>This results in:</p> <ul> <li> <p>The environment variables <code>LDAP_USERNAME</code> and <code>LDAP_PASSWORD</code> being injected into the Pod.</p> </li> <li> <p>The files <code>LDAP_USERNAME</code> and <code>LDAP_PASSWORD</code> being mounted in <code>/mnt/customSecrets/ldap-credentials</code> inside the webEngine Pod, each containing the values specified in the secret.</p> </li> </ul> <p>You can then reference the environment variables in any of the server configurations. For example, <code>configOverrideFiles</code> for LDAP:</p> <pre><code>configuration: \n  webEngine:\n    . . .\n    configOverrideFiles:\n      ldapOverride.xml: | \n        &lt;server description=\"DX Web Engine server\"&gt; \n          &lt;ldapRegistry id=\"ldap\" realm=\"SampleLdapIDSRealm\"\n            host=\"127.0.0.1\" port=\"1389\" ignoreCase=\"true\"\n            baseDN=\"dc=dx,dc=com\"\n            ldapType=\"Custom\"\n            sslEnabled=\"false\"\n            bindDN=\"${LDAP_USERNAME}\"\n            bindPassword=\"${LDAP_PASSWORD}\"&gt;\n            &lt;idsFilters\n              userFilter=\"(&amp;amp;(uid=%v)(objectclass=inetOrgPerson))\"\n              groupFilter=\"(&amp;amp;(cn=%v)(objectclass=groupOfUniqueNames))\"\n              userIdMap=\"*:uid\"\n              groupIdMap=\"*:cn\"\n              groupMemberIdMap=\"groupOfUniqueNames:uniqueMember\"&gt;\n            &lt;/idsFilters&gt;\n          &lt;/ldapRegistry&gt;\n          &lt;federatedRepository&gt;\n            &lt;primaryRealm name=\"FederatedRealm\" allowOpIfRepoDown=\"true\"&gt;\n            &lt;participatingBaseEntry name=\"o=defaultWIMFileBasedRealm\"/&gt;\n            &lt;participatingBaseEntry name=\"dc=dx,dc=com\"/&gt;\n            &lt;/primaryRealm&gt;\n          &lt;/federatedRepository&gt;\n        &lt;/server&gt;\n</code></pre>"},{"location":"deploy_dx/manage/working_with_compose/custom_secrets/#using-custom-secrets-as-a-key-file","title":"Using custom secrets as a key file","text":"<p>The following is a sample command for creating a secret <code>my-custom-ltpa-key</code> from an LTPA key file, including the entry <code>LTPA_KEY</code>:</p> <pre><code>kubectl create secret generic my-custom-ltpa-key --from-file=LTPA_KEY=&lt;path-to-key-file&gt; --namespace=&lt;namespace&gt;\n</code></pre> <p>The secret is referenced as <code>ltpa-key</code> in the custom Helm values:</p> <pre><code>configuration: \n  webEngine:\n    . . . \n    customSecrets: \n      ltpa-key: \"my-custom-ltpa-key\"\n</code></pre> <p>This results in:</p> <ul> <li> <p>The environment variables <code>ltpa.keys</code> being injected into the Pod.</p> </li> <li> <p>The file <code>ltpa.keys</code> being mounted in <code>/mnt/customSecrets/ltpa-key</code> inside the Pod containing the same content as the input file.</p> </li> </ul> <p>You can then reference the file in any of the server configurations. For example, to use the LTPA key for the server:</p> <pre><code>configuration: \n  webEngine:\n    . . . \n    configOverrideFiles: \n      . . .\n      ltpaOverride: | \n        &lt;server description=\"DX Web Engine server\"&gt;  \n          &lt;ltpa keysFileName=\"/mnt/customSecrets/ltpa-key/ltpa.keys\" keysPassword=\"myLtpaKeyPassword\" /&gt; \n        &lt;/server&gt; \n</code></pre> <p>Perform a Helm upgrade to apply the changes.</p>"},{"location":"deploy_dx/manage/working_with_compose/dxclient/","title":"Supported DXClient operations","text":"<p>This topic enumerates the DXClient functionalities supported by Digital Experience (DX) Compose. </p> Artifact Command Script Application <code>dxclient deploy-scriptapplication pull</code> <code>dxclient deploy-scriptapplication push</code> <code>dxclient undeploy-scriptapplication</code> XML Access <code>dxclient xmlaccess</code> Themes Artifacts (WebDAV based) <code>dxclient deploy-theme</code> Web Content Syndicators and Subscribers <code>dxclient manage-syndicator</code> <code>dxclient manage-syndicator get-syndication-report</code> <code>dxclient manage-subscriber</code> <code>dxclient create-syndication-relation</code> Import WCM <code>dxclient mls-import</code> Export WCM <code>dxclient mls-export</code> Credential Vault Slot <code>dxclient create-credential-vault</code> Virtual Portals <code>dxclient manage-virtual-portal export</code> <code>dxclient manage-virtual-portal import</code> Personalization Rules <code>dxclient pzn-export</code> LiveSync <code>dxclient livesync pull-theme</code> <code>dxclient livesync push-theme</code> <code>dxclient livesync pull-wcm-design-library</code> <code>dxclient livesync push-wcm-design-library</code> DAM DAM Schemas <code>dxclient list-dam-schemas</code> <code>dxclient delete-dam-schema</code> DAM EXIM <code>dxclient manage-dam-assets export-assets</code> <code>dxclient manage-dam-assets validate-assets</code> <code>dxclient manage-dam-assets import-assets</code> Staging DAM to Rendering Environments <code>dxclient manage-dam-staging trigger-staging</code> <code>dxclient manage-dam-staging get-all-subscribers</code> <code>dxclient manage-dam-staging register-dam-subscriber</code> <code>dxclient manage-dam-staging deregister-dam-subscriber</code> <code>dxclient manage-dam-staging find-staging-mismatch</code> <code>dxclient manage-dam-stagingget-staging-mismatch-report</code> <code>dxclient manage-dam-staging start-staging-resync</code> <code>dxclient manage-dam-staging delete-staging-mismatch</code> <p>All other DXClient operations are not supported at this time.</p>"},{"location":"deploy_dx/manage/working_with_compose/helm_upgrade_values/","title":"Upgrading the Helm deployment","text":"<p>This topic provides detailed steps for upgrading the Helm deployment using an updated <code>custom-values.yaml</code> file.</p> <ol> <li> <p>Retrieve the current <code>custom-values.yaml</code> file from a previous deployment or by using the following command:</p> <pre><code>helm get values &lt;RELEASE-NAME&gt; -n &lt;NAMESPACE&gt; -o yaml &gt; custom-values.yaml\n</code></pre> <p>For example, to retrieve the <code>custom-values.yaml</code> file of modified values, use the following command:</p> <pre><code>helm get values dx-deployment -n dxns -o yaml &gt; custom-values.yaml\n</code></pre> <p>To retrieve the full <code>custom-values.yaml</code> file that includes the default values, use the following command:</p> <pre><code>helm get values dx-deployment -n dxns  -o yaml  -a &gt; custom-values-all.yaml\n</code></pre> </li> <li> <p>Update the <code>custom-values.yaml</code> file with the required changes (for example, <code>configOverrideFiles</code>, <code>images</code>).</p> </li> <li> <p>Upgrade the Helm deployment with the updated <code>custom-values.yaml</code> file.</p> <p>Use the following command to apply the updates to your Helm deployment:</p> <pre><code>helm upgrade &lt;RELEASE_NAME&gt; -n &lt;NAMESPACE&gt; -f custom-values.yaml &lt;HELM_CHART_DIRECTORY&gt;\n</code></pre> <p>For example:</p> <pre><code>helm upgrade dx-deployment  -n dxns -f custom-values.yaml mycharts/install-hcl-dx-deployment\n</code></pre> </li> </ol>"},{"location":"deploy_dx/manage/working_with_compose/logging_webengine/","title":"Viewing WebEngine server logs","text":"<p>This document provides the steps to view the WebEngine server logs through Kubernetes.</p> <p>To view the logs of the WebEngine server, run the following command:</p> <pre><code>kubectl exec -it &lt;RELEASE-NAME&gt;-web-engine-0 -n &lt;NAMESPACE&gt; -c web-engine -- /opt/openliberty/wlp/usr/svrcfg/bin/webEngineLogs.sh -monitor yes\n</code></pre> <p>For example:</p> <pre><code>kubectl exec -it  dx-deployment-web-engine-0  -n dxns -c web-engine -- /opt/openliberty/wlp/usr/svrcfg/bin/webEngineLogs.sh -monitor yes\n</code></pre> <p>For continuous monitoring, add the argument <code>-monitor yes</code>. To just view the logs without continuous monitoring, use <code>-monitor no</code> or omit the argument altogether.</p>"},{"location":"deploy_dx/manage/working_with_compose/manage_outbound_connections/","title":"Managing outbound connections (Ajax Proxy)","text":"<p>The configuration of the outbound connections happens in DX Core through ConfigEngine tasks. There are no ConfigEngine tasks when running WebEngine. This topic explains a different technique that you should use to manage outbound connections with WebEngine.</p>"},{"location":"deploy_dx/manage/working_with_compose/manage_outbound_connections/#using-xmlaccess-for-outbound-connections","title":"Using XMLAccess for outbound connections","text":"<p>You can use a specially prepared xmlaccess script to create or delete outbound connections policies. The following samples showcase how you can use an XML script. You can execute the script through an <code>xmlaccess.sh</code> script in the Liberty container or through a remote execution using DXClient.</p>"},{"location":"deploy_dx/manage/working_with_compose/manage_outbound_connections/#sample-for-policy-creation-global","title":"Sample for policy creation (global)","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;request type=\"update\" version=\"8.0.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"ProxyConfig_1.0.0.xsd\"&gt;\n    &lt;proxy-config-data type=\"global\"&gt;\n        &lt;data action=\"create\"&gt;&lt;![CDATA[&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n\n&lt;proxy-rules xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"http://www.ibm.com/xmlns/prod/sw/http/outbound/proxy-config/2.0\"&gt;\n    &lt;policy active=\"true\" url=\"https://replacme.hcl.com/*\" name=\"myservice\"&gt;\n        &lt;actions&gt;\n            &lt;method&gt;GET&lt;/method&gt;\n            &lt;method&gt;HEAD&lt;/method&gt;\n        &lt;/actions&gt;\n    &lt;/policy&gt;\n&lt;/proxy-rules&gt;]]&gt;&lt;/data&gt;\n    &lt;/proxy-config-data&gt;\n&lt;/request&gt;\n</code></pre>"},{"location":"deploy_dx/manage/working_with_compose/manage_outbound_connections/#sample-for-policy-deletion-global","title":"Sample for policy deletion (global)","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;request type=\"update\" version=\"8.0.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"ProxyConfig_1.0.0.xsd\"&gt;\n    &lt;proxy-config-data type=\"global\"&gt;\n        &lt;data action=\"delete\"&gt;&lt;![CDATA[&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n\n&lt;proxy-rules xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"http://www.ibm.com/xmlns/prod/sw/http/outbound/proxy-config/2.0\"&gt;\n    &lt;policy active=\"true\" url=\"https://replacme.hcl.com/*\" name=\"myservice\"&gt;\n        &lt;actions&gt;\n            &lt;method&gt;GET&lt;/method&gt;\n            &lt;method&gt;HEAD&lt;/method&gt;\n        &lt;/actions&gt;\n    &lt;/policy&gt;\n&lt;/proxy-rules&gt;]]&gt;&lt;/data&gt;\n    &lt;/proxy-config-data&gt;\n&lt;/request&gt;\n</code></pre>"},{"location":"deploy_dx/manage/working_with_compose/monitor_metrics/","title":"Monitoring the DX Compose deployment","text":"<p>This topic outlines the use of standards-based metrics to monitor activity and performance of the Digital Experience (DX) Compose WebEngine container. For information on the deployment of other DX containers, see Monitor Deployment Using Metrics.</p>"},{"location":"deploy_dx/manage/working_with_compose/monitor_metrics/#prometheus-metrics-and-grafana","title":"Prometheus metrics and Grafana","text":"<p>DX Helm deployment supports monitoring the deployment activity with advanced metrics and visualization by exposing standards-based, Prometheus-compatible metrics. Components of Prometheus metrics can scrape the metrics of most of the DX container applications, including WebEngine container. The collected data is queried from Prometheus and are visualized in operations dashboard solutions, such as Grafana.</p>"},{"location":"deploy_dx/manage/working_with_compose/monitor_metrics/#webengine-application-container-and-prometheus-metrics","title":"WebEngine application container and Prometheus metrics","text":"<p>WebEngine container exposes metrics that you can track with Prometheus metrics. See the following details:</p> Application Port Route WebEngine 9091 /metrics <p>Important</p> <p>DX Compose does not include a deployment of Prometheus or Grafana. The metrics are enabled by default for the DX Helm chart. This exposes Prometheus-compatible metrics, which can be consumed by any common Prometheus installation.</p> <p>HCL DX Compose metrics are compatible with the following deployment and discovery types of Prometheus in Kubernetes environments:</p> <ul> <li>Prometheus - Discovers metrics by evaluating the <code>annotation</code> of the services.</li> <li>Prometheus Operator - Discovers metrics using the <code>ServiceMonitor</code> custom resources.</li> </ul> <p>Administrators can configure the HCL DX Compose metrics depending on their specific Prometheus deployment, as outlined in the following sections.</p>"},{"location":"deploy_dx/manage/working_with_compose/monitor_metrics/#configuring-prometheus-metrics","title":"Configuring Prometheus metrics","text":"<p>Metrics for the WebEngine container in the DX Helm chart are enabled by default, with <code>prometheusDiscoveryType</code> set to <code>annotations</code>. The parameter to disable metrics is included in the example configurations.</p> Parameter Description Default value <code>metrics.&lt;application&gt;.scrape</code> Determines if the metrics of this application are scraped by Prometheus. <code>true</code> <code>metrics.&lt;application&gt;.prometheusDiscoveryType</code> Determines how Prometheus discovers the metrics of a service. Accepts the values <code>\"annotation\"</code> and <code>\"serviceMonitor\"</code>. The<code>\"serviceMonitor\"</code> setting requires that the ServiceMonitor CRD (which comes with the Prometheus Operator), is installed in the cluster. <code>\"annotation\"</code> <p>Example:</p> <ul> <li> <p>Default configuration: Metrics are enabled for WebEngine with the appropriate <code>annotation</code> for Prometheus:</p> <pre><code>metrics:\n  webEngine:\n    scrape: true\n    prometheusDiscoveryType: \"annotation\"\n</code></pre> </li> <li> <p>Create a <code>ServiceMonitor</code> for Prometheus Operator:</p> <pre><code>metrics:\n  webEngine:\n    scrape: true\n    prometheusDiscoveryType: \"serviceMonitor\"\n</code></pre> </li> <li> <p>Disable the metrics for WebEngine:</p> <pre><code>metrics:\n  webEngine:\n    scrape: false\n</code></pre> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/monitor_metrics/#using-grafana-dashboards","title":"Using Grafana dashboards","text":""},{"location":"deploy_dx/manage/working_with_compose/monitor_metrics/#publicly-available-grafana-dashboards","title":"Publicly available Grafana dashboards","text":"<p>You can directly download or import the following dashboard from the Grafana community page using the IDs or links. Currently, Grafana is the only publicly available dashboard for the Open Liberty metrics version that is compatible with the different features used in the DX Compose application.</p> ID Dashboard Applications 11706 Open Liberty (mpMetrics-2.x) WebEngine <p>However, this dashboard must be configured to display Prometheus data. Currently, it is required to customize query and regex in this imported dashboard for the exposed Prometheus metrics of WebEngine container to be visible in the Grafana dashboard.</p> <p>Until a fixed version of Grafana is available for Kube from Open Liberty in the Grafana Marketplace, there is a custom alternative available for Grafana Dashboard as described in the next section.</p>"},{"location":"deploy_dx/manage/working_with_compose/monitor_metrics/#publicly-available-grafana-dashboard-json","title":"Publicly available Grafana dashboard JSON","text":"<p>Open Liberty community has provided the fixed JSON version of the Grafana dashboard at open-liberty-grafana-mpMetrics2.x.json. You can directly import this Dashboard JSON so that exposed Prometheus metrics of WebEngine container will be visible in this dashboard.</p>"},{"location":"deploy_dx/manage/working_with_compose/monitor_metrics/#custom-grafana-dashboards","title":"Custom Grafana dashboards","text":"<p>The following dashboard is provided by HCL Software for use with HCL DX deployments. For exposed Prometheus metrics of WebEngine container to be visible, you can directly import a Grafana-supported custom dashboard available in the following JSON format.</p> Dashboard Application(s) webengine-grafana-dashboard.json WebEngine"},{"location":"deploy_dx/manage/working_with_compose/restart_webengine_server/","title":"Restarting the WebEngine server","text":"<p>This topic provides the command to restart the WebEngine server through Kubernetes.</p> <p>To restart the WebEngine server, run the following command:</p> <pre><code>kubectl exec -it &lt;RELEASE-NAME&gt;-web-engine-0 -n &lt;NAMESPACE&gt; -c web-engine -- /opt/openliberty/wlp/usr/svrcfg/bin/restart.sh\n</code></pre> <p>For example:</p> <pre><code>kubectl exec -it  dx-deployment-web-engine-0  -n dxns -c web-engine -- /opt/openliberty/wlp/usr/svrcfg/bin/restart.sh\n</code></pre>"},{"location":"deploy_dx/manage/working_with_compose/staging_to_production/","title":"Staging one WebEngine instance to another","text":"<p>During WebEngine solution development, the total solution is initially developed, tested, and refined on one server or a limited number of servers. The total solution is then deployed later on systems targeted for production, referred to as the production environment. The process of moving the solution from one environment to another environment is called staging.</p> <p>Staging is only possible between the same product release or version. In contrast, upgrading from one release to a newer release is called migration.</p> <p>HCL Digital Experience (DX) Compose, Web Content Manager (WCM) and Digital Asset Manager (DAM) solutions can consist of many artifacts. These artifacts include portlets, themes and skins, portlet services, page layouts, wires, portlet configurations, portlet data, content, and personalization rules. Staging helps you move these artifacts to the production environment in a controlled way.</p> <p>For naming purposes, this document calls the system that you are staging from the source system and the system you are staging to the target system.</p>"},{"location":"deploy_dx/manage/working_with_compose/staging_to_production/#staging-from-source-to-target","title":"Staging from source to target","text":"<ol> <li> <p>Install and upgrade the target HCL DX Compose system with Helm. The target and source should have exactly the same DX Compose level and preferably be at the latest of both. As both source and target are Kubernetes-based.</p> <p>Note</p> <p>It is recommended to use the latest cumulative fix (CF) on both the source and target systems.</p> </li> <li> <p>Configure security on the target DX Compose system. This might be a different user repository (for example, LDAP) than the source server.</p> <p>If both systems are using the same user repository and the same administrator, you can copy the appropriate section (for example, <code>ldap-repository</code>) from the <code>server.xml</code> of the source to the <code>server.xml</code> of the target and update the Helm chart of the target to match the source.</p> </li> <li> <p>Transfer the database to DB2 on the target DX Compose system. Note that this step happens through the Helm chart for the target server.</p> <p>While transferring database on the source is not critical, it is assumed that the target system will be used for production use and should have gone through database transfer.</p> </li> <li> <p>Using XMLAccess, export the virtual Portals from the source system.</p> <p>Sample command:</p> <pre><code>/opt/openliberty/wlp/usr/svrcfg/scripts/xmlaccess/xmlaccess.sh -d /opt/openliberty/wlp/usr/servers/defaultServer -out /tmp/ExportVirtualPortals.xml -in     /opt/openliberty/wlp/usr/svrcfg/xml-samples/ExportVirtualPortals.xml -user wpsadmin -password wpsadmin -url http://localhost:9080/wps/config\n</code></pre> </li> <li> <p>Export XMLAccess with <code>ExportRelease.xml</code> on the source Portal base virtual Portal. As an example, the result file could be called <code>baseVPExportRelease.xml</code>.</p> <p>From inside the WebEngine portal deployed on your source system (for example, use <code>kubectl exec -it webengine-pod-0 bash -n dxns</code>), you can use the following sample command:</p> <pre><code>/opt/openliberty/wlp/usr/svrcfg/scripts/xmlaccess/xmlaccess.sh -d /opt/openliberty/wlp/usr/servers/defaultServer -out /tmp/baseVPExportRelease.xml -in     /opt/openliberty/wlp/usr/svrcfg/xml-samples/ExportRelease.xml -user wpsadmin -password wpsadmin -url http://localhost:9080/wps/config\n</code></pre> </li> <li> <p>Export XMLAccess export with <code>ExportUniqueRelease.xml</code> for the first source Portal Virtual Portal 1. As an example, the result file could be called <code>vp1Export</code>.xml.</p> <p>From inside the WebEngine container deployed on your source system (for example, use <code>kubectl exec -it webengine-pod-0 bash -n dxns</code>) you can use the following sample command:</p> <pre><code>/opt/openliberty/wlp/usr/svrcfg/scripts/xmlaccess/xmlaccess.sh -d /opt/openliberty/wlp/usr/servers/defaultServer -out /tmp/vp1Export.xml -in /opt/openliberty/wlp/usr/svrcfg/xml-samples/ExportUniqueRelease.xml -user wpsadmin -password wpsadmin -url http://localhost:9080/wps/config/vp1\n</code></pre> </li> <li> <p>Repeat Step 6 for each virtual portal on the source system. Make sure to use a unique name for the XMLAccess output.</p> </li> <li> <p>Remove existing content from the target WebEngine container.</p> <p>Ensure that all three XMLAccess tasks are run to complete the operation.</p> <p>Sample commands: </p> <pre><code>/opt/openliberty/wlp/usr/svrcfg/scripts/xmlaccess/xmlaccess.sh -d /opt/openliberty/wlp/usr/servers/defaultServer -out /tmp/CleanPortalWithoutWebApps.xml.out -in /opt/openliberty/wlp/usr/svrcfg/xml-samples/CleanPortalWithoutWebApps.xml -user wpsadmin -password wpsadmin -url http://localhost:9080/wps/config\n\n/opt/openliberty/wlp/usr/svrcfg/scripts/xmlaccess/xmlaccess.sh -d /opt/openliberty/wlp/usr/servers/defaultServer -out /tmp/AddBasePortalResources.xml.out -in ./engine/engine-ear/target/liberty/wlp/usr/installer/wp.config/config/templates/AddBasePortalResources.xml -user wpsadmin -password wpsadmin -url http://localhost:9080/wps/config\n\n/opt/openliberty/wlp/usr/svrcfg/scripts/xmlaccess/xmlaccess.sh -d /opt/openliberty/wlp/usr/servers/defaultServer -out /tmp/SchedulerCleanupTask.xml.out -in /opt/openliberty/wlp/usr/installer/wp.config/config/templates/SchedulerCleanupTask.xml -user wpsadmin -password wpsadmin -url http://localhost:9080/wps/config\n</code></pre> </li> <li> <p>Run scheduler through the <code>Task.xml</code> on the target WebEngine container.</p> <p>Sample command: </p> <pre><code>/opt/openliberty/wlp/usr/svrcfg/scripts/xmlaccess/xmlaccess.sh -d /opt/openliberty/wlp/usr/servers/defaultServer -out /tmp/Task.xml.out -in /opt/openliberty/wlp/usr/svrcfg/xml-samples/Task.xml -user wpsadmin -password wpsadmin -url http://localhost:9080/wps/config\n</code></pre> </li> <li> <p>Transfer the WebDav theme from the source server to the target. </p> <p>Note</p> <p>WebEngine currently does not support deployment of custom EAR files that can persist. Only WebDav-based themes are supported. </p> <ol> <li> <p>Locate your custom themes on the source server using the Theme Manager in WebEngine. Take note of the names you have assigned to the themes.</p> </li> <li> <p>Using a WebDav client on your local operating system, create an archive using the TAR utility or compress the files in ZIP format for the custom themes from the WebDav file system. </p> </li> <li> <p>After all the files are contained in a tarball or ZIP file, move this file to the target and import the files onto the target WebDav using the same theme names as on the source server.</p> </li> <li> <p>Regardless of the method used to get the theme files onto the target WebDav, you must register the custom themes using XMLAccess. Ensure that one preserves the object id (OID) of the custom theme(s) on the target portal. For example, the OID should be the same on the source and target in the XMLAccess import XML file.</p> </li> <li> <p>Export the themes and skins from the source:</p> <pre><code>/opt/openliberty/wlp/usr/svrcfg/scripts/xmlaccess/xmlaccess.sh -d /opt/openliberty/wlp/usr/servers/defaultServer -out /tmp/ExportThemesAndSkins.xml.out -in /opt/openliberty/wlp/usr/svrcfg/xml-samples/ExportThemesAndSkins.xml -user wpsadmin -password wpsadmin -url http://localhost:9080/wps/config\n</code></pre> </li> <li> <p>Edit the output file (<code>/tmp/ExportThemesAndSkins.xml.out</code>) to remove any themes and skins not created using the Theme Manager. This would include all themes included in the base Portal (for example, Portal 8.5 theme).</p> </li> <li> <p>Import the resulting XML file on the target to register the new themes and skins:</p> <pre><code>/opt/openliberty/wlp/usr/svrcfg/scripts/xmlaccess/xmlaccess.sh -d /opt/openliberty/wlp/usr/servers/defaultServer -in /tmp/ExportThemesAndSkins.xml.out -out /tmp/ExportThemesAndSkins.xml.out.out -user wpsadmin -password wpsadmin -url http://localhost:9080/wps/config\n</code></pre> </li> </ol> </li> <li> <p>Set the properties required for syndication in WCM ConfigService (for example, enable member fixer to run as part of syndication). You can find more information about custom syndication configuration properties in Member fixer in Syndication.</p> </li> <li> <p>Import XMLAccess with <code>baseExport.xml</code> into the base virtual Portal of the target system.</p> <p>Sample command: </p> <pre><code>/opt/openliberty/wlp/usr/svrcfg/scripts/xmlaccess/xmlaccess.sh -d /opt/openliberty/wlp/usr/servers/defaultServer -in /tmp/baseVPExportRelease.xml -out /tmp/baseVPExportRelease.xml.out -user wpsadmin -password wpsadmin -url http://localhost:9080/wps/config\n</code></pre> </li> <li> <p>Deploy your DAM assets from your source environment to you target environment using DXClient.</p> <p>Run the following commands:</p> <pre><code>dxclient manage-dam-staging register-dam-subscriber\ndxclient manage-dam-staging trigger-staging\n</code></pre> </li> <li> <p>Export the Personalization rules from the source system and import them to the target server. You can export and import the rules using the Personalization Administration Portlet Export and Import functions. See Staging Personalization rules to production for more information.</p> </li> <li> <p>Verify that everything in the base virtual Portal is working. </p> <p>Make sure to check the rendering of the theme and pages, as well as content, Personalization rules, or Script Applications.</p> </li> <li> <p>Create your virtual Portals using the output deck from the XMLAccess command used in step 4 to export the virtual Portal definitions from the source.</p> <p>Sample command:</p> <pre><code>/opt/openliberty/wlp/usr/svrcfg/scripts/xmlaccess/xmlaccess.sh -d /opt/openliberty/wlp/usr/servers/defaultServer -in /tmp/ExportVirtualPortals.xml -out /tmp/ExportVirtualPortals.xml.out -user wpsadmin -password wpsadmin -url http://localhost:9080/wps/config\n</code></pre> </li> <li> <p>Import the XML file for each virtual Portal on the source into same virtual Portal on the target using XMLAccess. Ensure that the VP context root in the XMLAccess command matches the VP name in the <code>&amp;quot;/wps/config/&amp;quot;</code> XMLAccess statement.</p> <p>Sample command: </p> <pre><code>/opt/openliberty/wlp/usr/svrcfg/scripts/xmlaccess/xmlaccess.sh -d /opt/openliberty/wlp/usr/servers/defaultServer -in /tmp/vp1Export.xml -out /tmp/vp1Export_result.xml -user wpsadmin -password wpsadmin -url http://localhost:9080/wps/config/vp1\n</code></pre> </li> <li> <p>Repeat steps 16 and 17 until all of your virtual Portals are created and filled through XMLAccess on the target Portal.</p> </li> <li> <p>Validate all DAM artifacts were transferred from your source system to your target system as configured in step 13.</p> </li> <li> <p>Delete your WebEngine pod and wait for Kubernetes to restart the pod. </p> <p>Sample command:</p> <pre><code>kubectl delete webengine-pod-0 -n dxns\n</code></pre> </li> <li> <p>Make sure that the WebEngine works correctly. </p> <p>Address potentially missed artifacts. Watch out for error messages in <code>SystemOut.log</code>, <code>messages.log</code>, and <code>trace.log</code> during startup.</p> </li> <li> <p>Set up syndication for the appropriate libraries between the source and the target system or target to source depending on your requirements (for example, for an Authoring system, subsequent syndications could go from Authoring to Integration Test or Development environment).</p> <p>Note</p> <ul> <li>You need to syndicate the Multilingual configuration library.</li> <li>You must setup syndication as well between your source system virtual Portals to the target system virtual Portals. </li> </ul> </li> <li> <p>After syndication has completed its initial run, set up the library permissions. </p> <p>Library permissions are not syndicated. For more information, see Set up access to libraries.</p> </li> </ol>"},{"location":"deploy_dx/manage/working_with_compose/cfg_parameters/","title":"Configuration parameters","text":"<p>This section provides information for configuring users and groups in HCL Digital Experience (DX) Compose.</p> <ul> <li>Managing users and groups in DX Compose Learn how to configure user registries and viewing users and groups in DX Compose.</li> <li>Adding custom attributes in DX Compose Learn how to use to add or define custom attributes in DX Compose.</li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/cfg_parameters/adding_custom_attributes/","title":"Adding custom attributes in DX Compose","text":"<p>This topic provides steps on how to add or define custom attributes in Digital Experience (DX) Compose.</p>"},{"location":"deploy_dx/manage/working_with_compose/cfg_parameters/adding_custom_attributes/#overview","title":"Overview","text":"<p>You can add a single attribute or multiple custom attributes simultaneously by including them in the <code>server.xml</code> file. In the <code>server.xml</code> file, the <code>&lt;wplc-add-property&gt;</code> tag is used to define custom attributes, and it contains one or more <code>&lt;resource&gt;</code> tags. Each <code>&lt;resource&gt;</code> tag includes attributes that are specific to the property: <code>propertyName</code>, <code>dataType</code>, <code>entityType</code>, and <code>multiValued</code>.</p>"},{"location":"deploy_dx/manage/working_with_compose/cfg_parameters/adding_custom_attributes/#attribute-description","title":"Attribute description","text":"<p>The following list provides the description of each attribute:</p> <ul> <li> <p><code>propertyName</code>: The name of the property you are adding.</p> </li> <li> <p><code>entityTypes</code>: This value is a list of entity types to which the new property applies. If you need to enter multiple values, separate each value with a comma (for example \"value1,value2\"). Valid values are <code>Group</code> and <code>PersonAccount</code>.</p> </li> <li> <p><code>dataType</code>: This defines the type of data stored in the attribute being created. If this attribute is mapped to LDAP, this data type must match the corresponding attribute type in LDAP. Consult your LDAP administrator if you are unsure of the data types. Refer to the following list for the valid values for this attribute:</p> <ul> <li><code>String</code></li> <li><code>Int</code></li> <li><code>DateTime</code></li> <li><code>Base64Binary</code></li> <li><code>IdentifierType</code></li> <li><code>Boolean</code></li> <li><code>Long</code></li> <li><code>Double</code></li> <li><code>Short</code></li> </ul> <p>Note</p> <p>While it is possible to add attributes of different types, the Registration/Edit My Profile Portlet can only handle attributes of type <code>String</code> and <code>Int</code>. If you need UI support for other types, you must create your own custom form or portlet that can process those types. The Portal does not have a UI that reads or updates group attributes.</p> </li> <li> <p><code>multiValued</code>: This defines whether the property can contain multiple values or not.</p> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/cfg_parameters/adding_custom_attributes/#liberty-serverxml-updates","title":"Liberty <code>server.xml</code> updates","text":"<p>To define the custom attributes, you must adjust the Liberty server configuration by adding the custom attributes in the following format:</p> <pre><code>&lt;wplc-add-property&gt;\n    &lt;resource propertyName=\"xxx\" dataType=\"xxx\" entityTypes=\"xxx\" multiValued=\"xxx\" /&gt;\n&lt;/wplc-add-property&gt;\n</code></pre> <ol> <li> <p>Locate the <code>server.xml</code> file inside your Liberty container:</p> <pre><code>cd /opt/openliberty/wlp/usr/servers/defaultServer\nvi server.xml\n</code></pre> </li> <li> <p>In the <code>server.xml</code> file, define the custom attributes.</p> <p>See the following sample to add three custom attributes:</p> <pre><code>&lt;wplc-add-property&gt;\n    &lt;resource propertyName=\"attribute_name_1\" dataType=\"Int\" entityTypes=\"Group\" multiValued=\"true\" /&gt;\n    &lt;resource propertyName=\"attribute_name_2\" dataType=\"String\" entityTypes=\"PersonAccount\" multiValued=\"true\" /&gt;\n    &lt;resource propertyName=\"attribute_name_3\" dataType=\"Base64Binary\" entityTypes=\"Group,PersonAccount\" multiValued=\"false\" /&gt;\n&lt;/wplc-add-property&gt;\n</code></pre> <ul> <li>Replace the <code>propertyName</code> value with the actual name of the attributes you want to add.</li> <li><code>dataType</code> should be the type of the data you want to store in the attribute.</li> <li><code>entityTypes</code> should be the entities that can have this attribute.</li> <li><code>multiValued</code> attribute should be set to <code>true</code> if an entity can have multiple instances of this attribute, and <code>false</code> if otherwise.</li> </ul> </li> <li> <p>After making these changes, stop and restart the Liberty server to apply the changes. </p> </li> </ol> <p>The custom attributes should be successfully added and reflected in the API response.</p>"},{"location":"deploy_dx/manage/working_with_compose/cfg_parameters/manage_users_groups_liberty/","title":"Managing users and groups in DX Compose","text":"<p>This guide provides instructions for configuring user registries and viewing users and groups in Digital Experience (DX) Compose. This covers how to define <code>basicRegistry</code> and <code>ldapRegistry</code> in the <code>server.xml</code> file, and how to view users and groups after the registry is configured.</p> <p>Note</p> <p>Creating, updating, and deleting users and groups are currently not supported.</p>"},{"location":"deploy_dx/manage/working_with_compose/cfg_parameters/manage_users_groups_liberty/#configuring-user-and-group-management","title":"Configuring user and group management","text":"<p>To view users and groups, you must first configure your <code>server.xml</code> to include either a basic or LDAP registry. This configuration allows DX Compose to interact with the specified user information sources.</p>"},{"location":"deploy_dx/manage/working_with_compose/cfg_parameters/manage_users_groups_liberty/#configuring-basic-registry","title":"Configuring basic registry","text":"<p>A basic user registry, which is a local, file-based repository, allows developers to set up a simple authentication system for testing application resource access. DX Compose offers a straightforward basic user registry tailored for use in development settings.</p> <p>Developers can set up the basic user registry within the <code>server.xml</code> file. While it is not recommended for production use, this registry offers a convenient way to handle authentication and authorization for development and testing purposes. For example, by configuring a basic user registry with two users, their passwords, and a group assigned to the administrator role, developers can simulate how access control would work. This setup enables testing of application resource access for different roles, such as an administrator, without the need for integrating with an external user registry.</p> <p>The basic registry is suitable for development environments or scenarios where a simple user list is sufficient.</p> <p>The following configuration defines a <code>basicRegistry</code> with a user and a group. The user admin is part of the <code>adminGroup</code>.</p> <pre><code>&lt;server&gt;    \n    &lt;basicRegistry id=\"basic\" realm=\"SampleBasicRealm\"&gt;\n        &lt;user name=\"admin\" password=\"adminpwd\" /&gt;\n        &lt;group name=\"adminGroup\"&gt;\n            &lt;member name=\"admin\" /&gt;\n        &lt;/group&gt;\n    &lt;/basicRegistry&gt;\n&lt;/server&gt;\n</code></pre>"},{"location":"deploy_dx/manage/working_with_compose/cfg_parameters/manage_users_groups_liberty/#configuring-ldap-registry","title":"Configuring LDAP registry","text":"<p>LDAP is a widely recognized protocol that facilitates authentication and authorization services by defining how application servers should interact with LDAP directories. These directories hold crucial security data, including usernames, passwords, and group memberships. While a basic user registry may be adequate for the initial stages of application development and testing, transitioning to an LDAP user registry is advisable for enhanced security in production environments.</p> <p>To enable DX Compose to handle authentication through an LDAP directory, it is necessary to incorporate both the Application Security and LDAP User Registry features into your <code>server.xml</code> configuration. Additionally, if your application needs to communicate securely with an LDAP server that uses TLS, you must include the Transport Security feature in your configuration featureManager.</p> <p>Add the following configuration to define the <code>ldapRegistry</code>:</p> <pre><code>&lt;ldapRegistry id=\"ldap\" realm=\"LdapRealm\"\n              host=\"ldap.example.com\"\n              port=\"389\"\n              baseDN=\"dc=example,dc=com\"\n              bindDN=\"cn=admin,dc=example,dc=com\"\n              bindPassword=\"adminpassword\"\n              ldapType=\"Custom\"\n              ignoreCase=\"true\"\n              recursiveSearch=\"true\"&gt;\n\n&lt;/ldapRegistry&gt;\n</code></pre> <p>Replace the placeholder values with the actual details of your LDAP server:</p> <ul> <li><code>host</code>: LDAP server hostname</li> <li><code>port</code>: LDAP server port</li> <li><code>baseDN</code>: Base Distinguished Name for LDAP searches</li> <li><code>bindDN</code>: Distinguished Name to bind to the LDAP server</li> <li><code>bindPassword</code>: Password for the bind DN</li> <li><code>ldapType</code>: Type of LDAP server (for example, Custom, AD)</li> </ul> <p>Note</p> <p>If the LDAP server does not support recursive server-side searches, you can set the value of <code>recursiveSearch</code> to <code>true</code> to allow recursive searches for users.</p> <p>For more information about using additional properties, see the LDAP User Registry feature.</p>"},{"location":"deploy_dx/manage/working_with_compose/cfg_parameters/manage_users_groups_liberty/#configuring-federated-user-registry","title":"Configuring Federated User Registry","text":"<p>When user and group data reside in various registries, DX Compose offers the capability to consolidate this dispersed information into a single, cohesive registry. This unified registry integrates data from different sources, including LDAP, basic, and custom user registries, into one centralized repository.</p> <p>By default, if your <code>server.xml</code> file includes configurations for multiple basic, LDAP, or custom user registries, these are automatically unified under the Federated User Registry  feature. This federation applies to LDAP user registries as well, whether they represent distinct data sources or are parts of the same LDAP directory.</p> <p>The following configuration specifies the sample basic and LDAP registries to be included in the federation by referring to them by name within the <code>federatedRepository</code> element.</p> <pre><code>&lt;federatedRepository&gt;\n    &lt;primaryRealm name=\"PrimaryRealm\" allowOpIfRepoDown=\"true\"&gt;\n        &lt;participatingBaseEntry name=\"o=SampleBasicRealm\"/&gt;\n        &lt;participatingBaseEntry name=\"dc=example,dc=com\"/&gt;\n    &lt;/primaryRealm&gt;\n&lt;/federatedRepository&gt;\n</code></pre>"},{"location":"deploy_dx/manage/working_with_compose/cfg_parameters/manage_users_groups_liberty/#viewing-users-and-groups","title":"Viewing users and groups","text":"<p>After the registry is configured, you can view users and groups through the Manage Users and Groups portlet.</p> <ol> <li> <p>Log in to HCL Digital Experience as an administrator.</p> </li> <li> <p>Click the Administration menu icon. Then, click Access &gt; Users and Groups.</p> </li> </ol> <p>To view detailed information about users, such as passwords, User IDs, first names, last names, email addresses, or preferred languages:</p> <ol> <li> <p>Use the search function to locate a specific user, or click the All Authenticated Portal Users link to see a comprehensive list of users.</p> </li> <li> <p>Next to the user's name, click the pencil icon to view the user's detailed information.</p> </li> </ol> <p>Note</p> <p>Editing user profile information is currently not supported.</p>"},{"location":"deploy_dx/manage/working_with_compose/cfg_parameters/manage_users_groups_liberty/#defining-custom-attributes","title":"Defining custom attributes","text":"<p>You can add multiple custom attributes at once or individually by specifying them in the <code>server.xml</code> file. For more information, refer to Defining Custom Attributes.</p>"},{"location":"deploy_dx/manage/working_with_compose/cfg_parameters/manage_users_groups_liberty/#limitations","title":"Limitations","text":"<ul> <li>Write operations such as creating, updating, and deleting users and groups are currently not supported in DX Compose.</li> <li>You cannot assign attribute definitions to a user or group in a basic user registry.</li> <li>Nested group search is not supported.</li> </ul> <p>More complex or less common scenarios that are supported in the WebSphere Application Server (WAS) have not been thoroughly tested with DX Compose and are not supported at this time. These include the following:</p> <ul> <li>Lookaside database</li> <li>Application groups</li> <li>Transient users</li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/","title":"Troubleshooting","text":"<p>This section helps you resolve problems and provides information on using diagnostic tools and tracing to capture HCL Digital Experience Compose system errors.</p>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/message_codes/","title":"Error message codes","text":"<p>Each message code consists of a product identifier, component identifier, a unique number, and a message type identifier. The product identifier is <code>EJP</code> and there are many components. There are three message types: error, information, and warning.</p>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/message_codes/#example","title":"Example","text":"<p>For the message code <code>EJPIC0001E</code>:</p> <ul> <li><code>EJP</code> is the product identifier.</li> <li><code>IC</code> is the component identifier which means installation user interface.</li> <li><code>0001</code> is the unique message number.</li> <li><code>E</code> is the message type which means error.</li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/wcm_support_tools/","title":"HCL WCM Support Tools","text":"<p>Use the HCL Web Content Manager (WCM) Support Tools portlet to investigate and analyze information related to the WCM Java Content Repository (JCR) nodes.</p>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/wcm_support_tools/#overview","title":"Overview","text":"<p>The HCL WCM items are stored in the JCR repository against a complex schema of interrelated tables. Each item is represented as a node, which is modeled through a graph of information stored across multiple tables. For this reason, deleting a node is not as simple as removing one row from a table in the database. The interrelated connections among all the tables must be handled; in many cases, the level of logic required is not encoded in any singular SQL command that can be sent to the database.</p> <p>The HCL WCM Support Tools portlet enables administrators to browse through those nodes and perform various operations directly on the JCR repository through the tool's user interface. This portlet includes tools to view the JCR repository for WCM content, run an XPath query and view results, and directly execute various support JavaServer Pages (JSPs). These tools are often utilized when working with HCL Software Support on a case-by-case basis to gather information specific to customers' environment and content. Using this portlet on the HCL WCM system helps expedite the troubleshooting process.</p> <p>The WCM Support Tools Portlet is accessible from Practitioner Studio Menu &gt; Web Content area.</p> <p>Note</p> <p>HCL Software advises customers to work with HCL Software Support to properly use the WCM Support Tools portlet.</p>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/wcm_support_tools/#using-the-hcl-wcm-support-tools-portlet","title":"Using the HCL WCM Support Tools portlet","text":"<p>The HCL WCM Support Tools portlet provides an assortment of tools that are useful in troubleshooting content-related issues.</p> <p>When you open the portlet in the Digital Experience (DX) Compose WebEngine Administration panel, you see links to various support tools in the body. In the footer, you will find the time stamp of when the portlet is accessed, the version of WCM for which portlet is installed, and the build version of the portlet. </p>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/wcm_support_tools/#browse-nodes","title":"Browse Nodes","text":"<p>To analyze the JCR representation of WCM or PZN objects use the Browse Nodes functionality.  After selecting Browse Nodes, you must select a workspace; the default is <code>ROOTWORKSPACE</code>, where WCM libraries are stored. The Java content repository is divided into the following hierarchy:</p> <ul> <li>Repository: Container for workspaces</li> <li>Workspace: Container for nodes</li> <li>Node: Container for properties</li> <li>Property: Attribute of a node</li> </ul> <p>Within the JCR specification, the concept of a workspace is defined to be a container for a collection of nodes. All work in the repository is done by way of a workspace. When a user logs into the repository, the user is given a \"ticket\", through which a workspace is requested. It is through the workspace that all interaction with the nodes, or content, is performed.</p> <p>All modifications to nodes within a workspace are transient until a \u201cSave\u201d operation. The workspace \u201cSave\u201d operation persists all changes made to the nodes within the workspace to permanent storage, the database.</p> <p>Browse Nodes shows the internal structure (JCR) of WCM. Administrators can search the node (WCM item) by UUID. This can help troubleshoot permission-related issues when WCM exceptions contains UUID information. Use the Browse Nodes function by entering UUID/IID of an object, if known, or browse through the JCR hierarchy to find an item.</p> <p>Browse operations are accessed in the portlet by selecting links, located on the right-hand side of the portlet. WCM library items are stored under contentRoot by default. The filestore has information about themes, skins, CSS, etc.</p> <p>You can browse through different types of items and find relevant information like Name, Type, Creation Date, UUID and many more. While browsing through the links, a bread crumb trail of the current path is listed in the portlet at the top.</p> <p>Node Locks: If a node is locked, one should be able to unlock it when the unlock access code is entered. A user name displays in this section next to the item that is locked.</p> <p>Node Information: Node information has three elements:</p> <ul> <li>Count children: Displays the total number of children that particular node has.</li> <li>Get IID: Displays the IID (Item ID) of the item.</li> <li>Get References: Provides a list of all references to the item. This list could be potentially long if recursive is checked.</li> </ul> <p>Node Actions: This section has additional buttons when access codes are enabled. For example, one might be able to edit a node or delete a node, if so directed by HCL Software Support.</p> <p>Search by UUID or IID: You can search for a node using UUID (normally obtained in logs) or IID:</p> <ul> <li>UUID is the external reference</li> <li>IID is internal reference</li> <li>The JCR database tables are linked by IID values</li> <li>IID-to-UUID mapping is in the <code>ICMSTJCRWSNODES</code> table</li> </ul> <p>After selecting the Lookup button, the details of the item are displayed. For example, \u201cPresentation Templates\u201d is returned from a UUID search, and the full path of its breadcrumb trail is presented.</p>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/wcm_support_tools/#run-xpath-query","title":"Run Xpath Query","text":"<p>The WCM JCR uses XPath to search the node hierarchy. XPath is translated to SQL for the specific underlying DX database installed to the platform. The command Run XPath Query returns the result from JCR by using XPath without WCM manipulation, which can help to isolate a problem (JCR or WCM).</p>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/wcm_support_tools/#generating-wcm-search-url","title":"Generating WCM Search URL","text":"<p>This option helps you generate a WCM Seed List URL to be used within a content source. You can select a type of site for your environment from the four button options: Stand-alone, Cluster, Virtual Portal, or Virtual Portal with Unique URL. Note that Administrator access is required to generate a WCM Search URL. &lt;!-- Cluster is really not applicable here but is available in the WebEngine UI so leaving it.&gt;</p> <p>To generate a WCM Seed List URL, refer to the following steps:</p> <ol> <li> <p>Select the type of site that you want to generate a search URL for.</p> <p>You can choose from the following options: - Stand-alone - Cluster - Virtual Portal - Virtual Portal with Unique URL</p> </li> <li> <p>In the Portal Search Engine WCM Seed List Generator page, perform the following steps:</p> <ol> <li>Click Get Libraries to obtain available WCM libraries.</li> <li>In the Get Libraries dropdown menu, select the WCM Library container of the content you want to crawl. Click Select.</li> <li>Click Get Site Areas to obtain available site areas for the selected library.</li> <li>In the Get Site Areas dropdown menu, select the site area you want to crawl.</li> <li>Click Generate URL to get the URL which will crawl the selected library and site area. </li> </ol> </li> </ol>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/wcm_support_tools/#list-types","title":"List types","text":"<p>WCM has defined several JCR nodetypes to represent its data structure. Each nodetype defines the properties and child nodes required for the WCM data object it represents, for example:</p> <ul> <li>Content item: <code>ibmcontentwcm:webContent</code></li> <li>Site area: <code>ibmcontentwcm:siteArea</code></li> </ul> <p>When these links are selected, the child types and properties of a node are displayed.</p>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/wcm_support_tools/#list-workspaces","title":"List workspaces","text":"<p>The workspace is an interface to WCM that is associated with a user, in which items are created, saved, deleted, and searched for:</p> <ul> <li>Divisions within the repository:<ul> <li>Stable workspaces: Data is copied</li> <li>Dynamic workspaces: Data is calculated</li> <li>Default: <code>ROOTWORKSPACE</code></li> </ul> </li> <li>Standard workspaces:<ul> <li><code>ROOTWORKSPACE</code> (All libraries)</li> <li>jcr:versioning (All versions)</li> <li>Dynamic workspaces (WCM Drafts, Personalization work)</li> </ul> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/wcm_support_tools/#enabling-access-code","title":"Enabling access code","text":"<p>There may be occasions when working with HCL Software Support in which they may provide a specific access code in order to unlock update features within the WCM Support Tools portlet. These access codes are temporary, and should be used only to repair the specific problems as directed by the HCL Support Engineer. Any other updates to the JCR database should be done through either HCL Digital Experience Compose WebEngine administration or WCM Authoring.</p> <p>After an access code is received (for example, for write_all and enabled), a message like <code>Write Access Enabled: write_all</code> appears if the code is valid and accepted. HCL Software Support will provide more information on the specific task required from to work to resolution of your support requirement.</p>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/","title":"Logging and tracing","text":"<p>If you are experiencing a problem, you can enable tracing and then re-create the problem to capture more log information.</p> <p>Refer to the MustGather data collection lists used in troubleshooting various problems in HCL Digital Experience (DX) Compose. Collecting MustGather data early, even before you open a PMR, helps HCL Software Support determine whether:</p> <ul> <li>Symptoms match known problems (rediscovery).</li> <li>A non-defect problem can be identified and resolved.</li> <li>A defect identifies a workaround to reduce severity.</li> <li>Locating the root cause can speed development of a code fix.</li> </ul> <p>You can enable logging and tracing for software that is included with HCL DX Compose. Enabling tracing makes log output more verbose. For example, you can enable tracing within Open Liberty to obtain information about application servers and other processes.</p> <p>You can use the information gathered to help solve problems or to report an issue to HCL Software Support.</p>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/#common-hcl-dx-compose-tracing-questions","title":"Common HCL DX Compose tracing questions","text":"<ul> <li> <p>How do I turn on HCL Digital Experience Compose trace logging?</p> <p>See Trace logging for information.</p> </li> <li> <p>What are the different trace settings and where are they logged?</p> <p>See WebEngine runtime logs for information.</p> </li> <li> <p>HCL WebEngine runtime logs If tracing is enabled, HCL Digital Experience WebEngine generates a log file during run time that contains messages and trace information.</p> </li> <li>Verbosegc in Java VM logs Verbose garbage collection (verbosegc) logging is often required when tuning and debugging many issues, and has negligible impact on system performance.</li> <li>Open Liberty tracing and log files Use Open Liberty log files and tracing to troubleshoot problems with HCL WebEngine.</li> <li>System event logging The system event logging facility of HCL Digital Experience Compose enables the recording of information about the operation of HCL WebEngine.</li> <li>HCL Web Content Manager tracing Enable the use of Open Liberty trace facilities to create trace information for Web Content Manager. This tracing can be enabled either permanently or for just the current HCL Digital Experience Compose session.</li> <li>Logging and tracing for containers and new services The following table outlines the tracing options that are used to capture logging and tracing for HCL Digital Experience Compose container-based services with container update CF181 and later releases.</li> <li>Logging and tracing client side rendering Learn the how to enable client side logging and tracing of your HCL Digital Experience Compose pages.</li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/adsyslog/","title":"System event logging","text":"<p>The system event logging facility of HCL Digital Experience (DX) Compose enables the recording of information about the operation of the WebEngine container.</p> <p>Event logs provide administrators with information about important or abnormal events, especially errors that occur during the operation of the product. In addition, event logs gather debugging information that helps HCL Software Support to resolve problems.</p> <p>HCL WebEngine provides two types of logging: logging of messages and logging of debugging messages called traces.</p> <p>For information about how to use log files and a list of trace logger strings, refer to Viewing WebEngine server logs.</p>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/adsyslog/#message-logging","title":"Message logging","text":"<p>Messages for HCL WebEngine are logged in the following files:</p> <ul> <li> <p><code>SystemOut.log</code></p> <p>This file contains information that is useful to monitor the health of the HCL WebEngine server and all running processes.</p> </li> <li> <p><code>messages.log</code></p> <p>This file contains all messages that are written or captured by the logging component. All messages that are written to this file contain additional information such as the message timestamp and the ID of the thread that wrote the message. This file is suitable for automated log analysis. This file does not contain messages that are written directly by the Java Virtual Machine (JVM) process.</p> </li> <li> <p><code>trace.log</code></p> <p>This file is created only if you enable trace. It contains all the content of the <code>messages.log</code> file and any enabled trace content. This file does not contain messages that are written directly by the JVM process.</p> </li> </ul> <p>You can find the log files for HCL WebEngine, including <code>SystemOut.log</code> and <code>trace.log</code>, in the following directory: <code>/opt/openliberty/wlp/usr/servers/defaultServer/logs</code>.</p>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/adsyslog/#trace-logging","title":"Trace logging","text":"<p>HCL WebEngine provides the logging of debugging messages called traces. These traces are useful for fixing problems. However, to save system resources, they are turned off by default.</p> <p>You can set traces for different durations:</p> <ul> <li> <p>Temporary</p> <p>You can set traces for a temporary period by using the administration portlet Enable Tracing. To set traces by using the portlet, complete the following steps:</p> <ol> <li>Log in as the administrator.</li> <li>Click the Administration menu icon. Then, click Tracing:\u00a0Gather data about the site. The Enable Tracing portlet appears.</li> <li>Click Site Administration &gt; Advanced Administration &gt; Tracing:\u00a0Gather data about the site. The Enable Tracing portlet appears.</li> <li>Enter the required trace string in the Append these trace settings: field. For example, this string can be <code>com.ibm.wps.command.credentialvault.*=finest</code>.</li> <li>Click the Add icon. Enable Tracing updates the Current trace settings field.</li> </ol> <p>Note</p> <pre><code>    Restarting HCL WebEngine removes traces that were set by using the Enable Tracing Administration portlet.\n</code></pre> <p>To disable tracing, use either of the following methods:</p> <ul> <li>Select the current trace settings under Current trace settings: and click the Remove icon. For example, the current setting can be <code>com.ibm.wps.command.credentialvault.*=finest</code>.</li> <li>Enter the trace string <code>*=info</code> in the Append these trace settings: field and click the Add icon. This trace string overwrites all settings that are listed under Current trace settings: and resets it to the default.</li> <li>Extended</li> </ul> <p>To enable trace settings for a longer period, that is, for more than one session, enable trace through the Helm chart. </p> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/adsyslog/#changing-the-language-used-in-the-log-file","title":"Changing the language used in the log file","text":"<p>Changing the language in the log file is not supported at this time.</p>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/adsyslog/#log-file-format","title":"Log file format","text":"<p>For more information about log formats, see Open Liberty Log Format.</p>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/logging_tracing_containers_and_new_services/","title":"Logging and tracing for containers and new services","text":"<p>Log levels and trace strings are set in your <code>custom-values.yaml</code> file. Configure and Access Logs provides more detail on how to configure logging in Helm amd how to access Kubernetes container logs. </p>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/logging_tracing_containers_and_new_services/#prerequisite","title":"Prerequisite","text":"<p>Install and configure Content Composer, Digital Asset Management, and others to your HCL Digital Experience (DX) Compose deployment.</p>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/logging_tracing_containers_and_new_services/#trace-string-format","title":"Trace string format","text":"<pre><code>The trace strings must use the following format. Any text not in angled brackets (\"&lt;&gt;\") should not be changed:\n\n```\nhcl.logging.&lt;app-name&gt;.client.&lt;severity&gt;.&lt;client-hierarchy&gt;.*=all\n```\n\nReplace the text strings in angled bracket placeholders as described in this section.\n</code></pre> <ul> <li> <p>app-name</p> <p>The application name is configured in the shared settings. The following values are currently in use:</p> <ul> <li><code>medialibrary</code> - for Digital Asset Management (DAM)</li> <li><code>content-ui</code> - for Content Composer</li> </ul> </li> <li> <p>severity</p> <p>This presents the logger severity level. The values used are:</p> <ul> <li><code>info</code></li> <li><code>debug</code></li> </ul> </li> <li> <p>client-hierarchy</p> <p>This specifies the subsections of the client application where tracing can be enabled. It is specified in dot-separated trace strings and is converted to colon-separated trace strings. The exact hierarchy depends on the client application. Examples include:</p> <ul> <li><code>app.*</code></li> <li><code>app.redux.*</code></li> <li><code>app.redux.actions.*</code></li> </ul> </li> <li> <p>Example trace strings</p> <p>The following are some examples of full trace strings for Content Composer, DAM, and their results:</p> <ul> <li><code>hcl.logging.medialibrary.*=all</code> - Enables debug message logging for all files in the DAM application user interface source folder app/redux/actions. Specifically, the debug string <code>client:debug:app:redux:actions:*</code> is set for the DAM client logger. This tracing is enabled either permanently or just for the current HCL DX Compose WebEngine container.</li> </ul> <p>HCL Digital Experience Compose v9.5 uses the Open Liberty trace facilities to create trace information.</p> <p>If you need detailed trace output of Content Composer or DAM to troubleshoot a problem, follow the steps in the succeeding sections.</p> </li> </ul> <p>Note</p> <p>The following tracing configurations for enabling tracing only apply to client-side logging. The Warning The configured trace state included the following specifications that do not match any loggers currently registered in the server: ''hcl.logging.content-ui.=all:hcl.logging.medialibrary.=all:hcl.logging.presentation-designer.=all'' Ignore this message if the trace specifications ''hcl.logging.content-ui.=all:hcl.logging.medialibrary.*=all'' are valid. can be ignored.</p>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/logging_tracing_containers_and_new_services/#enabling-tracing-permanently","title":"Enabling tracing permanently","text":"<ol> <li> <p>Adjust the Helm chart WebEngine trace setting.</p> <p>For example, to trace all events, use the following value:</p> <pre><code>hcl.logging.content-ui.*=all \nhcl.logging.medialibrary.*=all\nhcl.logging.presentation-designer.*=all\n</code></pre> </li> <li> <p>Apply the Helm chart.</p> </li> </ol>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/logging_tracing_containers_and_new_services/#enabling-tracing-for-the-current-hcl-dx-compose-session","title":"Enabling tracing for the current\u00a0HCL DX Compose\u00a0session","text":"<ol> <li>Click the Administration menu icon. Then, click Tracing:\u00a0Gather data about the site.</li> <li> <p>Enter any of the following values in the Append these trace settings field.</p> <p>For example, to trace all events, enter the following value:</p> <pre><code>hcl.logging.content-ui.*=all \nhcl.logging.medialibrary.*=all\nhcl.logging.presentation-designer.*=all\n</code></pre> </li> </ol> <p>After a trace string is added or removed in the Tracing portlet, the DX Compose platform page containing the Tracing portlet application must be refreshed in the browser.</p>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/logging_tracing_containers_and_new_services/#viewing-logs-in-the-browser-console-using-developer-tools","title":"Viewing logs in the browser console using developer tools","text":"<p>You can view the client logs using the developer tools in the web browser. The following image shows an example on how to view the logs of Content Composer.</p> <p></p> <p>Important</p> <p>Open Liberty consolidates the trace strings list by removing strings that are logically contained within others. For example, if you have a string <code>x.y.z.*=all</code> in the list, it disappears when you add <code>x.y.*=all</code></p> Related information <ul> <li>Troubleshooting your Helm deployment </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/open_liberty_logs/","title":"Open Liberty tracing and log files","text":"<p>Use Open Liberty log files and tracing to troubleshoot problems with HCL WebEngine.</p> <p>For more information, refer to Log and trace configuration.</p>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/","title":"HCL WebEngine runtime logs","text":"<p>If tracing is enabled, HCL Digital Experience (DX) Compose WebEngine generates a log file during run time that contains messages and trace information.</p> <p>The default runtime log file is shown:</p> <p>/opt/openliberty/wlp/usr/servers/defaultServer/logs/trace.log</p> <p>See the topic System event logging for details on how to configure logging and for information on the grammar of the \"trace string\" configuration key.</p> <p>The following information describes trace loggers for particular situations and problem symptoms. Enabling the trace loggers can slow down HCL WebEngine.</p> <p>Note</p> <p>If there are problems with portal administration portlets, the error is not caused by the portlet code itself, but by the underlying function for which the portlet provides the UI. Therefore, the portlet trace strings are not listed here. If there are issues with these portlets, provide the trace strings of the underlying function. If you need traces or logs for portlets, you can learn how to obtain them from HCL Support.</p>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/#access-control","title":"Access control","text":"<ul> <li> <p>When to use</p> <p>Enable this tracer if you want permissions for resources to be explained in detail, need to verify the correctness of a permission, or need to isolate a defect in access control.</p> </li> <li> <p>Trace string</p> <pre><code>com.ibm.wps.ac.*=all\n</code></pre> </li> <li> <p>Additional comments</p> <p>The traces are easier to evaluate while HCL WebEngine usage is low.</p> <p>Important: Enabling this logger creates large log files.</p> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/#authentication","title":"Authentication","text":"<ul> <li> <p>When to use</p> <p>Enable this tracer if you want to debug login, logout, and impersonation issues.</p> </li> <li> <p>Trace string</p> <pre><code>com.ibm.wps.services.puma.*=all:   \ncom.ibm.wps.puma.*=all:  \ncom.ibm.wps.auth.*=all: \ncom.ibm.wps.sso.*=all: \ncom.ibm.wps.um.*=all: \ncom.ibm.wps.services.authentication.*=all\n</code></pre> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/#command","title":"Command","text":"<ul> <li> <p>When to use</p> <p>Use to turn on all command trace loggers.</p> </li> <li> <p>Trace string</p> <pre><code>com.ibm.wps.commands.*=all\n</code></pre> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/#layout-model","title":"Layout model","text":"<ul> <li> <p>When to use</p> <p>Enable these messages if you want to get more information on how pages are constructed, if you need to verify page lists that are displayed on HCL WebEngine for correctness, or if you must isolate an error in the HCL WebEngine aggregation component.</p> </li> <li> <p>Trace string</p> <pre><code>com.ibm.wps.model.*=all: \ncom.ibm.wps.composition.*=all\n</code></pre> </li> <li> <p>Additional comments</p> <p>The traces are easier to evaluate while HCL WebEngine usage is low.</p> <p>Important: Enabling this logger creates large log files.</p> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/#credential-vault","title":"Credential vault","text":"<ul> <li> <p>When to use</p> <p>Investigate issues with the credential retrieval or storage from the vault.</p> </li> <li> <p>Trace string</p> <pre><code>com.ibm.wps.sso.credentialvault.*=all:   \ncom.ibm.wps.command.credentialvault.*=all:   \ncom.ibm.wps.portletservice.credentialvault.*=all:  \ncom.ibm.wps.services.credentialvault.*=all:  \ncom.ibm.portal.portlet.service.credentialvault.*=all\n</code></pre> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/#database","title":"Database","text":"<ul> <li> <p>When to use</p> <p>Use to deal with generated SQL statements and the internal flow in the HCL WebEngine database layer.</p> </li> <li> <p>Trace string</p> <pre><code>com.ibm.wps.datastore.*=all:   \ncom.ibm.wps.services.datastore.*=all\n</code></pre> </li> <li> <p>Additional comments</p> <p>Important: Enabling this logger creates large log files.</p> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/#engine","title":"Engine","text":"<ul> <li> <p>When to use</p> <p>Use to enable all engine trace loggers.</p> </li> <li> <p>Trace string</p> <pre><code>com.ibm.wps.engine.*=all\n</code></pre> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/#general","title":"General","text":"<ul> <li> <p>Trace string</p> <pre><code>com.ibm.wps.*=all\n</code></pre> <p>Note</p> <pre><code>If you want to use general tracing but do not want render times to be displayed for such portlets, you must selectively disable tracing by using the following trace string:\n\n ```\n com.ibm.wps.pe.PortletRenderTimeLoggingHelper=info\n ```\n</code></pre> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/#mail-service","title":"Mail Service","text":"<ul> <li> <p>When to use</p> <p>Use to diagnose problems with the Mail Service.</p> </li> <li> <p>Trace string</p> <pre><code>com.ibm.wps.services.mail.*=all   \n</code></pre> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/#mapping-urls","title":"Mapping URLs","text":"<ul> <li> <p>When to use</p> <p>Use to diagnose problems with the user-defined mappings of URLs.</p> </li> <li> <p>Trace string</p> <pre><code>com.ibm.wps.mappingurl.*=all:   \ncom.ibm.wps.command.mappingurl.*=all\n</code></pre> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/#personalization","title":"Personalization","text":"<ul> <li> <p>Trace string</p> <pre><code>com.ibm.websphere.personalization.*=all: \ncom.ibm.dm.pzn.ui.*=all\n</code></pre> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/#portlet-container","title":"Portlet container","text":"<ul> <li> <p>Trace string</p> <pre><code>com.ibm.wps.pe.pc.*=all:   \norg.apache.jetspeed.portlet.Portlet=all:  \njavax.portlet.Portlet=all\n</code></pre> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/#portlet-environment","title":"Portlet environment","text":"<ul> <li> <p>Trace string</p> <pre><code>com.ibm.wps.pe.ext.*=all:   \ncom.ibm.wps.pe.factory.*=all:   \ncom.ibm.wps.pe.om.*=all:   \ncom.ibm.wps.pe.util.*=all\n</code></pre> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/#portlet-load-monitoring","title":"Portlet Load Monitoring","text":"<ul> <li> <p>When to use</p> <p>Use to diagnose problems with Portlet Load Monitoring (PLM).</p> </li> <li> <p>Trace string</p> <pre><code>com.ibm.wps.pe.pc.waspc.plm.*=all:\ncom.ibm.wps.command.plm.*=all \n</code></pre> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/#deployment","title":"Deployment","text":"<ul> <li> <p>Trace string</p> <pre><code>com.ibm.wps.pe.mgr.*=all:   \ncom.ibm.wps.services.deployment.*=all:   \ncom.ibm.wps.command.applications.*=all:   \ncom.ibm.wps.command.portlets.*=all\n</code></pre> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/#portlets","title":"Portlets","text":"<ul> <li> <p>When to use</p> <p>Use to diagnose problems with portlets.</p> </li> <li> <p>Trace string</p> <pre><code>com.ibm.wps.portlets.*=all:   \norg.apache.jetspeed.portlet.PortletLog=all\n</code></pre> </li> <li> <p>Additional comments</p> <p>Enables tracing for all portlets. Therefore, place the suspect portlet on a separate page for testing.</p> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/#services-eventbroker","title":"Services: EventBroker","text":"<ul> <li> <p>Trace string</p> <pre><code>com.ibm.wps.services.registry.EventHandlerRegistry=all:   \ncom.ibm.wps.services.events.*=all\n</code></pre> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/#services-finder","title":"Services: Finder","text":"<ul> <li> <p>When to use</p> <p>Use for debugging the resolution of file names.</p> </li> <li> <p>Trace string</p> <pre><code>com.ibm.wps.services.finder.*=all\n</code></pre> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/#services-loader","title":"Services: Loader","text":"<ul> <li> <p>When to use</p> <p>Use to trace the dynamic class loading that is done by this service.</p> </li> <li> <p>Trace string</p> <pre><code>com.ibm.wps.services.ServiceManager=all\n</code></pre> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/#servicesnaming","title":"ServicesNaming","text":"<ul> <li> <p>When to use</p> <p>Use to debug the lookup of objects by the naming service.</p> </li> <li> <p>Trace string</p> <pre><code>com.ibm.wps.services.naming.*=all\n</code></pre> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/#servicesnavigator","title":"ServicesNavigator","text":"<ul> <li> <p>When to use</p> <p>Use to diagnose problems with parts of page aggregation and display.</p> </li> <li> <p>Trace string</p> <pre><code>com.ibm.wps.services.navigator.*=all\n</code></pre> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/#servicesregistry","title":"ServicesRegistry","text":"<ul> <li> <p>When to use</p> <p>Use to view the policies of the internal portlet object caching and watch it reload its content.</p> </li> <li> <p>Trace string</p> <pre><code>com.ibm.wps.services.registry.*=all\n</code></pre> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/#services","title":"Services","text":"<ul> <li> <p>When to use</p> <p>Use for turning on tracing for all services.</p> </li> <li> <p>Trace string</p> <pre><code>com.ibm.wps.services.*=all\n</code></pre> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/#sso","title":"SSO","text":"<ul> <li> <p>When to use</p> <p>Use to turn on all single sign-on (SSO) tracer loggers.</p> </li> <li> <p>Trace string</p> <pre><code>com.ibm.wps.sso.*=all\n</code></pre> </li> <li> <p>Additional comments</p> <p>Use this logger if errors occur when you use the Security Vault task on the Security page of the Administration pages.</p> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/#wsrp-administration","title":"WSRP administration","text":"<ul> <li> <p>When to use</p> <p>Use to diagnose problems that occur during the administration of Web Services for Remote Portlets (WSRP) with HCL WebEngine.</p> </li> <li> <p>Trace string</p> <pre><code>com.ibm.wps.command.wsrp.*=all:  \ncom.ibm.wps.wsrp.cmd.*=all\n</code></pre> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/#wsrp-consumer","title":"WSRP Consumer","text":"<ul> <li> <p>When to use</p> <p>Use to diagnose problems that occur during the use of WSRP with HCL WebEngine as a Consumer.</p> </li> <li> <p>Trace string</p> <pre><code>com.ibm.wps.wsrp.consumer.*=all\n</code></pre> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/#wsrp-producer","title":"WSRP Producer","text":"<ul> <li> <p>When to use</p> <p>Use to diagnose problems that occur during the use of WSRP with HCL WebEngine as a Producer.</p> </li> <li> <p>Trace string</p> <pre><code>com.ibm.wps.wsrp.producer.*=all \n</code></pre> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/run_logs/#xml-configuration-interface","title":"XML configuration interface","text":"<ul> <li> <p>When to use</p> <p>Use to diagnose problems with the XML import/export of HCL WebEngine configurations.</p> </li> <li> <p>Trace string</p> <pre><code>com.ibm.wps.command.xml.*=all\n</code></pre> </li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/verbosegc/","title":"Verbosegc in Java VM logs","text":"<p>Verbose garbage collection (verbosegc) logging is often required when tuning and debugging many issues, and has negligible impact on system performance.</p> <p>The default HCL Digital Experience (DX) WebEngine installation enables verbosegc logging and configures the following generic Java Virtual Machine (JVM) argument:</p> <p><code>-Xlog:gc*:file=verbosegc.log:time</code></p> <p>The verbosegc log file name is <code>verbosegc.log</code>. </p> <p>The default HCL Digital Experience Compose installation redirects the verbosegc output to the verbosegc.log file.</p> <p>For more information about configuring the JVM through Open Liberty, see Logging and Tracing in Open Liberty.</p>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/wcm_logs/","title":"HCL Web Content Manager tracing","text":"<p>Enable the use of Open Liberty trace facilities to create trace information for Web Content Manager (WCM). You can enable this tracing either permanently or for just the current HCL Digital Experience (DX) Compose WebEngine session.</p> <p>WCM uses the Open Liberty trace facilities to create trace information. If you need detailed trace output of WCM to debug a problem, follow these steps:</p>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/wcm_logs/#enabling-static-extended-tracing","title":"Enabling static (extended) tracing","text":"<p>Static tracing is recommended when there is a need to capture data, as it collects data from server startup until problem recreation.</p> <ol> <li>Enable tracing in the Helm chart for the desired trace specification.</li> <li>Apply the Helm changes.</li> </ol>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/wcm_logs/#enabling-dynamic-tracing","title":"Enabling dynamic tracing","text":"<p>You can use dynamic tracing for situations that do not permit a server restart.</p> <ol> <li>Log in to the WebEngine Admin UI as the Portal administrator.</li> <li>Select Administration &gt; Portal Analysis &gt; Enable Tracing**. The Enable Tracing portlet appears.</li> <li>Based on the following table, enter the required trace string in the Append these trace settings field.</li> <li> <p>Click the Add icon. Enabling tracing updates the Current trace settings field.</p> <p>Note</p> <p>Restarting HCL WebEngine removes traces that were set by using the Enable Tracing Administration portlet.</p> </li> </ol>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/wcm_logs/#trace-strings","title":"Trace strings","text":"<p>In HCL DX Compose WebEngine, the following trace strings are available:</p> Issue Trace String General Search Traces -   <code>com.ibm.hrl.*=all:</code>-   <code>com.ibm.crawler.*=all:</code>-   <code>com.ibm.portal.search.*=all:</code>-   <code>com.ibm.lotus.search.*=all:</code>-   <code>com.ibm.siapi.search.*=all</code> WCM Seedlist -   <code>com.ibm.workplace.wcm.searchseed.*=finest:</code>-   <code>com.ibm.lotus.search.providers.content.seedlist.*=finest:</code>-   <code>com.ibm.workplace.wcm.seedlist.*=finest:</code>-   <code>com.ibm.workplace.wcm.services.*=finest</code> WCM REST API -   <code>com.ibm.workplace.wcm.rest.*=all:</code>-   <code>com.hcl.wcm.rest.*=all:</code> Search Token issues -   <code>com.ibm.ilel.*=all</code> <p>The following table lists all trace strings available for HCL DX WebEngine releases:</p> Issue Trace String General Information -   <code>com.ibm.workplace.wcm.*=all</code>-   <code>com.aptrix.*=all</code>-   <code>com.presence.connect.*=all</code> Syndication -   Refer to Collecting Data: Syndication for HCL Portal 8.5 Security -   <code>com.ibm.wps.engine.*=all</code>-   <code>com.ibm.wps.services.puma.*=all</code>-   <code>com.ibm.wps.puma.*=all:com.ibm.wps.um.*=all</code>-   <code>com.ibm.wps.sso.*=all</code>-   <code>com.ibm.wps.services.authentication.*=all</code>-   <code>com.ibm.ws.security.*=all</code>-   <code>com.ibm.ws.wim.*=all:com.ibm.websphere.wim.*=all</code>-   <code>com.ibm.wsspi.wim.*=all:com.ibm.workplace.wcm.*=all</code>-   <code>com.aptrix.*=all</code>-   <code>com.presence.connect.wmmcomms.*=all</code>-   <code>com.presence.connect.profile.*=finest</code> Authoring Portlet -   <code>com.ibm.workplace.wcm.app.ui.*=all</code>-   <code>com.aptrix.*=all</code>-   <code>com.presence.connect.*=all</code>Note: Client-side trace required. When recreating the issue, it is important to note any JavaScript exceptions you may see in the browser. Additionally, you need to collect some browser-side information so we can see the requests being passed.There are multiple methods for collecting this information:-   The JavaScript console of the browser-   Fiddler-   Firefox HTTP Header Live-   Firefox Firebug API -   <code>com.ibm.workplace.wcm.*=all</code>-   <code>com.aptrix.*=all:</code>-   <code>com.presence.connect.*=all</code> WCM REST API -   <code>com.ibm.workplace.wcm.*=all</code> JSR 286 Web Content Viewer -   <code>com.aptrix.*=all</code>-   <code>com.presence.*=all</code>-   <code>com.ibm.workplace.wcm.*=fine</code>-   <code>com.ibm.workplace.wcm.app.ui.portlet.*=all</code>-   <code>com.ibm.websphere.wmm.*=all</code>-   <code>com.ibm.wps.services.puma.*=all</code>-   <code>com.ibm.wps.puma.*=all</code>-   <code>com.ibm.workplace.wcm.resolver.*=all</code>-   <code>com.ibm.workplace.wcm.services.addressability.*=all</code> Remote Web Content Viewer Portlet On the remote rendering server:-   <code>com.ibm.workplace.wcm.app.ui.remote.*=all</code>-   <code>com.ibm.workplace.wcm.app.ui.portlet.*=all</code>If the credential vault is in use, add the following the remote rendering server traces:-   <code>com.ibm.wps.services.credentialvault.*=finest</code>-   <code>com.ibm.wps.sso.credentialvault.*=finest</code>-   <code>com.ibm.wps.command.credentialvault.*=finest</code>-   <code>com.ibm.wps.engine.Servlet.*=finest</code>On the rendering server:-   <code>com.aptrix.*=all</code>-   <code>com.presence.connect.wmmcomms.*=all</code>-   <code>com.ibm.wps.services.puma.*=all</code>-   <code>com.ibm.wps.puma.*=all</code>-   <code>com.ibm.wps.sso.*=all</code>-   <code>com.ibm.wps.services.authentication.*=all</code>-   <code>com.ibm.ws.security.*=all</code>-   <code>com.ibm.ws.wim.*=all:com.ibm.websphere.wim.*=all</code>-   <code>com.ibm.wsspi.wim.*=all</code> Caching -   <code>com.presence.connect.cache.*=finest</code>-   <code>com.presence.connect.business.*=finest</code>-   <code>com.aptrix.pluto.renderer.*=finest</code>-   <code>com.ibm.workplace.wcm.services.content.*=finest</code> Pre-rendering -   <code>com.aptrix.cacher.*=finest</code> Enterprise Content Management Integration Document Picker issues:-   <code>com.ibm.wps.proxy.*=all</code>-   <code>com.ibm.mm.proxy.*=all</code>-   <code>com.ibm.lotus.quickr.*=all</code>Personalization Federated Document issues:-   <code>com.ibm.workplace.wcm.pzn.ecm.*=all</code>-   <code>com.ibm.websphere.personalization.*=all</code>Note: Client-side trace required. When recreating the issue, it is important to note any JavaScript exceptions you may see in the browser. Additionally, you need to collect some browser-side information so we can see the requests being passed.There are multiple methods for collecting this information:-   The JavaScript console of the browser-   Fiddler-   Firefox HTTP Header Live-   Firefox Firebug Blogs and Wikis -   <code>com.ibm.workplace.wcm.*=all</code>-   <code>com.aptrix.*=all:com.presence.*=all</code>-   <code>com.ibm.icm.jcr.*=finest</code>-   <code>com.ibm.icm.ci.schema.impl.SchemaService=info</code> Java Content Repository (JCR) -   <code>com.ibm.icm.*=finest</code>-   <code>com.ibm.icm.ci.schema.impl.SchemaService=info</code> Java Content Repository (JCR) Export/Import of Library -   <code>com.ibm.icm.jcr.command.*=all</code> Web Content Integrator -   <code>com.ibm.workplace.feed.*=finest</code> Migration -   <code>com.ibm.workplace.wcm.app.migration.* = all</code> Seedlist and Search WCM Seedlist issues:-   <code>com.ibm.lotus.search.providers.content.seedlist.*=finer</code>-   <code>com.ibm.workplace.wcm.seedlist.*=finer</code>-   <code>com.ibm.workplace.wcm.services.*=finer</code>WCM Search issues:-   <code>com.aptrix.pluto.cmpnt.*=finest</code>-   <code>com.ibm.workplace.wcm.data.siapi.*=finest</code>-   <code>com.ibm.workplace.wcm.services.siapi.*=finest</code> Personalization For issues with personalization in HCL WebEngine (rules, campaigns, application objects): -   <code>com.ibm.websphere.personalization.*=all:com.ibm.websphere.query.*=all</code>For issues with personalization and security:-   <code>com.ibm.webshere.personalization.=finest:</code>-   <code>com.ibm.icm.ci.query.impl.ResultSetProcessor=finest</code>-   <code>com.ibm.icm.ci.query.impl.QueryProcessor=finest:com.ibm.wps.services.puma.=finest:</code>-   <code>com.ibm.wps.puma.*=finest</code>For issues with personalization and Web Content Management (WCM):-   <code>com.ibm.websphere.personalization.*=all:com.ibm.websphere.query.*=all:</code>-   <code>com.ibm.workplace.wcm.pzn.*=all:com.ibm.workplace.wcm.services.pzn.*=all</code>For issues with personalization and JCR:-   <code>com.ibm.websphere.personalization.*=all:com.ibm.websphere.query.*=all:</code>-   <code>com.ibm.icm.*=finest:com.ibm.icm.ci.schema.impl.SchemaService=info</code>For issues with personalization authoring performance:-   <code>com.ibm.websphere.personalization.*=all:com.ibm.wps.caf.*=all</code>For issues with personalization runtime performance:-   <code>com.ibm.websphere.personalization.*=all</code>For issues with personalization publishing:-   <code>com.ibm.websphere.personalization.*=all</code>For configuration issues with personalization authoring environment (Navigator Portlet, Editor Portlet, and List Portlet):-   <code>com.ibm.websphere.personalization.*=all:com.ibm.wps.caf.*=all</code> Java Message Service (JMS) -   <code>com.ibm.workplace.wcm.services.messaging.*=all</code>-   <code>com.ibm.workplace.wcm.messaging.*=all</code>-   <code>Messaging=all:JMSApi=all:JMSServer=all</code> Advanced Editor (RTE) Enable Java Console logging on client system and send output.Note: Client-side trace required. When recreating the issue, it is important to note any JavaScript exceptions you may see in the browser. Additionally, you need to collect some browser-side information so we can see the requests being passed.There are multiple methods for collecting this information:-   The JavaScript console of the browser-   Fiddler-   Firefox HTTP Header Live-   Firefox Firebug Multilingual Solutions MLS Install Trace location: [WAS_PROFILE_ROOT]/ConfigEngine/log/ConfigTrace.logConfiguration Issues:-   <code>com.ibm.workplace.wcm.ml.utils.*=all</code>-   <code>com.ibm.workplace.wcm.ml.messaging.*=all</code>Authoring plugin:-   <code>com.ibm.workplace.wcm.ml.utils.*=all</code>-   <code>com.ibm.workplace.wcm.ml.processor.*=all</code>-   <code>com.ibm.workplace.wcm.ml.MLServlet=all</code>-   <code>com.ibm.workplace.wcm.ml.ServletUtils=all</code>Workflow Traces:1.  Localize stage: -   <code>com.ibm.workplace.wcm.ml.utils.*=all</code>-   <code>com.ibm.workplace.wcm.ml.workflowactions.LocalizeMLCustomWorkflowAction=all</code>-   <code>com.ibm.workplace.wcm.ml.workflowactions.service.LocalizeCustomWorkflowActionService=all</code>-   <code>com.ibm.workplace.wcm.ml.workflowactions.service.AbstractSyncUpdateCustomWorkflowActionService=all</code>-   <code>com.ibm.workplace.wcm.ml.workflowactions.service.AbstractMLCustomWorkflowActionService=all</code>-   <code>com.ibm.workplace.wcm.ml.workflowactions.WorkflowSwitcherWorkflowAction=all</code>2.  Regionalize stage:-   <code>com.ibm.workplace.wcm.ml.utils.*=all</code>-   <code>com.ibm.workplace.wcm.ml.workflowactions.RegionalizeMLCustomWorkflowAction=all</code>-   <code>com.ibm.workplace.wcm.ml.workflowactions.service.RegionalizeCustomWorkflowActionService=all</code>-   <code>com.ibm.workplace.wcm.ml.workflowactions.service.AbstractSyncUpdateCustomWorkflowActionService=all</code>-   <code>com.ibm.workplace.wcm.ml.workflowactions.service.AbstractMLCustomWorkflowActionService=all</code>-   <code>com.ibm.workplace.wcm.ml.workflowactions.WorkflowSwitcherWorkflowAction=all</code>3.  Pending Publish stage:-   <code>com.ibm.workplace.wcm.ml.utils.*=all</code>-   <code>com.ibm.workplace.wcm.ml.workflowactions.SyncPublishMLCustomWorkflowAction=all</code>-   <code>com.ibm.workplace.wcm.ml.workflowactions.service.SyncPublishCustomWorkflowActionService=all</code>-   <code>com.ibm.workplace.wcm.ml.workflowactions.service.AbstractSyncStageCustomWorkflowActionService=all</code>-   <code>com.ibm.workplace.wcm.ml.workflowactions.service.AbstractMLCustomWorkflowActionService=all</code>4.  Pending Expired stage:-   <code>com.ibm.workplace.wcm.ml.utils.*=all</code>-   <code>com.ibm.workplace.wcm.ml.workflowactions.SyncExpireMLCustomWorkflowAction=all</code>-   <code>com.ibm.workplace.wcm.ml.workflowactions.service.SyncExpireCustomWorkflowActionService=all</code>-   <code>com.ibm.workplace.wcm.ml.workflowactions.service.AbstractSyncStageCustomWorkflowActionService=all</code>-   <code>com.ibm.workplace.wcm.ml.workflowactions.service.AbstractMLCustomWorkflowActionService=all</code>5.  Delete stage:-   <code>com.ibm.workplace.wcm.ml.utils.*=all</code>-   <code>com.ibm.workplace.wcm.ml.workflowactions.SyncDeleteMLCustomWorkflowAction=all</code>-   <code>com.ibm.workplace.wcm.ml.workflowactions.service.SyncDeleteCustomWorkflowActionService=all</code>-   <code>com.ibm.workplace.wcm.ml.workflowactions.service.AbstractMLCustomWorkflowActionService=all</code>6.  Servlet Rendering Plugin Traces:-   <code>com.ibm.workplace.wcm.ml.utils.*=all</code>-   <code>com.ibm.workplace.wcm.ml.processor.LocaleNavigatorProcessorImpl=all</code>7.  Portlet Rendering Plugin Traces:-   <code>com.ibm.workplace.wcm.ml.utils.*=all</code>-   <code>com.ibm.workplace.wcm.ml.contextprocessor.*=all</code>8.  Library Copy Traces:-   <code>com.ibm.workplace.wcm.ml.utils.*=all</code>-   <code>com.ibm.workplace.wcm.ml.processor.LibraryCopyContextProcessorImpl=all</code> Workflow -   <code>com.ibm.workplace.wcm.api.*=finest</code>-   <code>com.aptrix.pluto.workflow.*=finest</code>-   <code>com.ibm.workplace.wcm.services.workflow.*=finest</code>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/logging_and_tracing_clientside/","title":"Logging and tracing client-side rendering","text":"<p>Learn how to enable client-side logging and tracing of your HCL Digital Experience (DX) Compose pages.</p> <p>Portal pages that are rendered in client-side aggregation mode differ in their logging behavior from portal pages rendered in server-side mode. For client-side rendered pages, a considerable amount of code is written in JavaScript that is executed in the corresponding browser JavaScript engine rather than on the server. As a result, the corresponding logging and tracing information is collected in the browser and not on the server side.</p> <ul> <li>Enabling client side logging and tracing Modify the custom properties <code>cc.isDebug</code> and <code>cc.traceConfig</code> in the WP CommonComponentConfigService to enable client-side logging and tracing.</li> <li>Capturing the log statements Client-side log statements are written to the JavaScript console of your browser.</li> <li>Enabling module tracing Enable tracing to debug your module information to improve performance through trace string or with cookies.</li> </ul>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/logging_and_tracing_clientside/csa2t_trbl_captlogs/","title":"Capturing the log statements","text":"<p>Client side log statements are written to the JavaScript console of your browser.</p> <p>There are various ways of accessing the data written to the JavaScript console, depending on the type of browser that you use. In Microsoft Edge, Firefox, or Google Chrome, you access the console by right-clicking Inspect.</p>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/logging_and_tracing_clientside/csa2t_trbl_nbllogtrc/","title":"Enabling client-side logging and tracing","text":"<p>Modify the custom properties <code>cc.isDebug</code> and <code>cc.traceConfig</code> in the WP CommonComponentConfigService to enable client-side logging and tracing.</p> <ol> <li> <p>In the Helm chart, set <code>WP CommonComponentConfigService cc.isDebug=true</code></p> </li> <li> <p>Set the value of the property <code>cc.traceConfig</code> property for WP CommonComponentConfigService to a value that represents a correctly formatted JavaScript array of strings. Each string in the array is the name of the component that you want to trace. You can use the wildcard character asterisk (<code>**\\***</code>) for multiple matching.</p> <p>Example:</p> <pre><code>[\"com.ibm.mashups.enabler.*\",\"com.ibm.mashups.builder.model.ContextMenu\"]\n</code></pre> <p>This value adds client-side trace-logging for all components in the namespace <code>com.ibm.mashups.enabler</code> and the component <code>com.ibm.mashups.builder.model.ContextMenu</code>.</p> </li> <li> <p>Apply the Helm chart.</p> </li> </ol> <p>Examples: </p> <p>To activate all iWidget-related logging and tracing, use the following line:</p> <pre><code>traceConfig: [\"com.ibm.mm.iwidget.*\"]\n</code></pre> <p>To set multiple patterns, separate them by commas. For example:</p> <pre><code>traceConfig: [\"com.ibm.mm.iwidget.*\", \"com.ibm.portal.*\", \"com.ibm.portal.wps.*\"]\n</code></pre>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/logging_and_tracing/logging_and_tracing_clientside/csa2t_trble_tracemod/","title":"Enabling module tracing","text":"<p>Enable tracing to debug your module information and improve performance through trace string or with cookies.</p> <ol> <li> <p>Enable tracing through trace string.</p> <ol> <li> <p>To debug a module or theme, enable portal tracing with the following trace string.</p> <pre><code>com.ibm.wps.resourceaggregator.CombinerDataSource.RemoteDebug=all\n</code></pre> <p>This string loads the modules by using separate links and script tags, isolating each one independently. If the module definition defines a debug version, it also loads debug versions of each contribution. Typically, the debug version is an uncompressed version of the &lt;script&gt; tag that contains the same data as the normal version.</p> <p>Both using separate links and by using uncompressed &lt;script&gt; tags makes it easier to debug a running HCL WebEngine environment from the browser.</p> </li> </ol> </li> <li> <p>Enable tracing with cookies.</p> <ol> <li> <p>In the Helm chart set, WP ConfigService <code>resourceaggregation.client.debug.mode.allowed=true</code>.</p> </li> <li> <p>Apply the Helm changes.</p> </li> </ol> </li> </ol> <p>When a user sets a cookie that is named <code>com.ibm.portal.resourceaggregator.client.debug.mode</code> to <code>true</code>, debug versions of module contributions are loaded if they are defined. Modules are loaded without using separate links and script tags. All resources are downloaded as a combined unit in that case.</p>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/maintenance_mode/","title":"Maintenance mode","text":"<p>The HCL Digital Experience (DX) Compose Helm charts provide the capability to start application containers in a maintenance mode. This can be useful to debug issues that occur during the containers lifecycle, especially during the startup phase.</p>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/maintenance_mode/#effects","title":"Effects","text":"<p>The applications with maintenance mode enabled experience the following effects:</p> <ul> <li>The application containers within the Pods always remain <code>ready</code> and <code>live</code>, regardless of the actual application status.</li> <li>The startup routine of the application is skipped, and the container does not not execute its main entrypoint routines.</li> <li>The application itself is not started, resulting in the container to be idle until manual intervention.</li> </ul> <p>These effects in the applications ensure that:</p> <ul> <li>Kubernetes always allows for traffic routing into the affected application containers because the <code>ready</code> probe is always true.</li> <li>Kubernetes does not restart Pods due to containers not being <code>live</code>.</li> </ul> <p>The affected application does not start without manual intervention. Enabling maintenance mode impacts application availability for end-users.</p> <p>Note that depending applications are affected too, because they cannot communicate with the application in maintenance mode until you either manually start it or turn off maintenance mode again.</p>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/maintenance_mode/#configuration","title":"Configuration","text":"<p>In your <code>custom-values.yaml</code>, you can define the state of the maintenance mode on a per application basis. This allows you to limit the scope of your actions.</p> <p>Adjust the <code>maintenanceMode</code> section accordingly.</p> <p>Sample configuration:</p> <pre><code># Allows to start a Pod and its containers in maintenance mode.\n# Pods will not perform a regular execute of the application but will remain idle\n# This allows for debugging inside the containers if required, e.g. if configuration fixes are required\nmaintenanceMode:\n    contentComposer: false\n    # Enabling maintenance mode for WebEngine\n    webEngine: true\n    damPluginGoogleVision: false\n    digitalAssetManagement: false\n    imageProcessor: false\n    openLdap: false\n    persistenceConnectionPool: false\n    persistenceNode: false\n    remoteSearch: false\n    ringApi: false\n    runtimeController: false\n    haproxy: false\n    licenseManager: false\n    damPluginKaltura: false\n</code></pre> <p>You then need to apply the changes by using <code>helm upgrade</code>:</p> <pre><code># Using helm upgrade to apply the changes\n# Adjust release name, reference to the helm charts and path to your custom-values.yaml accordingly\nhelm upgrade -n &lt;namespace&gt; &lt;release-name&gt; -f custom-values.yaml ./hcl-dx-deployment.tgz\n</code></pre> <p>After running the helm command, an explicit mention of your maintenance mode changes appears in the command response:</p> <pre><code># Using helm upgrade to apply the changes\n# Adjust release name, reference to the helm charts and path to your custom-values.yaml accordingly\nhelm upgrade -n &lt;namespace&gt; &lt;release-name&gt; -f custom-values.yaml ./hcl-dx-deployment.tgz\n\n# Release \"dx-deployment\" has been upgraded. Happy Helming!\n# NAME: dx-deployment\n# LAST DEPLOYED: Fri Dec  6 17:10:17 2024\n# NAMESPACE: dxns\n# STATUS: deployed\n# REVISION: 2\n# TEST SUITE: None\n# NOTES:\n# Installation of HCL DX 95_CF224 done.\n\n# See https://opensource.hcltechsw.com/digital-experience/latest/platform/kubernetes/overview/ for further information.\n# ATTENTION: Maintenance mode is enabled for Pods: webEngine\n</code></pre> <p>If you check the logs of the affected application, there is also a message regarding the maintenance mode:</p> <pre><code># Checking the logs of a Pod using kubectl\n# Please adjust namespace and pod name to match your deployment\nkubectl logs -n &lt;namespace&gt; &lt;release-name&gt;-web-engine-0 -c web-engine\n\n# Deployment type is: helm\n# Maintenance mode is: true\n# Listening for SIGTERM\n# Maintenance mode is enabled. This mode solely starts the container without any processes within it.\n</code></pre> <p>If you come from a state where the application that you want to set into maintenance mode is in an unhealthy state, you may need to delete the corresponding Pod for the changes to take effect. This is because Kubernetes does not apply a new configuration to Pods of a StatefulSet until the previous configuration has successfully started.</p> <p>In case you need to delete a Pod that is still in a broken state even though you have enabled the maintenance mode, use the following command as reference:</p> <pre><code># Delete the corresponding Pod using kubectl\n# Please adjust namespace and pod name to match your deployment\n\nkubectl delete pod -n &lt;namespace&gt; &lt;release-name&gt;-web-engine-0\n</code></pre>"},{"location":"deploy_dx/manage/working_with_compose/troubleshooting/maintenance_mode/#usage-with-webengine","title":"Usage with WebEngine","text":"<p>The DX WebEngine application performs certain actions during its regular startup routine. These actions are not executed when maintenance mode is enabled. In order to start the DX WebEngine JVM in maintenance mode, you must perform the following actions:</p> <p>To be done.</p>"},{"location":"getting_started/","title":"Getting started with DX Compose","text":"<p>Digital Experience (DX) Compose is a cloud-native platform for delivering content-centric and transactional digital experiences. DX Compose includes a core container called WebEngine. The WebEngine container is built on the Open Liberty platform to deliver fast-performing DX sites capable of using the latest Java Development Kit (JDK) and Java 2 Enterprise Edition (J2EE) levels.</p> <p>DX Compose is released under the HCLSoftware Continuous Delivery Support Policy, and will be releasing incremental and cumulative updates to progressively provide new features and fixes.</p> <ul> <li>Product overview This topic provides an overview of DX Compose.</li> <li>HCL DX offerings See the latest offerings for HCL Digital Experience.</li> <li>Architecture and dependencies Learn more about the transition of architecture from the Core container to the WebEngine container.</li> <li>System requirements See the system requirements to use the WebEngine container in your DX deployment.</li> <li>Download software Download HCL Digital Experience Compose from the HCL Software License Portal (Flexnet).</li> <li>Differences from DX Core Know the differences of WebEngine from the DX Core container.</li> <li>DX Compose limitations This topic enumerates the current limitations of DX Compose.</li> </ul>"},{"location":"getting_started/architecture_dependencies/","title":"Architecture and dependencies","text":"<p>The following images show the transition in terms of architecture from the DX Core container to the WebEngine container in DX Compose.</p> <p>The first diagram shows the architecture of the existing DX Core container.</p> <p></p> <p>The second diagram shows the architecture of the WebEngine container.</p> <p></p>"},{"location":"getting_started/architecture_dependencies/#dependencies","title":"Dependencies","text":"<p>For the correct version of Kubernetes to use, see the topic Kubernetes runtime.</p> <p>For production purposes, a Lightweight Directory Access Protocol (LDAP) server and DB2 are required. See System Requirements for more information.</p>"},{"location":"getting_started/differences/","title":"Differences from DX Core","text":"<p>This topic provides more information about the differences of the Digital Experience (DX) Compose WebEngine container from the DX Offerings Core container.</p>"},{"location":"getting_started/differences/#java","title":"Java","text":"<ul> <li>To ensure improved security, modern features, and enhanced performance, WebEngine transitioned from Java 7/8 to Java 11 and is planned to eventually support later versions of Java.</li> <li>WebEngine moved from IBM Java Development Kit (JDK) to Open JDK, specifically Temurin, to benefit from the latest updates and community support.</li> </ul>"},{"location":"getting_started/differences/#j2ee","title":"J2EE","text":"<p>To enhance your application's capabilities and maintain compatibility with modern standards, DX Compose migrated from Java 2 Enterprise Edition (J2EE) v6 to J2EE v8. This update includes adopting the following components, among others:</p> <ul> <li>Enterprise JavaBeans (EJB) 3.2: This version of EJB offers improved functionality and performance.</li> <li>Java Database Connectivity (JDBC) 4.x: This update to the JDBC API provides enhanced support for database operations.</li> <li>Servlet 4: This version introduces new features and improvements for handling web requests and responses.</li> <li>Java Message Service (JMS) 2: The latest update to the JMS API facilitates more efficient and flexible messaging.</li> </ul> <p>The migration process is streamlined by using pluggable configuration in Open Liberty, which makes it easier to transition to later versions of Java EE as they become available. In addition, planning for a transition to Jakarta EE will ensure that your application remains up-to-date with the evolving standards of enterprise Java technology.</p>"},{"location":"getting_started/differences/#libraries","title":"Libraries","text":"<p>HCL DX offerings utilize the IBM WebSphere Application Server (WAS) as the base application server, and include support for several old and outdated APIs such as Apache commons API, Hibernate, JSF, Struts, Spring, and more. In DX Compose, which is deployed on Open Liberty, these have been updated and are also now pluggable through configuration in the <code>server.xml</code>, allowing APIs to move to modern versions.</p>"},{"location":"getting_started/differences/#security","title":"Security","text":"<ul> <li>The security J2EE standards such as authentication and authorization have been updated with Open Liberty.</li> <li>The former Virtual Member Manager feature is no longer available in Open Liberty. However, features such as federation for multiple LDAPs are available.</li> <li>The file-based repository is configured out-of-the box. You can configure one or multiple LDAPs.</li> <li>The configuration is different with DX Compose. Instead of using the Configuration Wizard or ConfigEngine, the configuration now happens through the Helm chart, influencing the <code>server.xml</code> and related DX Compose resource environment providers.</li> <li>User and group management is only possible for read-only scenarios.</li> </ul>"},{"location":"getting_started/differences/#deployment","title":"Deployment","text":"<ul> <li>DX Compose is available for Kubernetes-based deployments and Docker Compose for developers. It ships out-of-the-box with Derby and can be transitioned to other databases for production. Currently, the supported database is IBM DB2.</li> <li>The configuration is consolidated in the Helm chart. ConfigEngine, Configuration Wizard, and wsadmin are no longer required.</li> </ul>"},{"location":"getting_started/differences/#search","title":"Search","text":"<p>DX Compose uses new Search containers based on OpenSearch.</p>"},{"location":"getting_started/differences/#administration","title":"Administration","text":"<ul> <li>Changes done previously with ConfigEngine or the WAS console are consolidated in the Helm chart.</li> <li>Page, Web Content Manager (WCM), and other artifacts are managed using the DX Practitioner user interface, just as in HCL DX.</li> </ul>"},{"location":"getting_started/differences/#default-ports","title":"Default ports","text":"<ul> <li>With DX Offerings, using Core on WAS, the internal default ports are <code>10039</code> for <code>http</code> and <code>10041</code> or <code>10042</code> for <code>https</code>.</li> <li>For DX Compose core WebEngine, the internal default ports are <code>9080</code> and <code>9043</code> for <code>https</code>.</li> <li>For both Core on WAS and WebEngine when accessing through Docker Compose or Kubernetes, the default ports are <code>80</code> for <code>http</code> and <code>443</code> for <code>https</code>.</li> </ul>"},{"location":"getting_started/differences/#theme","title":"Theme","text":"<p>When customizing a theme on DX Compose, you can only update and modify the static theme and skin resources deployed to WebDAV. Currently, the dynamic theme resources cannot be modified.</p>"},{"location":"getting_started/differences/#limitations","title":"Limitations","text":"<p>For more information about the limitations of DX Compose, see Limitations.</p>"},{"location":"getting_started/limitations/","title":"DX Compose limitations","text":"<p>Know the existing limitations of Digital Experience (DX) Compose.</p>"},{"location":"getting_started/limitations/#deployment","title":"Deployment","text":"<ul> <li>You cannot deploy the Core container used in the DX offerings deployment and the DX Compose WebEngine Core container together on the same deployment.</li> <li>Supported databases are Derby, DB2 and Oracle. For Oracle on Amazon RDS, versions 19c and 21c (Single-tenant configuration) are supported at this time.</li> <li>It is not possible to use the Remote Search service provided with HCL DX offerings in DX Compose. DX Compose provides support for OpenSearch.</li> <li>No ReadWriteMany (RWX) shared volume is used.</li> <li>Portal Application Archive (PAA) deployment is not supported.</li> </ul>"},{"location":"getting_started/limitations/#configuration","title":"Configuration","text":"<ul> <li>DX Compose does not operate on the IBM WebSphere Application Server (WAS). DX Compose administrators should use the Helm chart to make changes they used to perform in the WebSphere Application Server Admin Console. The Open Liberty Admin Console has limited functionality but can be leveraged for starting/stopping applications, investigating the configuration, and monitoring.</li> <li>Open Liberty does not provide wsadmin scripting.</li> <li>Configuration in resource environment providers, which was earlier managed with the DX Offerings WAS console, is managed with Helm charts in DX Compose.</li> <li>There is no ConfigEngine or Configuration Wizard with DX Compose. All configuration must be done through the Helm chart.</li> <li>A limited set of DXClient commands is supported. For more information, see Supported DXClient operations.</li> </ul>"},{"location":"getting_started/limitations/#applications-and-extensions","title":"Applications and extensions","text":"<ul> <li>You cannot deploy Java-based applications such as portlets, EAR-based themes, and WCM extensions.</li> <li>Social Media Publisher, Content Template Catalog (CTC), and other WCM extensions are not supported except Multilingual Solution.</li> <li>WCM AI Sentiment Analysis in the WCM Authoring user interface (UI) is not supported with the TinyMCE Rich text editor but is supported with CKEditor.</li> </ul>"},{"location":"getting_started/limitations/#image-customization","title":"Image customization","text":"<ul> <li>Not supported.</li> </ul>"},{"location":"getting_started/limitations/#user-and-group-management","title":"User and group management","text":"<ul> <li>Creating, updating, and deleting users and groups using the DX Compose Admin UI, REST APIs, or scripting tools are not supported with this initial release.</li> <li>Lookaside database, application groups, custom user registries, and transient users are not supported.</li> </ul>"},{"location":"getting_started/limitations/#authentication","title":"Authentication","text":"<ul> <li>Step-up authentication is not supported.</li> <li>Impersonation is supported. However, you must disable the authentication cache for it to work. For more information, see Disabling Authentication Cache for Impersonation.</li> </ul>"},{"location":"getting_started/limitations/#theme-customization-of-dynamic-resources","title":"Theme customization of dynamic resources","text":"<ul> <li>Not supported.</li> </ul>"},{"location":"getting_started/limitations/#product-features","title":"Product features","text":"<ul> <li>Site Template Builder is not supported.</li> </ul>"},{"location":"getting_started/offerings/","title":"HCL Digital Experience offerings","text":""},{"location":"getting_started/offerings/#hcl-digital-experience-compose","title":"HCL Digital Experience Compose","text":"<p>HCL Digital Experience (DX) Compose is a lightweight, fast performing, cloud\u2013only digital experience platform for delivering content-centric and transactional experiences. DX Compose includes a core container called WebEngine that is built on the Open Liberty platform and operates on certified Kubernetes platforms. This architecture supports fast startup and execution times to deliver high performance DX sites, and is capable of using the latest Java Development Kit (JDK) and Java 2 Enterprise Edition (J2EE) levels.</p> <p>DX Compose supports site design and web content authoring features such as Web Content Management (WCM), Personalization, secure and role-based delivery, virtual portals, Script Applications, Digital Asset Management (DAM), and Content Composer. Integration capabilities are also available, including custom Script Applications, HCL Volt Foundry services, and HCL Leap, and support for open-standards APIs.</p> <p>HCL DX Compose 9.5 is available in the HCL Software License Portal (Flexnet) to customers licensed for the HCL Digital Experience Compose v9.5 offering.</p> <p>For the latest list of Digital Experience Compose 9.5 components for deployments to Docker and certified Kubernetes platforms, refer to the Container file listings topic in the Help Center.</p>"},{"location":"getting_started/offerings/#hcl-digital-experience-cloud-native","title":"HCL Digital Experience Cloud Native","text":"<p>HCL DX Cloud Native is a digital experience platform optimized for deployment to Kubernetes container environments and supported on-premises platforms. It supports all of the capabilities of the HCL DX platform supporting DX deployments, including HCL Portal Server, WCM, DAM, and Volt Foundry components. HCL DX Cloud Native also includes modern, easy-to-use tools and open-standards APIs for business users and developers to build, optimize, and deliver digital experience solutions. HCL DX Cloud Native is a customizable, scalable, and high-availability solution that uses cloud-friendly technology to make deployment and operation easy and efficient.</p> <p>HCL DX Cloud Native also includes:</p> <ul> <li> <p>Entitlements to HCL Volt Foundry on-premises components supporting Kubernetes Helm deployments to use in conjunction with their DX Compose environment. These capabilities add data integration middleware pre-built adapters, and workflow and API management services that simplify integrations and can quickly present the results through DX web pages to target audiences. You can develop these DX web pages using tools such as the Digital Data Connector, Script Application, or HCL Leap. For installation and integration information, see Installing HCL Volt MX Foundry to integrate with HCL Digital Experience 9.5.</p> </li> <li> <p>Entitlements to HCL Leap, with the capability to create web applications for data collection and process automation. Easily integrate with DX Compose solutions to deliver customer and employee facing applications and forms, and transform processes to be more efficient.</p> </li> <li> <p>HCL DX Cloud Native 9.5.1 and higher releases are available in the HCL Software License Portal (Flexnet) to customers licensed for the HCL DX Cloud Native 9.5 offering.</p> </li> </ul> <p>For the latest list of DX 9.5 components available for HCL DX Cloud Native 9.5 offering deployments to Docker and certified Kubernetes platforms, refer to the Docker image list topic in the Help Center.</p>"},{"location":"getting_started/offerings/#hcl-digital-experience-cloud","title":"HCL Digital Experience Cloud","text":"<p>HCL DX Cloud is the SLA-based cloud service platform with built-in security and compliance. This solution includes the capabilities of HCL DX Cloud Native 9.5 offering software and ongoing maintenance and upgrades to the latest releases of HCL Software. This means you can focus on achieving business results faster, while reducing time building and managing systems and ensuring the highest security and reliability. For more information, see Introducing HCL Digital Experience Cloud. Contact HCL to discuss further and get started.</p> <p>For additional information about HCL DX solutions, visit the HCL Digital Experience website.</p>"},{"location":"getting_started/overview/","title":"DX Compose overview","text":"<p>Digital Experience (DX) Compose provides an updated Core container called WebEngine that runs on Open Liberty instead of IBM WebSphere Application Server. The initial release is focused on running web content, custom Script Applications, and themes.</p> <p>Note</p> <p>The ability to run custom Java applications and extensions is planned for a DX Compose future delivery. This statement is not a guarantee of future releases or their features.</p> <p>In addition, DX features such as Web Content Management (WCM), Personalization, secure and role-based delivery, virtual portals, Script Applications, Digital Asset Management (DAM), and Content Composer integration are available in the DX Compose product.</p> <p>DX Compose is delivered as a set of container images and attached Helm charts to deploy to a Kubernetes system or Docker Compose. Note that DX Compose is not supported for a non-container installation.</p>"},{"location":"getting_started/system_requirements/","title":"System requirements","text":"<p>The deployment of WebEngine happens as part of the broader Digital Experience (DX) deployment using Helm for Kubernetes or Docker Compose. This topic provides the minimum system requirements for the WebEngine container in DX Compose.</p>"},{"location":"getting_started/system_requirements/#kubernetes","title":"Kubernetes","text":"<p>See the requirements for Kubernetes in Kubernetes runtime.</p>"},{"location":"getting_started/system_requirements/#kubernetes-platform-policy","title":"Kubernetes platform policy","text":"<p>HCL DX Compose v9.5 is designed to run on any Certified Kubernetes platform, provided that the following criteria are met:</p> <ul> <li>The Kubernetes platform must be hosted on x86-64 hardware.</li> <li>The Kubernetes platform must be officially supported by Helm. For more information, see Kubernetes Distribution Guide.</li> </ul>"},{"location":"getting_started/system_requirements/#java-sdk","title":"Java SDK","text":"<p>DX Compose requires JDK 11.0 or later for installation.</p> Prerequisite Prerequisite minimum and supported versions Product minimum Apache Termurin, Java Technology Edition 11.0 and later maintenance releases 9.5"},{"location":"getting_started/system_requirements/#databases","title":"Databases","text":"Supported software Supported software minimum Product minimum Apache Derby 10.11* 9.5 IBM DB2 Standard and Advanced Edition 11.5** and later maintenance releases (acquired separately) 9.5 <p>* Apache Derby is not supported in a product environment. ** DB2 includes support for the DB2 pureScale component.  </p>"},{"location":"getting_started/system_requirements/#ldap-servers","title":"LDAP servers","text":"<p>All LDAP Servers that support the LDAP V3 Specification are supported.</p>"},{"location":"getting_started/system_requirements/#web-browsers","title":"Web browsers","text":"Supported software Supported software minimum Product minimum Android default browser Newer levels are supported 9.5 Apple Safari Newer levels are supported 9.5 Google Chrome Newer levels are supported 9.5 Microsoft Edge Chromium-Based Newer levels are supported 9.5 Mozilla Firefox Newer levels are supported 9.5 Mozilla Firefox ESR Newer levels are supported 9.5"},{"location":"getting_started/download/","title":"Download software","text":"<p>HCL Digital Experience (DX) Compose 9.5 is available in the HCL Software License Portal (Flexnet) to customers licensed for the HCL Digital Experience Compose v9.5 offering.</p> <p>HCL DX Compose software is also available through the new My HCLSoftware portal for customers licensed for the HCL Digital Experience Compose v9.5 offering. This is in parallel to the existing HCL Software License Portal delivered in FlexNet, through June 30, 2025. For more information, refer to the HCL Digital Experience offerings are now available for download from the My HCLSoftware portal knowledge article.</p> <ul> <li>Downloading and deploying DX Compose from a Harbor repository Learn how to download and deploy DX Compose from a Harbor repository.</li> <li>Tracking user session consumption and exporting usage reports Learn how to configure user session tracking DX Compose 9.5 deployments and manually export usage reports.</li> <li>Entitlement checking in the My HCLSoftware portal Learn how to set up entitlement checking and user session reporting in DX Compose 9.5 deployments.</li> </ul>"},{"location":"getting_started/download/export_usage_report/","title":"Tracking user session consumption and exporting usage reports","text":""},{"location":"getting_started/download/export_usage_report/#overview","title":"Overview","text":"<p>With this feature, you can:</p> <ul> <li>Configure user session tracking Digital Experience (DX) Compose 9.5 deployments on supported Kubernetes platforms.</li> <li>View DX 9.5 user session consumption in DX 9.5 Kubernetes deployments.</li> <li>Manually export a report of the number of sessions used in specified time periods. The DX Compose Kubernetes deployment user session usage report presents the data in the form of sessions month in a given date range. See examples in the next sections. </li> </ul> <p>Note</p> <p>User session tracking and reporting support the protection of the Personally Identifiable Information (PII) of users. Data such as the User ID and the IP Address are not stored in the server logs or presented in user session consumption reports. These reports present the timestamp and number data to report the user session counts for the requested time period. </p> <p>For information on how user sessions are defined and when they begin and end, see User Session consumption for HCL DX Cloud Native v9.5 production deployments.</p>"},{"location":"getting_started/download/export_usage_report/#unique-identifier-for-the-dx-compose-deployment-session-usage-report","title":"Unique identifier for the DX Compose deployment session usage report","text":"<p>Optionally, set a unique identifier for the specified DX Compose Kubernetes deployment. This is included in the exported user session data.</p> <pre><code>configuration:\n  licenseManager:\n    licenseManualReportUniqueIdentifier: \"myUniqueIdentifier-123\"\n</code></pre> <p>If no unique DX Compose Kubernetes deployment identity is set in the helm value, the deployment uses the release name and namespace combination by default. See Kubernetes Overview for deployment and configuration guidance.</p>"},{"location":"getting_started/download/export_usage_report/#exporting-the-user-session-usage-report-in-csv-format","title":"Exporting the user session usage report in CSV format","text":"<p>Exporting the report in CSV format is the default option when exporting the usage report to the data table. The report contains the following details:</p> <ul> <li><code>month</code> column shows the usage of each month.</li> <li><code>sessions</code> column shows the total usage of that specific month.</li> <li><code>gaps</code> column shows the gaps between the dates, represented by an underscore (_). If there are multiple gaps, they are separated by semicolons (;).</li> <li><code>environment</code> column indicates the identity of the environment where the usage occurred.</li> </ul> <p>To export the user session usage report, use the following command and include the start date and end date:</p> <pre><code>kubectl exec -it &lt;release name&gt;-license-manager-0 -n &lt;namespace&gt; -- sh exportUsageReport.sh &lt;YYYY-MM-DD&gt; &lt;YYYY-MM-DD&gt;\n</code></pre> <p>You can send the result to a file using the following command:</p> <pre><code>kubectl exec -it &lt;release name&gt;-license-manager-0 -n &lt;namespace&gt; -- sh exportUsageReport.sh &lt;YYYY-MM-DD&gt; &lt;YYYY-MM-DD&gt; &gt; /tmp/output.csv\n</code></pre> <p>Note</p> <p>The timestamps indicate the time in UTC format.</p>"},{"location":"getting_started/download/export_usage_report/#expected-result","title":"Expected result","text":"<pre><code>month,sessions,gaps,environment\n2023-01,3685341,,UAT-ENV\n2023-02,3368446,,UAT-ENV\n2023-03,2451073,,UAT-ENV\n2023-04,10052,2023-04-01_2023-04-13;2023-04-13_2023-04-30,UAT-ENV\n2023-05,2864619,,UAT-ENV\n2023-06,3567305,,UAT-ENV\n2023-07,3652716,,UAT-ENV\n2023-08,2064732,2023-08-01_2023-08-14,UAT-ENV\n2023-09,3556301,,UAT-ENV\n2023-10,2809467,,UAT-ENV\n2023-11,1237243,,UAT-ENV\n2023-12,3733002,,UAT-ENV\n2024-01,,2024-01-01_2024-01-31,UAT-ENV\n2024-02,,2024-02-01_2024-02-29,UAT-ENV\n2024-03,1739367,2024-03-15_2024-03-31,UAT-ENV\n2024-04,,2024-04-01_2024-04-02,UAT-ENV\n</code></pre>"},{"location":"getting_started/download/export_usage_report/#exporting-the-user-session-usage-report-in-human-readable-format","title":"Exporting the user session usage report in human readable format","text":"<p>To export the user session usage report, use the following command and include the start date, end date, and <code>--pretty</code>:</p> <pre><code>kubectl exec -it &lt;release name&gt;-license-manager-0 -n &lt;namespace&gt; -- sh exportUsageReport.sh &lt;YYYY-MM-DD&gt; &lt;YYYY-MM-DD&gt; --pretty\n</code></pre> <p>The result can be sent to a file using the following command:</p> <pre><code>kubectl exec -it &lt;release name&gt;-license-manager-0 -n &lt;namespace&gt; -- sh exportUsageReport.sh &lt;YYYY-MM-DD&gt; &lt;YYYY-MM-DD&gt; --pretty &gt; /tmp/output.txt\n</code></pre> <p>Note</p> <p>The timestamps provided indicate the time in UTC format.</p>"},{"location":"getting_started/download/export_usage_report/#expected-result_1","title":"Expected result","text":"<pre><code>############################################################\nGenerating Session Usage Report from the Environment: UAT-ENV\nThis can take a few minutes...\nAll dates are in the format YYYY-MM-DD\n############################################################\nSession usage for 2023-01: 3685341\nSession usage for 2023-02: 3368446\nSession usage for 2023-03: 2451073\nSession usage for 2023-04: 10052\nSession usage for 2023-05: 2864619\nSession usage for 2023-06: 3567305\nSession usage for 2023-07: 3652716\nSession usage for 2023-08: 2064732\nSession usage for 2023-09: 3556301\nSession usage for 2023-10: 2809467\nSession usage for 2023-11: 1237243\nSession usage for 2023-12: 3733002\nSession usage for 2024-03: 1739367\nGap between 2023-03-31 and 2023-04-13: 12 day(s)\nGap between 2023-04-13 and 2023-05-01: 17 day(s)\nGap between 2023-07-31 and 2023-08-14: 13 day(s)\nGap between 2023-10-24 and 2023-11-10: 16 day(s)\nGap between 2023-12-31 and 2024-03-01: 60 day(s)\nGap between 2024-03-15 and 2024-04-02: 17 day(s)\n############################################################\nTotal session usage: 34739664\n############################################################\n</code></pre> <p>Optionally, you can import the local .txt or .csv file to a spreadsheet or other reporting tools for viewing and further analysis.</p>"},{"location":"getting_started/download/harbor_container_registry/","title":"Downloading and deploying DX Compose from a Harbor repository","text":"<p>Customers with entitlements to HCL Digital Experience Compose 9.5 may access the DX Compose container images and Helm charts from the HCL container repository on Harbor. Customers with credentials to access entitled software on the HCL Software Licensing Portal can apply those credentials to optionally access these components of DX Compose v9.5.</p> <p>The Harbor repository provides a registry based on Open Container Initiative (OCI). The Helm chart command is updated to be OCI-compliant. However, older versions of the Helm chart are still used in the non-OCI approach. Both approaches are described in this topic. </p>"},{"location":"getting_started/download/harbor_container_registry/#oci-based-registry","title":"OCI-based registry","text":"<p>Helm charts that are pushed and managed through OCI are not part of the <code>Helm Charts</code> category in Harbor anymore. Therefore, the <code>Helm Charts</code> section does not reflect the newer version of Helm charts, which are pushed by using OCI commands. OCI assets such as container images and Helm charts are currently in the same category and both are listed as an OCI repository.</p>"},{"location":"getting_started/download/harbor_container_registry/#pulling-helm-charts-by-using-oci-commands","title":"Pulling Helm charts by using OCI commands","text":"<p>These commands are different from the previous approach in the non-OCI-based registry. Using OCI commands requires an initial login before you can run the pull command.</p> <ol> <li> <p>Log in to the Helm registry by using the following command: </p> <pre><code>helm registry login -u &lt;YOUR_HARBOR_USERNAME&gt; -p &lt;YOUR_HARBOR_CLI_SECRET_&gt; https://hclcr.io/\n</code></pre> </li> <li> <p>After you log in, run the following OCI-based pull command:</p> <pre><code>helm pull oci://hclcr.io/dx-compose/hcl-dx-deployment --version &lt;HELM_CHART_VERSION_NUMBER&gt;\n</code></pre> </li> <li> <p>After you run the pull command, you can check whether the Helm Chart was downloaded to your local computer:</p> <pre><code># List directory content to check successful pull\nls -lah \n\n# total 8868\n# -rw-r--r--. 1 user user  136052 Jul  7 11:28 hcl-dx-deployment-2.7.1.tgz\n</code></pre> </li> </ol>"},{"location":"getting_started/download/harbor_container_registry/#non-oci-based-registry","title":"Non-OCI-based registry","text":"<p>This section describes the previous non-OCI approach that still uses older versions of the Helm chart. </p>"},{"location":"getting_started/download/harbor_container_registry/#configuring-the-helm-repository-on-harbor-to-your-dx-compose-95-kubernetes-deployment","title":"Configuring the Helm repository on Harbor to your DX Compose 9.5 Kubernetes deployment","text":"<p>As an alternative to downloading the DX Compose 9.5 Helm charts from the Docker components of your HCL DX Compose offering entitlements on the HCL Software License Portal, you can directly use the Helm repository on Harbor with Helm from HCL DX Compose Container update CF226 and later releases.</p>"},{"location":"getting_started/download/harbor_container_registry/#adding-the-helm-repository-on-harbor-to-your-helm-configuration","title":"Adding the Helm repository on Harbor to your Helm configuration","text":"<p>To add the Helm repository on Harbor to your Helm configuration, you can use the following command:</p> <pre><code>helm repo add \n--username &lt;YOUR_HARBOR_USERNAME&gt; \n--password &lt;YOUR_HARBOR_CLI_SECRET_&gt; \ndx-compose https://hclcr.io/chartrepo/dx-compose\n</code></pre> <p>To get the <code>CLI secret</code>, refer to the following steps:</p> <ol> <li>Log in to Harbor GitHub site for HCL using your authorized HCL user credentials. </li> <li>Navigate to your HCL <code>User Profile</code> on Harbor.</li> <li>Copy the CLI secret from the <code>CLI secret</code> field.</li> </ol> <p>After you add the repository to your Helm deployment, you should see the following message:</p> <pre><code>\"dx-compose\" has been added to your repositories\n</code></pre>"},{"location":"getting_started/download/harbor_container_registry/#listing-available-helm-chart-versions","title":"Listing available Helm chart versions","text":"<p>To verify that your Helm configuration works to connect and to see which HCL DX Compose 9.5 Container Update CF application versions are available from the HCL repository on Harbor, you can use the following command:</p> <pre><code># Using helm search to find available versions, the DX helm charts are named hcl-dx-deployment\n\nhelm search repo dx-compose/hcl-dx-deployment --versions\n</code></pre> <p>This command returns a list of available versions, which looks similar to this example:</p> <pre><code>NAME                        CHART VERSION     APP VERSION     DESCRIPTION                                    \ndx-compose/hcl-dx-deployment    2.7.1           95_CF226    Kubernetes Deployment of HCL Digital Experience Compose\n</code></pre> <p>You can see which chart version correlates to which HCL DX Compose 9.5 Container Update CF version. In the preceding example, installing Container Update CF226 requires you to use Helm chart version 2.7.1.</p> <p>After you complete the preceding actions, your Helm configuration can use HCL DX Compose 9.5 Helm charts directly from the Helm Repository on Harbor.</p> <p>Note</p> <p>Applying the method to pull DX Compose 9.5 Container Update images directly from the HCL container registry on Harbor requires that every cluster node can access the HCL container registry on Harbor. To leverage this feature, you have to configure an <code>ImagePullSecret</code> with your HCL credentials for the Harbor site. For instructions, see Configure deployment to use the HCL container registry on Harbor.</p>"},{"location":"getting_started/download/harbor_container_registry/#pulling-a-helm-chart-for-deployment","title":"Pulling a Helm chart for deployment","text":"<p>To use the HCL Digital Experience Compose v9.5 Helm chart from the Helm repository on Harbor, for best results, pull the Helm chart through Helm to your local computer. By using this method, you can work in the same manner as the manually downloaded method.</p> <p>To do so, run the following command with the correct Helm chart version:</p> <pre><code># Use Helm Pull with the version you want to deploy. (This example uses version 2.7.1. Enter the version you want to use.)\nhelm pull dx-compose/hcl-dx-deployment --version 2.7.1\n</code></pre> <p>After running this command, you can verify whether the Helm chart was downloaded to your local computer:</p> <pre><code># List directory content to check successful pull\nls -lah \n\n# total 8868\n# -rw-r--r--. 1 user user  136052 Jul  7 11:28 hcl-dx-deployment-2.7.1.tgz\n</code></pre> <p>You downloaded your DX Compose 9.5 Container Update Helm chart from the HCL repository on Harbor and can continue with your deployment. </p> <p>After the Helm charts are downloaded, the next step is Retagging images.</p> Related information <ul> <li>Deploying container platforms using Helm</li> </ul>"},{"location":"getting_started/product_overview/","title":"DX Compose overview","text":"<p>HCL Digital Experience (DX) Compose provides an updated Core container called WebEngine that runs on Open Liberty instead of IBM WebSphere Application Server. The initial release is focused on running web content, custom Script Applications, and themes on WebEngine.The ability to run custom Java applications and extensions is planned for a DX Compose future delivery. This statement is not a guarantee of future releases or their features.</p> <p>In addition, DX features such as Web Content Management (WCM), Personalization, secure and role-based delivery, virtual portals, Script Applications, Digital Asset Management (DAM), and Content Composer integration are available in the DX Compose product.</p> <p>DX Compose is delivered as a set of container images and attached Helm charts to deploy to a Kubernetes system or Docker Compose. Note that DX Compose is not supported for a non-container installation.</p> <p>Note</p> <p>In this release, instructions for using select features are located in the HCL Digital Experience Help Center. These will be documented in the HCL Digital Experience Compose Help Center in future releases.</p>"},{"location":"getting_started/product_overview/features/","title":"DX Compose features","text":"<p>In this topic, you can find the main scenarios supported by Digital Experience (DX) Compose. See the following list of supported features:</p> <ul> <li>Apply custom branding using an HTML theme</li> <li>Create a website and manage it with Site Manager</li> <li>Create and manage content with Web Content Manager (WCM) and Content Composer</li> <li>Manage multilingual content with Multilingual Solution</li> <li>Create Personalization rules and use them to target content</li> <li>Syndicate content from server to server</li> <li>Use projects to manage changes</li> <li>Change the context root of the URL</li> <li>Set up virtual portals</li> <li>Use Digital Asset Management (DAM) to manage assets</li> <li>Use AI features to augment content and asset</li> <li>Create custom Script Applications</li> <li>Authenticate users using LDAP</li> <li>Create role-based sites</li> <li>Deploy to the cloud using Kubernetes</li> <li>Go into production, ideally for smaller workloads</li> <li>Integrate HCL Leap applications using Script Applications or WCM components</li> <li>Integrate HCL Volt MX Foundry services</li> <li>Use OpenSearch to search content and assets</li> <li>Use DB2 as a production database for WebEngine container</li> <li>Federate multiple LDAPs</li> <li>Integrate sites using Web Application Bridge</li> <li>Use several DXClient functions</li> </ul>"},{"location":"guide_me/performance_tuning/","title":"Performance Tuning Guides","text":"<p>In this section, you can find various performance tuning guides for deployments in a container platform.</p> <ul> <li>Kubernetes Deployments This topic provides sizing guidance for HCL Digital Experience (DX) Compose rendering scenarios in a Kubernetes configuration.</li> </ul>"},{"location":"guide_me/performance_tuning/#hclsoftware-u-learning-materials","title":"HCLSoftware U learning materials","text":"<p>For an introduction and a demo on DX deployment, go to Deployment for Beginners. Several deployment options are provided in the course.</p> <p>To learn how to do a traditional installation, go to Deployment for Intermediate Users. In this course, you will also learn about additional installation tasks that apply to both container-based and traditional deployments using the Configuration Wizard, DXClient, ConfigEngine, and more. You can try it out using the Deployment Lab and corresponding Deployment Lab Resources.</p>"},{"location":"guide_me/performance_tuning/kubernetes/","title":"Performance Sizing Guide for Kubernetes Deployments","text":"<p>This section provides sizing guides for HCL Digital Experience (DX) Compose rendering scenarios in a Kubernetes configuration. The goal of these sizing guides is to identify the optimal Kubernetes configurations for small DX Compose setups. Additionally, this guide provides tuning recommendations for Kubernetes pods based on their specific workloads, such as rendering-intensive tasks.</p>"},{"location":"guide_me/performance_tuning/kubernetes/#introduction","title":"Introduction","text":"<p>In DX Compose performance testing, it is important to determine both DX Compose container sizing and the relationships between the components that make up DX Compose. This sizing guidance evaluates configurations supporting 1,000 virtual users for small configuration setup.</p> <p>The key performance indicators in these tests are the number of concurrent users, the average response time, and throughput. These metrics serve as benchmarks for evaluating the performance of small DX Compose configurations and offer insights into the system's capacity to handle varying loads. This sizing guidance demonstrates how strategic adjustments can result in significant performance improvements.</p> <p>The sizing tests examined rendering scenarios for the Web Content Manager (WCM), Digital Asset Management (DAM), and HCL DX Compose pages and portlets. The tests were facilitated by rendering setups deployed on AWS/Native-Kubernetes, where Kubernetes is installed directly in Amazon Elastic Cloud Compute (EC2) instances. This guide presents a comprehensive overview of the findings, offering guidance for organizations seeking to optimize their DX Compose platforms for peak performance.</p>"},{"location":"guide_me/performance_tuning/kubernetes/#definition-of-terms","title":"Definition of terms","text":"<p>Refer to the following definition of terms used throughout the performance tests and sizing guidances:</p> <ul> <li> <p>Concurrent user: The number of virtual users actively sending requests to the target application simultaneously.</p> </li> <li> <p>Thread Groups: Concurrent users are simulated using Thread Groups and are configured using the Threads (Users), the Ramp-up Period, and the Loop Count.</p> <ul> <li>Number of Threads (Users): The number of concurrent users.</li> <li>Ramp-up Period: The time taken to start all the Threads (Users).</li> <li>Loop Count: The number of iterations each user performs.</li> <li> <p>Think Time: A timer that can be added to simulate real user behavior. Adding Think Time introduces delays between user actions, which may cause fluctuations in the number of concurrent users at any moment.</p> <p>For example, Threads (Users): 100, Ramp-up Period: 10 seconds, Loop Count: 1.</p> <p>This means JMeter will simulate loading 100 users over 10 seconds, leading to approximately 10 users per second.</p> </li> </ul> </li> <li> <p>Authenticated user: A Portal \u201cUser\u201d role.</p> </li> <li>Unauthenticated user:  A Portal \u201cAnonymous User\u201d role.</li> <li>OpenLDAP:  An open-source implementation of LDAP (Lightweight Directory Access Protocol). All authenticated Users are added to OpenLDAP.</li> </ul> <p>Metrics</p> <ul> <li>Average response time: The average time taken to receive a response from the server for all the requests made during the test.</li> <li>95th Percentile Response Time (95th pct): The response time below which 95% of the requests were completed. Only 5% of the requests took longer than this time to complete.</li> <li>Throughput: The number of requests processed by the system per unit of time. For example, requests per second or per minute.</li> </ul>"},{"location":"guide_me/performance_tuning/kubernetes/#methodology","title":"Methodology","text":"<p>Refer to the following methodology used for the performance tests.</p>"},{"location":"guide_me/performance_tuning/kubernetes/#overview-of-dx-compose-rendering-sizing-performance-tests","title":"Overview of DX Compose rendering sizing-performance tests","text":"<p>These sizing tests evaluated rendering scenarios for WCM, DAM, and HCL DX Compose pages and portlets. The activities used a rendering setup in AWS/Native-Kubernetes, where Kubernetes was installed directly on Amazon EC2 instances. Combination runs were performed that rendered WCM content, DAM assets, and DX Compose pages and portlets. The load distribution was WCM content (40%), DAM assets (30%), and DX Compose pages and portlets (30%). All systems were pre-populated before performing the rendering tests.</p>"},{"location":"guide_me/performance_tuning/kubernetes/#rendering-scenarios-and-users-details","title":"Rendering scenarios and users details","text":"<p>The following table contains the rendering scenario details for the small configuration setup.</p> Concurrent users WCM pages DAM Content Pages and portlets content Small \u2013 1,000 users 20 2,500 6 <ul> <li> <p>The concurrent user load distribution are as follows:</p> <ul> <li>WCM: 40% of the user load (50% authenticated and 50% anonymous).</li> <li>Pages and Portlets: 30% of the user load (50% authenticated and 50% anonymous).</li> <li>DAM: 30% of the user load (all anonymous).</li> </ul> <p>Refer to the DX Sizing rendering scenarios guide for more information.</p> </li> <li> <p>All authenticated users were added to openLDAP with the \"User\" role.</p> </li> <li>The same users are utilized for both WCM and Pages and Portlets. </li> </ul>"},{"location":"guide_me/performance_tuning/kubernetes/#test-data-details","title":"Test data details","text":"<p>Based on the rendering scenarios and user details for small configurations, the following test data are created to support the DX rendering performance tests:</p> <ul> <li>WCM default test data</li> <li>DAM default test data</li> <li>Pages and portlets default test data</li> </ul>"},{"location":"guide_me/performance_tuning/kubernetes/#wcm-default-test-data","title":"WCM default test data","text":"<p>The following WCM setup is commonly used in scenarios where there are multi-nested site areas in libraries with content such as rich text, PDF files, and images in a page. 20 pages are used for the small configuration testing. Refer to the following list for more information about this setup:</p> <ul> <li> <p>The default test data includes a WCM design library named \"PerformanceTestDesign\" and five content libraries named \"PerformanceTestContent01\" to \"PerformanceTestContent05.\"</p> </li> <li> <p>Each content library has four site area levels, with each level containing four site areas. As a result, there are a total of 256 leaf site areas containing content.</p> </li> <li> <p>Each leaf site area holds 10 content items, resulting in a total of 12,800 content items across all libraries.</p> </li> </ul> <p>Content visibility</p> <ul> <li> <p>Half of the content items are accessible to both \"Anonymous\" and \"All Authenticated\" users.</p> </li> <li> <p>The remaining half is restricted to members of 10 specific groups per content item, distributed among 500 groups in the test LDAP. The groups are named \"Group0000\" to \"Group0499.\" Half of these restricted content items are tagged with the keyword \"MENU\" for categorization.</p> </li> </ul> <p>Portal page setup</p> <ul> <li> <p>There are 20 test portal pages labeled \"PerformanceTest.\" Each page is accessible through a user-friendly URL format such as <code>/perf/page-xx</code>.</p> </li> <li> <p>Each page contains six WCM viewer portlets that display content from one of the 20 top-level site areas.</p> </li> <li> <p>Pages 01 to 04 display content from site areas \"SA01\" to \"SA04\" in the \"PerformanceTestContent01\" library.</p> </li> <li> <p>Pages 05 to 08 display content from site areas \"SA01\" to \"SA04\" in the \"PerformanceTestContent02\" library, and so on.</p> </li> </ul> <p>Portlet configurations</p> <ul> <li> <p>Four portlets on each page display a single content item from different sub-site areas. For example, on page 01, the portlets will display content items from \"SA01.01.01.01,\" \"SA01.02.01.01,\" and so on.</p> </li> <li> <p>One portlet provides a navigator for browsing site areas and content items under the top-level site area.</p> </li> <li> <p>The final portlet presents a menu that filters items tagged with the keyword \"MENU,\" scoped to the top-level site area.</p> </li> </ul> <p>User setup</p> <p>A total of 99,999 authenticated users were added to openLDAP for performance testing.</p>"},{"location":"guide_me/performance_tuning/kubernetes/#dam-default-test-data","title":"DAM default test data","text":"<p>The following DAM setup covers the different types of the most commonly used assets in three different ways: UUID, custom, and friendly URLs. Testers uploaded 2,500 assets for the small configuration testing. These assets include 136 KB JPG images, 199 KB DOCX documents, and 1.1 MB MP4 videos to preheat the environment. After preloading the assets for the respective configurations, 15 assets containing a mix of original images and renditions were uploaded and rendered for one hour at peak load, following the ramp-up time.</p> <p>The test rendered assets using three custom URLs, eight UUID URLs, and eight friendly URLs over one hour. Refer to the detailed summary of the results below.</p> Asset Type Size Image JPG/PNG/TIF 155 KB, 2 MB, 5 MB, 500 KB, 100 KB, 2 MB, 300 KB Video MP4/WebM MP4 - 1 MB, 15 MB, 100 MB WebM - 2 MB Document DOCX/XLSX/PPTX 5 MB, 199 KB, 200 KB, 2 MB, 199 KB <p>Examples of DAM asset rendering APIs of UUID, Custom URL, and Friendly URL are provided below:</p> <ul> <li> <p>UUID: <code>https://&lt;host-name&gt;/dx/api/dam/v1/collections/f5764415-afd3-4b18-90ab-5c933e9965a8/items/b2204c8f-bd26-4f9b-865f-1fc1f8e26a13/renditions/09d278d6-1ae7-4a2a-950d-c1fa7f0bacde?binary=true</code>.</p> </li> <li> <p>Custom: <code>https://&lt;host-name&gt;/dx/api/dam/custom/customURL2-1715776542673?binary=true</code>.</p> </li> <li> <p>Friendly: <code>https://&lt;host-name&gt;/dx/api/dam/v1/assets/Jmeter.11667/wcm-sample-content.png?rendition=Tablet?binary=true</code>.</p> </li> </ul> <p>Note</p> <p>For DAM, only anonymous rendering is available.</p>"},{"location":"guide_me/performance_tuning/kubernetes/#pages-and-portlets-default-test-data","title":"Pages and portlets default test data","text":"<p>The following setup includes different types of commonly used portlets. Performance tests measure the response time required to render an entire page along with its associated portlets. Knowing the response times for rendering pages is important, as the portlets on these pages are frequently used in DX Compose content. Refer to the following list for more information about this setup:</p> <ul> <li>The tests included 6 unique pages with portlets for the small configuration.</li> <li>Both anonymous and authenticated users were granted access for authoring and rendering. The same users utilized in WCM rendering are also used here.</li> <li>All authenticated users were assigned the \"User\" role.</li> <li> <p>The following list shows the pages, their corresponding page numbers, and the portlet details for authoring on each page:</p> <ul> <li>Page 1: Two articles.</li> <li>Page 2: Two rich texts.</li> <li>Page 3: Login portlet.</li> <li>Page 4: Information portlet (JSR).</li> <li>Page 5: Script Application portlet. Added JavaScript Functions and Date and Time object examples.</li> <li>Page 6: Added all mentioned portlets in this section.</li> </ul> <p>Note</p> <p>The JSP portlet file required to load Page 4 and render its portlets is located at <code>jsp/oob/welcome.jsp</code>.</p> </li> </ul> <p>Once the authoring steps are completed, both anonymous and authenticated portal users will render the pages. Each page request is triggered using a <code>/GET</code> API call such as <code>/wps/portal/portletsperf/page1</code>. A response assertion in the sampler also validates the HTML content in the response body.</p>"},{"location":"guide_me/performance_tuning/kubernetes/#limitations","title":"Limitations","text":"<p>These performance tests are primarily focused on DAM API. Client-side rendering, such as browser-based rendering, is excluded from the tests.</p> Related information <ul> <li>For details about the environments used, test results, and recommendations for each configuration, refer to the following pages:<ul> <li>Sizing guidance for rendering in a small-sized Kubernetes configuration</li> </ul> </li> </ul>"},{"location":"guide_me/performance_tuning/kubernetes/rendering_small_config/","title":"Sizing guidance for rendering in a small-sized Kubernetes configuration","text":"<p>This topic provides the details of the environments used for rendering in a small-sized Kubernetes configuration. You can also find the test results and recommendations for small configurations on this page.</p>"},{"location":"guide_me/performance_tuning/kubernetes/rendering_small_config/#methodology","title":"Methodology","text":"<p>This sizing activity rendered scenarios for the Web Content Manager (WCM), Digital Asset Management (DAM), and HCL Digital Experience (DX) Compose pages and portlets. This activity used a rendering setup enabled in AWS/Native-Kubernetes, where Kubernetes is installed directly in Amazon Elastic Cloud Compute (EC2) instances. A combination run was performed that rendered WCM content, DAM assets, and DX Compose pages and portlets. The load distribution was WCM content (40%), DAM assets (30%), and DX Compose pages and portlets (30%). All systems were pre-populated before performing the rendering tests.</p> <p>To achieve the 1,000 concurrent users mark, an initial set of runs was done with a lower number of users on a single node setup. The tests started with the desired load of 1,000 users and an acceptable error rate (&lt; 0.01%). Further steps were taken to optimize the limits on the available resources for each pod.</p> <p>The following table contains the rendering scenario details for a small configuration. </p> Concurrent users WCM pages DAM content Pages and portlets content 1,000 users 20 2,500 6 <p>For more information about the setup of test data, refer to the following sections:</p> <ul> <li>WCM default test data</li> <li>DAM default test data</li> <li>Pages and portlets default test data</li> </ul>"},{"location":"guide_me/performance_tuning/kubernetes/rendering_small_config/#environment","title":"Environment","text":"<p>This section provides details for the Kubernetes cluster, JMeter agents, and database.</p>"},{"location":"guide_me/performance_tuning/kubernetes/rendering_small_config/#awsnative-kubernetes","title":"AWS/Native Kubernetes","text":"<p>The Kubernetes platform was deployed on an Amazon EC2 instance with DX Compose images installed and configured. In the AWS/Native Kubernetes setup, the tests were conducted on three EC2 instances using a c5.2xlarge node. This instance type was used for the remote DB2 instance (core database) and the JMeter instance.</p> <p>Refer to the following setup details:</p> <p>c5.2xlarge</p> <ul> <li> <p>Node details</p> <p></p> <p></p> </li> <li> <p>Processor details</p> <p></p> </li> <li> <p>Volume details</p> <p></p> </li> </ul> <p>Note</p> <p>Ramp-up time is 0.4 seconds per user. The test duration includes the ramp-up time plus one hour at the peak load of concurrent users.</p>"},{"location":"guide_me/performance_tuning/kubernetes/rendering_small_config/#results","title":"Results","text":"<p>The test results revealed no errors or pod restarts during execution. Following the implementation of the tuning changes, there was a significant improvement in both the total average response time and overall throughput. Furthermore, the average response time for the top five requests demonstrated a marked enhancement, confirming the effectiveness of the optimizations.</p> <p>The test results were analyzed using Prometheus and Grafana dashboards. Resource limits were adjusted based on CPU and memory usage observations from Grafana during the load tests. For HAProxy and webEngine pods, the CPU and memory limits were fully utilized and were subsequently increased.</p> <p>Additionally, after reviewing and updating the cache statistics tool, optimal performance was achieved, with improvements in both average and 95th percentile response times. Increasing webEngine CPU cores by 1.3, adjusting HAProxy from 200m to 500m, and modifying ringApi from 100m to 200m led to a significant improvement in the total average response time, resulting in a tenfold increase in performance. To support these adjustments, CPU limits for persistenceNode, persistenceConnectionPool, and imageProcessor were reduced, prioritizing the optimization of rendering scenarios.</p> <p>The next section provides detailed guidance on using the cache statistics tool and the tuning steps.</p>"},{"location":"guide_me/performance_tuning/kubernetes/rendering_small_config/#webengine-cache-statistics-tool","title":"WebEngine Cache Statistics tool","text":"<p>The WebEngine Cache Statistics tool allows you to monitor the OpenLiberty Dynacache statistics for the DX Compose webEngine pod.</p> <p>To use the Dynacache Statistics tool, copy the LibertyCacheStatistics WAR file into the <code>defaultServer/dropins</code> folder of the <code>webEngine</code> pod.  Then, run the following <code>kubectl</code> command:</p> <p><pre><code>kubectl cp LibertyCacheStatistics.war dx-deployment-web-engine-0:/opt/openliberty/wlp/usr/servers/defaultServer/dropins -n &lt;namespace&gt;\n</code></pre> To access the cache statistics, open the following URL in your browser: <code>https://&lt;hostName&gt;/LibertyCacheStatistics/</code>. This page displays detailed cache information, including sizes, explicit removals, and Least Recently Used (LRU) removals.</p>"},{"location":"guide_me/performance_tuning/kubernetes/rendering_small_config/#dx-compose-tuning","title":"DX Compose tuning","text":"<p>Modifications to the initial Helm chart configuration were applied during testing. The following table specifies the pod count and resource limits for each pod. Additionally, certain WCM Dynacache sizes, lifetimes, and JVM heap sizes were adjusted based on cache statistics. For further details, see the Recommendations section on performing a Helm upgrade using <code>webengine-performance-rendering.yaml</code></p> <p>After applying the updated Helm values and cache adjustments, the system showed significantly improved responsiveness. These changes enabled the setup to handle 1,000 concurrent users with better error rates, reduced average response times, increased throughput, and improved 95th percentile response times.</p> Request Request Limit Limit Component No. of pods cpu (m) memory (Mi) cpu (m) memory (Mi) contentComposer 1 100 128 100 128 webEngine 1 4300 5120 4300 5120 digitalAssetManagement 1 500 1536 500 1536 imageProcessor 1 100 768 100 768 openLdap 1 100 1024 100 1024 persistenceNode 1 200 1024 200 1024 persistenceConnectionPool 1 300 512 300 512 ringApi 1 200 256 200 256 runtimeController 1 100 256 100 256 haproxy 1 500 512 500 512 licenseManager 1 100 300 100 300 Total 6500 11436 6500 11436 <p>Note</p> <ul> <li>Values in bold are tuned Helm values while the rest are default minimal values.</li> <li>Cache value changes depending on the test data. It is recommended to monitor cache statistics regularly and update them as necessary. To learn how to monitor cache statistics, refer to the WebEngine Cache Statistics Tool.</li> </ul> <p>For convenience, these values were added to the <code>small-config-values.yaml</code> file in the hcl-dx-deployment Helm chart. To use these values, refer to the following steps:</p> <ol> <li> <p>Download the <code>hcl-dx-deployment</code> Helm chart from FlexNet or Harbor.</p> </li> <li> <p>Extract the <code>hcl-dx-deployment-XXX.tgz</code> file.</p> </li> <li> <p>In the extracted folder, navigate to <code>hcl-dx-deployment/value-samples/webEngine/small-config-values.yaml</code> and copy the <code>small-config-values.yaml</code> file.</p> </li> </ol>"},{"location":"guide_me/performance_tuning/kubernetes/rendering_small_config/#conclusion","title":"Conclusion","text":"<p>This guidance outlines the maximum capacity for a single-node Kubernetes cluster deployed on an AWS c5.2xlarge instance. For rendering scenarios involving DAM, WCM, and DX Compose pages with portlets on a c5.2xlarge single-node setup, the recommended load is up to 1,000 concurrent users.</p>"},{"location":"guide_me/performance_tuning/kubernetes/rendering_small_config/#recommendations","title":"Recommendations","text":"<ul> <li> <p>For a small-sized workload in AWS, start the Kubernetes cluster with a single node using at least a c5.2xlarge instance to support a load of 1,000 users.</p> </li> <li> <p>To hold more authenticated users for testing purposes, increase the OpenLDAP pod CPU and memory values. Note that the OpenLDAP pod is not for production use.</p> </li> <li> <p>To improve response times, perform the Helm upgrade using the <code>webengine-performance-rendering.yaml</code> file. This file is available in the HCL DX Compose Deployment Helm chart. To use this file, complete the following steps:</p> <ol> <li>Download the hcl-dx-deployment Helm chart from FlexNet or Harbor.</li> <li>Extract the hcl-dx-deployment-XXX.tgz file.</li> <li>In the extracted folder, navigate to <code>hcl-dx-deployment/performance/webengine-performance-rendering.yaml</code> and copy the <code>webengine-performance-rendering.yaml</code>.</li> </ol> <p>After performing a Helm upgrade using the <code>webengine-performance-rendering.yaml</code> file, the tuned cache values for rendering will be updated.</p> </li> </ul>"},{"location":"guide_me/performance_tuning/kubernetes/rendering_small_config/#recommended-heap-size-configuration","title":"Recommended heap size configuration","text":"<p>To ensure optimal performance and stability of HCL DX Compose on Kubernetes, it is essential for you to configure JVM heap memory and pod resource limits correctly. Refer to the following best practices when tuning memory allocation.</p> <p>Note</p> <p>Do not set your JVM heap size larger than the allotted memory for the pod.</p> <ul> <li>Ensure your minimum heap size (<code>-Xms</code>) is equal to your maximum heap size (<code>-Xmx</code>).<ul> <li>Setting the minimum and maximum heap sizes to the same value prevents the JVM from dynamically requesting additional memory (<code>malloc()</code>). </li> <li>This eliminates the overhead of heap expansion and improves performance consistency.</li> </ul> </li> <li>Ensure the Kubernetes pod resource limits match the JVM heap settings<ul> <li>The requested memory (<code>requests.memory</code>) should match the limit (<code>limits.memory</code>) in the pod specification.</li> <li>This ensures that the container is allocated a fixed memory block and prevents unexpected memory reallocation, which could lead to performance degradation or out-of-memory (OOM) errors.</li> </ul> </li> <li>Determine the final memory requirements based on load testing<ul> <li>To determine the optimal memory configuration, you should conduct local testing with your specific portlets, pages, and customizations. You should also perform synthetic load testing using tools like JMeter to simulate realistic usage scenarios.</li> <li>The required memory is highly dependent on Service Level Agreements (SLAs) and transaction rates.</li> <li>A minimum of 3.5GB is recommended, but higher memory allocations may be necessary depending on actual usage patterns.</li> </ul> </li> </ul>"},{"location":"whats_new/","title":"What's new in HCL DX","text":"<p>Find out the latest features, enhancements, and fixes included in the most recent Cumulative Fix of HCL Digital Experience Compose.</p> <ul> <li>What's new in CF227</li> <li>What's new in CF226</li> <li>What's new in CF225 </li> <li>Features available with DX Compose V9.5 CF224</li> </ul>"},{"location":"whats_new/cf224/","title":"Features available with DX Compose V9.5 CF224","text":"<p>The following features are available to customers installing HCL Digital Experience (DX) Compose v9.5 CF224 on supported Kubernetes platforms:</p>"},{"location":"whats_new/cf224/#product-overview","title":"Product overview","text":"<p>HCL DX Compose is a lightweight, fast performing, cloud\u2013only digital experience platform for delivering content-centric and transactional experiences. DX Compose includes a core container called WebEngine that is built on the Open Liberty platform and operates on certified Kubernetes platforms. This architecture supports fast startup and execution times to deliver high-performance DX sites, and is capable of using the latest Java Development Kit (JDK) and Java 2 Enterprise Edition (J2EE) levels.</p>"},{"location":"whats_new/cf224/#getting-the-software","title":"Getting the software","text":"<p>HCL DX Compose 9.5 is available in the HCL Software License Portal (Flexnet) to customers licensed for the HCL Digital Experience Compose v9.5 offering. HCLSoftware offering licenses can be viewed on the HCL Software License Agreements site.</p> <p>Note</p> <p>In this release, instructions for use of select features are located in the HCL Digital Experience Help Center. These will be documented in the HCL Digital Experience Compose Help Center in future releases.</p>"},{"location":"whats_new/cf224/#plan-your-deployment","title":"Plan your deployment","text":"<ul> <li> <p>Architecture \u2013 HCL DX Compose is scalable and flexible, supports rapid startup and execution, authentication for security and personalization, and integration with various applications. Learn more about DX Compose architecture.</p> </li> <li> <p>System requirements \u2013 HCL DX Compose is supported on certified Kubernetes platforms. Learn more about DX Compose system requirements. </p> </li> <li> <p>Deploy \u2013 View environment preparation and detailed guidance for Helm-based deployments to Kubernetes platforms. Learn more about DX Compose deployment procedures.</p> </li> </ul>"},{"location":"whats_new/cf224/#site-creation","title":"Site creation","text":"<ul> <li> <p>Site Manager - HCL DX Compose provides web site composition and management features. Learn more about Site Management.</p> </li> <li> <p>Projects \u2013 HCL DX Compose provides project management features to organize and update site pages. Learn more about Project management features.</p> </li> <li> <p>Customize sites \u2013 Apply custom branding and themes in your sites Learn more about customizing themes.</p> </li> <li> <p>Create role-based sites \u2013 Control access to authoring and items management, and to elements and pages that are displayed within a website. Learn more about role-based site management.</p> </li> <li> <p>Personalize sites \u2013 Targeted content provides you with a way to deliver multiple pieces of content to different audiences. Learn more about targeted content and Personalization.</p> </li> <li> <p>Collaborate - People Service adds a layer of social connectivity in HCL DX Compose, making it easier for team members to connect. It enhances user profiles with additional data and interactive features, improving team collaboration and project execution. The service is also supported by a robust API layer compatible with OpenAPI, ensuring third-party support and extensibility. Learn more about People Service.</p> </li> </ul>"},{"location":"whats_new/cf224/#administration","title":"Administration","text":"<ul> <li> <p>Configure \u2013 Configure and manage DX Compose deployments. Learn more about DX Compose configuration and management services.</p> </li> <li> <p>Use external databases for production \u2013 Update the database used for production. Learn more about using an external database and database transfer.</p> </li> <li> <p>Security and authentication \u2013 Integrate and configure LDAP server with the DX Compose using Helm. Learn more about LDAP configuration.</p> </li> <li> <p>Tune your implementation \u2013 Add, update, or delete deployment properties from services in Helm to tune your implementation. Learn more about updating DX Compose deployment properties.</p> </li> <li> <p>Track user sessions - Configure user session tracking DX Compose v9.5 deployments on supported Kubernetes platforms. Learn more about configuring User Session tracking.</p> </li> </ul>"},{"location":"whats_new/cf224/#content-and-digital-asset-management","title":"Content and Digital Asset Management","text":"<ul> <li> <p>Create and manage content with Web Content Manager (WCM) and Content Composer - Set up the Web Content authoring environment. Learn more about setting up Web Content.</p> </li> <li> <p>Manage assets with Digital Asset Management (DAM) - DAM is used for managing web-ready digital assets such as images or videos for use in content and sites built with HCL DX Compose. Learn more about enabling Content Composer and DAM in DX Compose.</p> </li> <li> <p>Use OpenSearch to search Content, site pages, and portlets \u2013 Configure OpenSearch to support DX Compose search services. Learn more about enabling OpenSearch.</p> </li> <li> <p>Apply AI analysis to content and assets \u2013 Use AI features to augment content and asset management and delivery. Learn more about enabling AI analysis services in DX Compose.</p> </li> <li> <p>Manage presentation of multilingual content - Use the Multilingual Content Solution (MLS) to coordinate publication of multilingual content. Learn more about the MLS.</p> </li> <li> <p>Analyze site usage - Collect data about user behavior in your DX Compose sites and send that data to a service for analysis, using Active Site Analytics (ASA). Learn more about ASA.</p> </li> <li> <p>Syndicate content from server to server - Syndication is used to replicate data from a web content library on one server to a web content library on another server under a one-way or two-way relationship. Learn more about setting up syndication.</p> </li> </ul>"},{"location":"whats_new/cf224/#development-and-integration","title":"Development and integration","text":"<ul> <li> <p>Create custom Script Applications - Script Applications enable developers to create simple to complex integrated applications. Learn more about using Script Applications.</p> </li> <li> <p>Integrate external sites with Web Application Bridge (WAB) - WAB can be used to integrate web-based content providers with HCL DX Compose sites. Administrators must first define the virtual web applications or content providers. Learn more about using WAB.</p> </li> <li> <p>Integrate HCL Leap applications using Script Applications or WCM components - HCL Leap builds dynamic forms and applications with a web-based interface. Learn more about integrating HCL Leap with DX Compose.</p> </li> <li> <p>Integrate HCL Foundry services with DX Compose - Volt MX Foundry is a back-end service provider that helps developers build omni-channel digital applications. Learn more about integrating Foundry with DX Compose.</p> </li> <li> <p>Use DXClient for automation and release management -  DXClient is a command line tool that can be used to execute development automation and CI/CD-related tasks. Learn more about release process artifacts supported in DX Compose.</p> </li> </ul>"},{"location":"whats_new/cf225/","title":"What's new in CF225","text":"<p>The following features and updates are available to customers installing HCL Digital Experience (DX) Compose Container Update CF225 on supported platforms:</p>"},{"location":"whats_new/cf225/#upgrade-steps-using-helm-now-available","title":"Upgrade steps using Helm now available","text":"<p>Documentation on how to upgrade the configuration of an HCL DX Compose 9.5 CF224 or later deployment using Helm is now available. For more information, see Upgrading Helm deployment.</p>"},{"location":"whats_new/cf225/#custom-pvcs-now-supported","title":"Custom PVCs now supported","text":"<p>Starting with CF225, you can configure additional Persistent Volume Claims (PVCs) for the WebEngine stateful set. You can also specify the directories where they will be be mounted in the main containers of all WebEngine pods. For more information, see Configuring additional WebEngine persistent volumes.</p>"},{"location":"whats_new/cf225/#documentation-for-changing-the-webengine-uri","title":"Documentation for changing the WebEngine URI","text":"<p>Instructions for changing the default WebEngine Uniform Resource Identifier (URI) after installing HCL DX Compose are now available. For more information, see Changing the WebEngine context root or home URI.</p>"},{"location":"whats_new/cf225/#using-ddc-for-integration","title":"Using DDC for integration","text":"<p>You can use the Digital Data Connector (DDC) for the HCL DX Compose framework to integrate data from external data sources to your DX Compose pages. Documentation for integrating HCL Volt MX Foundry to DX Compose using DDC is now available. For more information, see Integrating DDC in DX Compose and Connecting to HCL Volt MX Foundry through DDC.</p>"},{"location":"whats_new/cf225/#user-session-tracking-and-reporting","title":"User session tracking and reporting","text":"<p>You can configure user session tracking, view DX Compose 9.5 user session consumption, and manually export a report of the number of sessions used in specified time periods. Note that user session tracking and reporting support the protection of the Personally Identifiable Information (PII) of users. Data such as the User ID and the IP Address are not stored in the server logs or presented in user session usage reports. For more information, see Tracking user session consumption and exporting usage reports.</p>"},{"location":"whats_new/cf225/#oidc-authentication-in-dx-compose","title":"OIDC authentication in DX Compose","text":"<p>You can configure DX Compose to use an OpenID Connect (OIDC) identity provider. In this scenario, users can log in to the OIDC identity provider and not DX Compose. Note that currently, users authenticated to DX Compose must reside in the DX Compose user registry, generally an LDAP server. For more information, see Configuring DX Compose to use an OIDC identity provider.</p>"},{"location":"whats_new/cf225/#initial-dx-compose-performance-tuning","title":"Initial DX Compose performance tuning","text":"<p>Documentation for tuning the initial DX Compose performance is now available. The guide identifies the Helm charts that provide initial tuning for various WebEngine production scenarios. You can also find the Helm command used to update those WebEngine environments. Note that you can only determine the optimal settings for DX Compose after any changes or additions are complete. For more information, see Tuning the initial DX Compose performance.</p>"},{"location":"whats_new/cf225/#adjustment-of-seedlists-for-access-control-changes","title":"Adjustment of seedlists for access control changes","text":"<p>A new option is available where you can have the seedlist return items affected by library access control changes. To enable this feature, set <code>seedlistUpdateLibrariesForAccessControl=true</code> in <code>ConfigService.properties</code>. For information on how to update or add properties in <code>ConfigService.properties</code> using Helm, see Updating DX Compose WebEngine properties using Helm values. For more information on the <code>seedlistUpdateLibrariesForAccessControl</code> property, refer to Crawling web content with search seedlists.</p>"},{"location":"whats_new/cf225/#dxclient-livesync-enabled-for-presentation-templates","title":"DXClient - LiveSync enabled for Presentation Templates","text":"<p>LiveSync now supports Presentation Templates. For more information, see DXClient and LiveSync.</p>"},{"location":"whats_new/cf225/#search-v2-styling-customizations","title":"Search V2 - Styling customizations","text":"<p>You can customize Search V2 by providing custom CSS modules. For more information, see Customizations for Search V2.</p>"},{"location":"whats_new/cf225/#custom-liveness-probe-target-value","title":"Custom <code>liveness</code> probe target value","text":"<p>In previous releases, the <code>liveness</code> probe target values are fixed because they are specific to the application and should not be changed. Starting CF225, Core provides a <code>customProbeURL</code> value that allows you to configure the <code>liveness</code> probe target value. If the <code>customProbeURL</code> is empty, the <code>liveness</code> probe target value for Core is <code>\"/ibm/console\"</code> by default. For more information, see Probes configuration in values.yaml file.</p>"},{"location":"whats_new/cf226/","title":"What's new in CF226","text":"<p>The following features and updates are available to customers installing HCL Digital Experience (DX) Compose Container Update CF226 on supported platforms:</p> <ul> <li>Documentation for using custom certificates</li> <li>DX Compose software now available in the My HCLSoftware portal</li> <li>DX Compose software now available in Harbor</li> <li>Documentation for using Docker Compose</li> <li>Search V2 enabled by default</li> <li>People Service and Search V2 integration</li> <li>Presentation Designer - Canvas settings</li> <li>DXClient - TLS certificate validation</li> <li>DXClient - New limitations for LiveSync</li> <li>DAM - New parameter for access control</li> </ul>"},{"location":"whats_new/cf226/#documentation-for-using-custom-certificates","title":"Documentation for using custom certificates","text":"<p>Documentation for Using custom certificates in WebEngine is now available. This topic provides the steps on how to add custom certificates to the WebEngine server configuration through the Helm <code>values.yaml</code> file.</p>"},{"location":"whats_new/cf226/#dx-compose-software-now-available-in-the-my-hclsoftware-portal","title":"DX Compose software now available in the My HCLSoftware portal","text":"<p>HCL DX Compose software is now available through the new My HCLSoftware portal for customers licensed for the HCL Digital Experience Compose v9.5 offering. This is in parallel to the existing HCL Software License Portal delivered in FlexNet, through June 30, 2025. For more information, refer to the HCL Digital Experience offerings are now available for download from the My HCLSoftware portal knowledge article.</p>"},{"location":"whats_new/cf226/#dx-compose-software-now-available-in-harbor","title":"DX Compose software now available in Harbor","text":"<p>Customers with entitlements to HCL Digital Experience Compose 9.5 may access the DX Compose container images and Helm charts from the HCL container repository on Harbor. Customers with credentials to access entitled software on the HCL Software Licensing Portal can apply those credentials to optionally access these components of DX Compose v9.5. For more information, see Downloading and deploying DX Compose from a Harbor repository.</p>"},{"location":"whats_new/cf226/#documentation-for-using-docker-compose","title":"Documentation for using Docker Compose","text":"<p>Instructions for developers on how to deploy HCL DX Compose 9.5 for non-production purposes using Docker Compose are now available. For more information, see Docker Compose for HCL DX Compose.</p>"},{"location":"whats_new/cf226/#search-v2-enabled-by-default","title":"Search V2 enabled by default","text":"<p>By default, Search V2 is enabled for DX Compose when the parameter <code>configuration.searchMiddleware.enabled</code> is set to <code>true</code> in the HCL DX Deployment Helm chart. For more information, see Enabling Search V2.</p>"},{"location":"whats_new/cf226/#people-service-and-search-v2-integration","title":"People Service and Search V2 integration","text":"<p>You can integrate People Service with Search V2 to enhance user discoverability and search performance. With this integration, you can access user profile data with real-time synchronization. For more information, see People Service and Search V2 integration.</p>"},{"location":"whats_new/cf226/#presentation-designer-canvas-settings","title":"Presentation Designer - Canvas settings","text":"<p>Canvas settings are now available in Presentation Designer. With these settings, you can configure various aspects of the presentation such as canvas dimensions, direction, zoom level, and orientation. For more information, see Accessing Presentation Designer and Canvas settings in Presentation Designer.</p>"},{"location":"whats_new/cf226/#dxclient-tls-certificate-validation","title":"DXClient - TLS certificate validation","text":"<p>To improve security and maintain best practices in development and production environments, DXClient no longer ignores certificates that cannot be properly validated when using Transport Layer Security (TLS) connections. You can validate and trust custom certificates such as self-signed or third-party CAs without entirely disabling validation. For more information, see Configuring TLS certificate validation for secure connections.</p>"},{"location":"whats_new/cf226/#dxclient-new-limitations-for-livesync","title":"DXClient - New limitations for LiveSync","text":"<p>New limitations are documented for using LiveSync. For Themes, if files are deleted from the DX server while the LiveSync process is in progress, the files will not be restored from the local system. For WCM Design Library, various scenarios and their limitations for concurrent users are added. Steps on how to resolve these limitations to the LiveSync process are also provided.</p>"},{"location":"whats_new/cf226/#dam-new-parameter-for-access-control","title":"DAM - New parameter for access control","text":"<p>New parameter <code>allowEditorToCreateCollections</code> is available to enable or disable creating collections for users assigned the Editor role. By default, this parameter is set to <code>true</code>. For more information, see DAM Access Control Management.</p>"},{"location":"whats_new/cf227/","title":"What's new in CF227","text":"<p>The following features and updates are available to customers installing HCL Digital Experience (DX) Compose Container Update CF227 on supported platforms:</p> <ul> <li>Content as a Service - Enabling CaaS in DX Compose</li> <li>DAM - Access Control Cache</li> <li>DXClient - Style-sheet components for LiveSync</li> <li>DX Compose software now available in the My HCLSoftware portal</li> <li>Impersonation feature now available in DX Compose</li> <li>New sizing guidance for rendering in a small configuration</li> <li>Oracle Support now available for DX Compose</li> <li>Previewing as Another User feature now available in DX Compose</li> <li>Search V2 - Added supported CSS part attributes for each Atomic Component</li> <li>Search V2 Authoring - New Authoring Search interface</li> <li>User Session Reporting Tool - Updated the command to generate user session data usage in metrics format</li> </ul>"},{"location":"whats_new/cf227/#content-as-a-service-enabling-caas-in-dx-compose","title":"Content as a Service - Enabling CaaS in DX Compose","text":"<p>Documentation to enable Content as a Service (CaaS) pages in DX Compose is now available. CaaS pages allow you to render content managed by your HCL Web Content Manager (WCM) in different formats. Refer to Content as a Service pages for more information. The instructions for deploying CaaS to WebEngine differ from Core (Legacy) due to the lack of ConfigEngine in WebEngine. For more information, refer to Setting up Content as a Service.</p>"},{"location":"whats_new/cf227/#dam-access-control-cache","title":"DAM - Access Control Cache","text":"<p>The DAM Access Control Cache improves performance by reducing redundant access control checks with the Ring API. It caches responses with a configurable Time-to-Live (TTL) mechanism and optimizes efficiency by handling in-flight requests. Caching is enabled by default with a TTL of 10 seconds. For more information, refer to DAM Access Control Cache.</p>"},{"location":"whats_new/cf227/#dxclient-style-sheet-components-for-livesync","title":"DXClient - Style-sheet components for LiveSync","text":"<p>Style-sheet components are now supported in LiveSync Pull and Push commands for the HCL Web Content Manager (WCM) Design Library. For more information, refer to LiveSync - Limitations and Troubleshooting: WCM Library.</p>"},{"location":"whats_new/cf227/#dx-compose-software-now-available-in-the-my-hclsoftware-portal","title":"DX Compose software now available in the My HCLSoftware portal","text":"<p>HCL DX Compose software is now available through the new My HCLSoftware portal for customers licensed for the HCL Digital Experience Compose v9.5 offering. This is in parallel to the existing HCL Software License Portal delivered in FlexNet, through June 30, 2025. For more information, refer to the HCL Digital Experience offerings are now available for download from the My HCLSoftware portal knowledge article.</p>"},{"location":"whats_new/cf227/#impersonation-feature-now-available-in-dx-compose","title":"Impersonation feature now available in DX Compose","text":"<p>The impersonation feature in HCL DX Compose enables users with sufficient access rights to act as a different user within the application without needing that user's credentials. This feature is useful for troubleshooting and verifying user-specific configurations. For more information, refer to Administering user impersonation.</p> <p>Note</p> <p>The impersonation feature does not work by default. To enable it, you must disable the authentication cache. Otherwise, the impersonated user will be prompted to authenticate again. For more information, refer to Disabling Authentication Cache for Impersonation.</p>"},{"location":"whats_new/cf227/#new-sizing-guidance-for-rendering-in-a-small-configuration","title":"New sizing guidance for rendering in a small configuration","text":"<p>Results of DX Compose sizing tests for rendering in a small Kubernetes configuration are now available. This guidance presents the key performance indicators (KPIs) and discusses how adjustments to the pod configuration can make improvements in the responsiveness of the system. For more information, refer to the Sizing guidance for rendering in a small-sized Kubernetes configuration.</p>"},{"location":"whats_new/cf227/#oracle-support-now-available-for-dx-compose","title":"Oracle Support now available for DX Compose","text":"<p>DX Compose now additionally supports Oracle on Amazon RDS versions 19c and 21c (Single-tenant configuration) as an external database. If you are using Oracle RDS, you will need to configure the database to support XA transactions. In order to support XA transactions for WebEngine, you must remove the default option group. Refer to Configuring Oracle as an external database and Configure Custom Option Groups for Amazon RDS for more information.</p>"},{"location":"whats_new/cf227/#previewing-as-another-user-feature-now-available-in-dx-compose","title":"Previewing as Another User feature now available in DX Compose","text":"<p>You can now preview changes to your website without logging out and logging on again as another user. This preview capability allows you to quickly verify that users with different access levels see only the content they are authorized to see. You can preview changes as a specific user or as an unauthenticated user. For more information, refer to Previewing as another user.</p>"},{"location":"whats_new/cf227/#search-v2-added-supported-css-part-attributes-for-each-atomic-component","title":"Search V2 - Added supported CSS part attributes for each Atomic Component","text":"<p>Supported CSS part attributes have been added for each Atomic Component (AC) of Search V2. CSS part attributes are responsible for determining the appropriate CSS for each AC and its elements based on the component's state and properties. For more information, refer to Components of Search V2 - Atomic Components.</p>"},{"location":"whats_new/cf227/#search-v2-authoring-new-authoring-search-interface","title":"Search V2 Authoring - New Authoring Search interface","text":"<p>Search V2 Authoring is now available in HCL DX Compose. This feature introduces a new search interface along with a new backend service that utilizes OpenSearch to provide a seamless search experience. For more information, refer to Search V2 Authoring.</p>"},{"location":"whats_new/cf227/#user-session-reporting-tool-updated-the-command-to-generate-user-session-data-usage-in-metrics-format","title":"User Session Reporting Tool - Updated the command to generate user session data usage in metrics format","text":"<p>User Session Reporting Tool parameters have been updated to allow all named parameters to be used in any order within the generate user session data usage command. You can now exclude multiple IPs and session keys by adding multiple <code>-excludeIP</code> or <code>-excludeSessionKey</code> parameters, respectively. The <code>-excludeIPs</code> and <code>-excludeSessionKeys</code> parameters have also been updated to exclude the <code>-excludeIP</code> and <code>-excludeSessionKey</code> parameters. For more information, refer to Using the User Session Reporting Tool with My HCLSoftware and User Session Reporting Tool.</p>"}]}